var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> * xenbus_xs.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the kernel equivalent of the \"xs\" library.  We don't need everything</span>", 
"<span class=\"comment\"> * and we use xenbus_comms for communication.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2005 Rusty Russell, IBM Corporation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License version 2</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; or, when distributed</span>", 
"<span class=\"comment\"> * separately from the Linux kernel or incorporated into other</span>", 
"<span class=\"comment\"> * software packages, subject to the following license:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span>", 
"<span class=\"comment\"> * of this source file (the \"Software\"), to deal in the Software without</span>", 
"<span class=\"comment\"> * restriction, including without limitation the rights to use, copy, modify,</span>", 
"<span class=\"comment\"> * merge, publish, distribute, sublicense, and/or sell copies of the Software,</span>", 
"<span class=\"comment\"> * and to permit persons to whom the Software is furnished to do so, subject to</span>", 
"<span class=\"comment\"> * the following conditions:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The above copyright notice and this permission notice shall be included in</span>", 
"<span class=\"comment\"> * all copies or substantial portions of the Software.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>", 
"<span class=\"comment\"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>", 
"<span class=\"comment\"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>", 
"<span class=\"comment\"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>", 
"<span class=\"comment\"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING</span>", 
"<span class=\"comment\"> * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS</span>", 
"<span class=\"comment\"> * IN THE SOFTWARE.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uio\">uio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#xenbus\">xenbus</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"xenbus_comms.h\"", 
"", 
"struct <a class=\"id\" href=\"#xs_stored_msg\">xs_stored_msg</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xsd_sockmsg\">xsd_sockmsg</a> <a class=\"id\" href=\"#hdr\">hdr</a>;", 
"", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Queued replies. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#body\">body</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#reply\">reply</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Queued watch events. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#xenbus_watch\">xenbus_watch</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char **<a class=\"id\" href=\"#vec\">vec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#vec_size\">vec_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#watch\">watch</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#u\">u</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#xs_handle\">xs_handle</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* A list of replies. Currently only one will ever be outstanding. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#reply_list\">reply_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#reply_lock\">reply_lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#reply_waitq\">reply_waitq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mutex ordering: transaction_mutex -&gt; watch_mutex -&gt; request_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * response_mutex is never taken simultaneously with the other three.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction_mutex must be held before incrementing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction_count. The mutex is held when a suspend is in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * progress to prevent new transactions starting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When decrementing transaction_count to zero the wait queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should be woken up, the suspend code waits for count to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reach zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* One request at a time. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#request_mutex\">request_mutex</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Protect xenbus reader thread against save/restore. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#response_mutex\">response_mutex</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Protect transactions against save/restore. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#transaction_mutex\">transaction_mutex</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#transaction_count\">transaction_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#transaction_wq\">transaction_wq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Protect watch (de)register against save/restore. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> <a class=\"id\" href=\"#watch_mutex\">watch_mutex</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#xs_handle\">xs_handle</a> <a class=\"id\" href=\"#xs_state\">xs_state</a>;", 
"", 
"<span class=\"comment\">/* List of registered watches, and a lock to protect it. */</span>", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#watches\">watches</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#watches_lock\">watches_lock</a>);", 
"", 
"<span class=\"comment\">/* List of pending watch callback events, and a lock to protect it. */</span>", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#watch_events\">watch_events</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#watch_events_lock\">watch_events_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Details of the xenwatch callback kernel thread. The thread waits on the</span>", 
"<span class=\"comment\"> * watch_events_waitq for work to do (queued on watch_events list). When it</span>", 
"<span class=\"comment\"> * wakes up it acquires the xenwatch_mutex before reading the list and</span>", 
"<span class=\"comment\"> * carrying out work.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#xenwatch_pid\">xenwatch_pid</a>;", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#xenwatch_mutex\">xenwatch_mutex</a>);", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#watch_events_waitq\">watch_events_waitq</a>);", 
"", 
"static int <a class=\"id\" href=\"#get_error\">get_error</a>(const char *<a class=\"id\" href=\"#errorstring\">errorstring</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#errorstring\">errorstring</a>, <a class=\"id\" href=\"#xsd_errors\">xsd_errors</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#errstring\">errstring</a>) != 0; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#xsd_errors\">xsd_errors</a>) - 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"XENBUS xen store gave: unknown error %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#errorstring\">errorstring</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xsd_errors\">xsd_errors</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#errnum\">errnum</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#read_reply\">read_reply</a>(enum <a class=\"id\" href=\"#xsd_sockmsg_type\">xsd_sockmsg_type</a> *<a class=\"id\" href=\"#type\">type</a>, unsigned int *<a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xs_stored_msg\">xs_stored_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#body\">body</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_lock\">reply_lock</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_list\">reply_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_lock\">reply_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* XXX FIXME: Avoid synchronous wait for response here. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_event\">wait_event</a>(<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_waitq\">reply_waitq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_list\">reply_list</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_lock\">reply_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_list\">reply_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#xs_stored_msg\">xs_stored_msg</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_lock\">reply_lock</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#body\">body</a> = <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#reply\">reply</a>.<a class=\"id\" href=\"#body\">body</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#msg\">msg</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#body\">body</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#transaction_start\">transaction_start</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_mutex\">transaction_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_count\">transaction_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_mutex\">transaction_mutex</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#transaction_end\">transaction_end</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_count\">transaction_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_wq\">transaction_wq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#transaction_suspend\">transaction_suspend</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_mutex\">transaction_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_event\">wait_event</a>(<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_wq\">transaction_wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_count\">transaction_count</a>) == 0);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#transaction_resume\">transaction_resume</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_mutex\">transaction_mutex</a>);", 
"}", 
"", 
"void *<a class=\"id\" href=\"#xenbus_dev_request_and_reply\">xenbus_dev_request_and_reply</a>(struct <a class=\"id\" href=\"#xsd_sockmsg\">xsd_sockmsg</a> *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xsd_sockmsg\">xsd_sockmsg</a> <a class=\"id\" href=\"#req_msg\">req_msg</a> = *<a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req_msg\">req_msg</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#XS_TRANSACTION_START\">XS_TRANSACTION_START</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction_start\">transaction_start</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#request_mutex\">request_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xb_write\">xb_write</a>(<a class=\"id\" href=\"#msg\">msg</a>, sizeof(*<a class=\"id\" href=\"#msg\">msg</a>) + <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#XS_ERROR\">XS_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#read_reply\">read_reply</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#type\">type</a>, &amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#request_mutex\">request_mutex</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#XS_TRANSACTION_END\">XS_TRANSACTION_END</a>) ||", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#req_msg\">req_msg</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#XS_TRANSACTION_START\">XS_TRANSACTION_START</a>) &&", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#XS_ERROR\">XS_ERROR</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction_end\">transaction_end</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#xenbus_dev_request_and_reply\">xenbus_dev_request_and_reply</a>);", 
"", 
"<span class=\"comment\">/* Send message to xs, get kmalloc'ed reply.  ERR_PTR() on error. */</span>", 
"static void *<a class=\"id\" href=\"#xs_talkv\">xs_talkv</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      enum <a class=\"id\" href=\"#xsd_sockmsg_type\">xsd_sockmsg_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#kvec\">kvec</a> *<a class=\"id\" href=\"#iovec\">iovec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#num_vecs\">num_vecs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int *<a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xsd_sockmsg\">xsd_sockmsg</a> <a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#tx_id\">tx_id</a> = <a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#req_id\">req_id</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_vecs\">num_vecs</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#iovec\">iovec</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#iov_len\">iov_len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#request_mutex\">request_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xb_write\">xb_write</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>, sizeof(<a class=\"id\" href=\"#msg\">msg</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#request_mutex\">request_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_vecs\">num_vecs</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xb_write\">xb_write</a>(<a class=\"id\" href=\"#iovec\">iovec</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#iov_base\">iov_base</a>, <a class=\"id\" href=\"#iovec\">iovec</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#iov_len\">iov_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#request_mutex\">request_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#read_reply\">read_reply</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#request_mutex\">request_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#XS_ERROR\">XS_ERROR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_error\">get_error</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"XENBUS unexpected type [%d], expected [%d]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Simplified version of xs_talkv: single message. */</span>", 
"static void *<a class=\"id\" href=\"#xs_single\">xs_single</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       enum <a class=\"id\" href=\"#xsd_sockmsg_type\">xsd_sockmsg_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#string\">string</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned int *<a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kvec\">kvec</a> <a class=\"id\" href=\"#iovec\">iovec</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iovec\">iovec</a>.<a class=\"id\" href=\"#iov_base\">iov_base</a> = (void *)<a class=\"id\" href=\"#string\">string</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iovec\">iovec</a>.<a class=\"id\" href=\"#iov_len\">iov_len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#string\">string</a>) + 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xs_talkv\">xs_talkv</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#type\">type</a>, &amp;<a class=\"id\" href=\"#iovec\">iovec</a>, 1, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Many commands only need an ack, don't care what it says. */</span>", 
"static int <a class=\"id\" href=\"#xs_error\">xs_error</a>(char *<a class=\"id\" href=\"#reply\">reply</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#reply\">reply</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#reply\">reply</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#reply\">reply</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#count_strings\">count_strings</a>(const char *<a class=\"id\" href=\"#strings\">strings</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#strings\">strings</a>, <a class=\"id\" href=\"#num\">num</a> = 0; <a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#strings\">strings</a> + <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#p\">p</a>) + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#num\">num</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Return the path to dir with /name appended. Buffer must be kfree()'ed. */</span>", 
"static char *<a class=\"id\" href=\"#join\">join</a>(const char *<a class=\"id\" href=\"#dir\">dir</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kasprintf\">kasprintf</a>(<a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a> | <a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>, \"%s\", <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kasprintf\">kasprintf</a>(<a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a> | <a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>, \"%s/%s\", <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>return (!<a class=\"id\" href=\"#buffer\">buffer</a>) ? <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>) : <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"}", 
"", 
"static char **<a class=\"id\" href=\"#split\">split</a>(char *<a class=\"id\" href=\"#strings\">strings</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>, unsigned int *<a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>, **<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Count the strings. */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#count_strings\">count_strings</a>(<a class=\"id\" href=\"#strings\">strings</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Transfer to one big alloc for easy freeing. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(*<a class=\"id\" href=\"#num\">num</a> * sizeof(char *) + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a> | <a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#strings\">strings</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#ret\">ret</a>[*<a class=\"id\" href=\"#num\">num</a>], <a class=\"id\" href=\"#strings\">strings</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#strings\">strings</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strings\">strings</a> = (char *)&amp;<a class=\"id\" href=\"#ret\">ret</a>[*<a class=\"id\" href=\"#num\">num</a>];", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#strings\">strings</a>, *<a class=\"id\" href=\"#num\">num</a> = 0; <a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#strings\">strings</a> + <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#p\">p</a>) + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>[(*<a class=\"id\" href=\"#num\">num</a>)++] = <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"char **<a class=\"id\" href=\"#xenbus_directory\">xenbus_directory</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#dir\">dir</a>, const char *<a class=\"id\" href=\"#node\">node</a>, unsigned int *<a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#strings\">strings</a>, *<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#join\">join</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#path\">path</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (char **)<a class=\"id\" href=\"#path\">path</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strings\">strings</a> = <a class=\"id\" href=\"#xs_single\">xs_single</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#XS_DIRECTORY\">XS_DIRECTORY</a>, <a class=\"id\" href=\"#path\">path</a>, &amp;<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#strings\">strings</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (char **)<a class=\"id\" href=\"#strings\">strings</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#split\">split</a>(<a class=\"id\" href=\"#strings\">strings</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_directory\">xenbus_directory</a>);", 
"", 
"<span class=\"comment\">/* Check if a path exists. Return 1 if it does. */</span>", 
"int <a class=\"id\" href=\"#xenbus_exists\">xenbus_exists</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#dir\">dir</a>, const char *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>char **<a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dir_n\">dir_n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#xenbus_directory\">xenbus_directory</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#dir_n\">dir_n</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#d\">d</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_exists\">xenbus_exists</a>);", 
"", 
"<span class=\"comment\">/* Get the value of a single file.</span>", 
"<span class=\"comment\"> * Returns a kmalloced value: call free() on it after use.</span>", 
"<span class=\"comment\"> * len indicates length in bytes.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#xenbus_read\">xenbus_read</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#dir\">dir</a>, const char *<a class=\"id\" href=\"#node\">node</a>, unsigned int *<a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#join\">join</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#path\">path</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (void *)<a class=\"id\" href=\"#path\">path</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#xs_single\">xs_single</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#XS_READ\">XS_READ</a>, <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_read\">xenbus_read</a>);", 
"", 
"<span class=\"comment\">/* Write the value of a single file.</span>", 
"<span class=\"comment\"> * Returns -err on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_write\">xenbus_write</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#dir\">dir</a>, const char *<a class=\"id\" href=\"#node\">node</a>, const char *<a class=\"id\" href=\"#string\">string</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kvec\">kvec</a> <a class=\"id\" href=\"#iovec\">iovec</a>[2];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#join\">join</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#path\">path</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iovec\">iovec</a>[0].<a class=\"id\" href=\"#iov_base\">iov_base</a> = (void *)<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iovec\">iovec</a>[0].<a class=\"id\" href=\"#iov_len\">iov_len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#path\">path</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iovec\">iovec</a>[1].<a class=\"id\" href=\"#iov_base\">iov_base</a> = (void *)<a class=\"id\" href=\"#string\">string</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iovec\">iovec</a>[1].<a class=\"id\" href=\"#iov_len\">iov_len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#string\">string</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#xs_error\">xs_error</a>(<a class=\"id\" href=\"#xs_talkv\">xs_talkv</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#XS_WRITE\">XS_WRITE</a>, <a class=\"id\" href=\"#iovec\">iovec</a>, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#iovec\">iovec</a>), <a class=\"id\" href=\"#NULL\">NULL</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_write\">xenbus_write</a>);", 
"", 
"<span class=\"comment\">/* Create a new directory. */</span>", 
"int <a class=\"id\" href=\"#xenbus_mkdir\">xenbus_mkdir</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#dir\">dir</a>, const char *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#join\">join</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#path\">path</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#xs_error\">xs_error</a>(<a class=\"id\" href=\"#xs_single\">xs_single</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#XS_MKDIR\">XS_MKDIR</a>, <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#NULL\">NULL</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_mkdir\">xenbus_mkdir</a>);", 
"", 
"<span class=\"comment\">/* Destroy a file or directory (directories must be empty). */</span>", 
"int <a class=\"id\" href=\"#xenbus_rm\">xenbus_rm</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#t\">t</a>, const char *<a class=\"id\" href=\"#dir\">dir</a>, const char *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#join\">join</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#path\">path</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#xs_error\">xs_error</a>(<a class=\"id\" href=\"#xs_single\">xs_single</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#XS_RM\">XS_RM</a>, <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#NULL\">NULL</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_rm\">xenbus_rm</a>);", 
"", 
"<span class=\"comment\">/* Start a transaction: changes by others will not be seen during this</span>", 
"<span class=\"comment\"> * transaction, and changes will not be visible to others until end.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_transaction_start\">xenbus_transaction_start</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#id_str\">id_str</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_start\">transaction_start</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id_str\">id_str</a> = <a class=\"id\" href=\"#xs_single\">xs_single</a>(<a class=\"id\" href=\"#XBT_NIL\">XBT_NIL</a>, <a class=\"id\" href=\"#XS_TRANSACTION_START\">XS_TRANSACTION_START</a>, \"\", <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#id_str\">id_str</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction_end\">transaction_end</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#id_str\">id_str</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#id_str\">id_str</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#id_str\">id_str</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_transaction_start\">xenbus_transaction_start</a>);", 
"", 
"<span class=\"comment\">/* End a transaction.</span>", 
"<span class=\"comment\"> * If abandon is true, transaction is discarded instead of committed.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_transaction_end\">xenbus_transaction_end</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#abort\">abort</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#abortstr\">abortstr</a>[2];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#abort\">abort</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#abortstr\">abortstr</a>, \"F\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#abortstr\">abortstr</a>, \"T\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xs_error\">xs_error</a>(<a class=\"id\" href=\"#xs_single\">xs_single</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#XS_TRANSACTION_END\">XS_TRANSACTION_END</a>, <a class=\"id\" href=\"#abortstr\">abortstr</a>, <a class=\"id\" href=\"#NULL\">NULL</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_end\">transaction_end</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_transaction_end\">xenbus_transaction_end</a>);", 
"", 
"<span class=\"comment\">/* Single read and scanf: returns -errno or num scanned. */</span>", 
"int <a class=\"id\" href=\"#xenbus_scanf\">xenbus_scanf</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#dir\">dir</a>, const char *<a class=\"id\" href=\"#node\">node</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#xenbus_read\">xenbus_read</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#val\">val</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vsscanf\">vsscanf</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Distinctive errno. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_scanf\">xenbus_scanf</a>);", 
"", 
"<span class=\"comment\">/* Single printf and write: returns -errno or 0. */</span>", 
"int <a class=\"id\" href=\"#xenbus_printf\">xenbus_printf</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#dir\">dir</a>, const char *<a class=\"id\" href=\"#node\">node</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PRINTF_BUFFER_SIZE\">PRINTF_BUFFER_SIZE</a> 4096", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#printf_buffer\">printf_buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printf_buffer\">printf_buffer</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#PRINTF_BUFFER_SIZE\">PRINTF_BUFFER_SIZE</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a> | <a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#printf_buffer\">printf_buffer</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#printf_buffer\">printf_buffer</a>, <a class=\"id\" href=\"#PRINTF_BUFFER_SIZE\">PRINTF_BUFFER_SIZE</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a> &gt; <a class=\"id\" href=\"#PRINTF_BUFFER_SIZE\">PRINTF_BUFFER_SIZE</a>-1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#xenbus_write\">xenbus_write</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#printf_buffer\">printf_buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#printf_buffer\">printf_buffer</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_printf\">xenbus_printf</a>);", 
"", 
"<span class=\"comment\">/* Takes tuples of names, scanf-style args, and void **, NULL terminated. */</span>", 
"int <a class=\"id\" href=\"#xenbus_gather\">xenbus_gather</a>(struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#t\">t</a>, const char *<a class=\"id\" href=\"#dir\">dir</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ret\">ret</a> == 0 && (<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#ap\">ap</a>, char *)) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#fmt\">fmt</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#ap\">ap</a>, char *);", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#ap\">ap</a>, void *);", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#xenbus_read\">xenbus_read</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fmt\">fmt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#result\">result</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(char **)<a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_gather\">xenbus_gather</a>);", 
"", 
"static int <a class=\"id\" href=\"#xs_watch\">xs_watch</a>(const char *<a class=\"id\" href=\"#path\">path</a>, const char *<a class=\"id\" href=\"#token\">token</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kvec\">kvec</a> <a class=\"id\" href=\"#iov\">iov</a>[2];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>[0].<a class=\"id\" href=\"#iov_base\">iov_base</a> = (void *)<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>[0].<a class=\"id\" href=\"#iov_len\">iov_len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#path\">path</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>[1].<a class=\"id\" href=\"#iov_base\">iov_base</a> = (void *)<a class=\"id\" href=\"#token\">token</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>[1].<a class=\"id\" href=\"#iov_len\">iov_len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#token\">token</a>) + 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xs_error\">xs_error</a>(<a class=\"id\" href=\"#xs_talkv\">xs_talkv</a>(<a class=\"id\" href=\"#XBT_NIL\">XBT_NIL</a>, <a class=\"id\" href=\"#XS_WATCH\">XS_WATCH</a>, <a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#iov\">iov</a>), <a class=\"id\" href=\"#NULL\">NULL</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#xs_unwatch\">xs_unwatch</a>(const char *<a class=\"id\" href=\"#path\">path</a>, const char *<a class=\"id\" href=\"#token\">token</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kvec\">kvec</a> <a class=\"id\" href=\"#iov\">iov</a>[2];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>[0].<a class=\"id\" href=\"#iov_base\">iov_base</a> = (char *)<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>[0].<a class=\"id\" href=\"#iov_len\">iov_len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#path\">path</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>[1].<a class=\"id\" href=\"#iov_base\">iov_base</a> = (char *)<a class=\"id\" href=\"#token\">token</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>[1].<a class=\"id\" href=\"#iov_len\">iov_len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#token\">token</a>) + 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xs_error\">xs_error</a>(<a class=\"id\" href=\"#xs_talkv\">xs_talkv</a>(<a class=\"id\" href=\"#XBT_NIL\">XBT_NIL</a>, <a class=\"id\" href=\"#XS_UNWATCH\">XS_UNWATCH</a>, <a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#iov\">iov</a>), <a class=\"id\" href=\"#NULL\">NULL</a>));", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#xenbus_watch\">xenbus_watch</a> *<a class=\"id\" href=\"#find_watch\">find_watch</a>(const char *<a class=\"id\" href=\"#token\">token</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xenbus_watch\">xenbus_watch</a> *<a class=\"id\" href=\"#i\">i</a>, *<a class=\"id\" href=\"#cmp\">cmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmp\">cmp</a> = (void *)<a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#token\">token</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 16);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#i\">i</a>, &amp;<a class=\"id\" href=\"#watches\">watches</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#cmp\">cmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Register callback to watch this node. */</span>", 
"int <a class=\"id\" href=\"#register_xenbus_watch\">register_xenbus_watch</a>(struct <a class=\"id\" href=\"#xenbus_watch\">xenbus_watch</a> *<a class=\"id\" href=\"#watch\">watch</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Pointer in ascii is the token. */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#token\">token</a>[sizeof(<a class=\"id\" href=\"#watch\">watch</a>) * 2 + 1];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#token\">token</a>, \"%lX\", (long)<a class=\"id\" href=\"#watch\">watch</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#watch_mutex\">watch_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#watches_lock\">watches_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#find_watch\">find_watch</a>(<a class=\"id\" href=\"#token\">token</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#watch\">watch</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#watches\">watches</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#watches_lock\">watches_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xs_watch\">xs_watch</a>(<a class=\"id\" href=\"#watch\">watch</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#token\">token</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ignore errors due to multiple registration. */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> != 0) && (<a class=\"id\" href=\"#err\">err</a> != -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#watches_lock\">watches_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#watch\">watch</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#watches_lock\">watches_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#watch_mutex\">watch_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_xenbus_watch\">register_xenbus_watch</a>);", 
"", 
"void <a class=\"id\" href=\"#unregister_xenbus_watch\">unregister_xenbus_watch</a>(struct <a class=\"id\" href=\"#xenbus_watch\">xenbus_watch</a> *<a class=\"id\" href=\"#watch\">watch</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xs_stored_msg\">xs_stored_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#token\">token</a>[sizeof(<a class=\"id\" href=\"#watch\">watch</a>) * 2 + 1];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#token\">token</a>, \"%lX\", (long)<a class=\"id\" href=\"#watch\">watch</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#watch_mutex\">watch_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#watches_lock\">watches_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#find_watch\">find_watch</a>(<a class=\"id\" href=\"#token\">token</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#watch\">watch</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#watches_lock\">watches_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xs_unwatch\">xs_unwatch</a>(<a class=\"id\" href=\"#watch\">watch</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#token\">token</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"XENBUS Failed to release watch %s: %i\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#watch\">watch</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#watch_mutex\">watch_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure there are no callbacks running currently (unless</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   its us) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a> != <a class=\"id\" href=\"#xenwatch_pid\">xenwatch_pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#xenwatch_mutex\">xenwatch_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Cancel pending watch events. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#watch_events_lock\">watch_events_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#watch_events\">watch_events</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#handle\">handle</a> != <a class=\"id\" href=\"#watch\">watch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#vec\">vec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#msg\">msg</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#watch_events_lock\">watch_events_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a> != <a class=\"id\" href=\"#xenwatch_pid\">xenwatch_pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xenwatch_mutex\">xenwatch_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_xenbus_watch\">unregister_xenbus_watch</a>);", 
"", 
"void <a class=\"id\" href=\"#xs_suspend\">xs_suspend</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_suspend\">transaction_suspend</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#watch_mutex\">watch_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#request_mutex\">request_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#response_mutex\">response_mutex</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#xs_resume\">xs_resume</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xenbus_watch\">xenbus_watch</a> *<a class=\"id\" href=\"#watch\">watch</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#token\">token</a>[sizeof(<a class=\"id\" href=\"#watch\">watch</a>) * 2 + 1];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xb_init_comms\">xb_init_comms</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#response_mutex\">response_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#request_mutex\">request_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_resume\">transaction_resume</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No need for watches_lock: the watch_mutex is sufficient. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#watch\">watch</a>, &amp;<a class=\"id\" href=\"#watches\">watches</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#token\">token</a>, \"%lX\", (long)<a class=\"id\" href=\"#watch\">watch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xs_watch\">xs_watch</a>(<a class=\"id\" href=\"#watch\">watch</a>-><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#token\">token</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#watch_mutex\">watch_mutex</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#xs_suspend_cancel\">xs_suspend_cancel</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#response_mutex\">response_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#request_mutex\">request_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#watch_mutex\">watch_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_mutex\">transaction_mutex</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#xenwatch_thread\">xenwatch_thread</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xs_stored_msg\">xs_stored_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#watch_events_waitq\">watch_events_waitq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#watch_events\">watch_events</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#xenwatch_mutex\">xenwatch_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#watch_events_lock\">watch_events_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#watch_events\">watch_events</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a> != &amp;<a class=\"id\" href=\"#watch_events\">watch_events</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#watch_events_lock\">watch_events_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a> != &amp;<a class=\"id\" href=\"#watch_events\">watch_events</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#ent\">ent</a>, struct <a class=\"id\" href=\"#xs_stored_msg\">xs_stored_msg</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#callback\">callback</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(const char **)<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#vec\">vec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#vec_size\">vec_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#vec\">vec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#msg\">msg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xenwatch_mutex\">xenwatch_mutex</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#process_msg\">process_msg</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xs_stored_msg\">xs_stored_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#body\">body</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must disallow save/restore while reading a xenstore message.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A partial read across s/r leaves us out of sync with xenstored.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xb_wait_for_data_to_read\">xb_wait_for_data_to_read</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#response_mutex\">response_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#xb_data_to_read\">xb_data_to_read</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We raced with save/restore: pending data 'disappeared'. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#response_mutex\">response_mutex</a>);", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#msg\">msg</a>), <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a> | <a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xb_read\">xb_read</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#hdr\">hdr</a>, sizeof(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#hdr\">hdr</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#msg\">msg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#body\">body</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#len\">len</a> + 1, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a> | <a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#body\">body</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#msg\">msg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xb_read\">xb_read</a>(<a class=\"id\" href=\"#body\">body</a>, <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#body\">body</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#msg\">msg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#body\">body</a>[<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#len\">len</a>] = '\\0';", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#XS_WATCH_EVENT\">XS_WATCH_EVENT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#vec\">vec</a> = <a class=\"id\" href=\"#split\">split</a>(<a class=\"id\" href=\"#body\">body</a>, <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#vec_size\">vec_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#vec\">vec</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#vec\">vec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#msg\">msg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#watches_lock\">watches_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#find_watch\">find_watch</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#vec\">vec</a>[<a class=\"id\" href=\"#XS_WATCH_TOKEN\">XS_WATCH_TOKEN</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#handle\">handle</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#watch_events_lock\">watch_events_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#watch_events\">watch_events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#watch_events_waitq\">watch_events_waitq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#watch_events_lock\">watch_events_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#watch\">watch</a>.<a class=\"id\" href=\"#vec\">vec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#msg\">msg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#watches_lock\">watches_lock</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#reply\">reply</a>.<a class=\"id\" href=\"#body\">body</a> = <a class=\"id\" href=\"#body\">body</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_lock\">reply_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_list\">reply_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_lock\">reply_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_waitq\">reply_waitq</a>);", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#response_mutex\">response_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#xenbus_thread\">xenbus_thread</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#process_msg\">process_msg</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"XENBUS error %d while reading \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"message\\n\", <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#xs_init\">xs_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_list\">reply_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_lock\">reply_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#reply_waitq\">reply_waitq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#request_mutex\">request_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#response_mutex\">response_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_mutex\">transaction_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rwsem\">init_rwsem</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#watch_mutex\">watch_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_count\">transaction_count</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#xs_state\">xs_state</a>.<a class=\"id\" href=\"#transaction_wq\">transaction_wq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the shared memory rings to talk to xenstored */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xb_init_comms\">xb_init_comms</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#xenwatch_thread\">xenwatch_thread</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"xenwatch\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xenwatch_pid\">xenwatch_pid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#xenbus_thread\">xenbus_thread</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"xenbus\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/ee/6f5dd0664aac280dd0b0ff128024364637a9b9.xr', __xr_tmp);
