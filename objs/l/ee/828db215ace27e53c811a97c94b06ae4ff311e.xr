var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008 Red Hat, Inc., Eric Paris &lt;eparis@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2, or (at your option)</span>", 
"<span class=\"comment\"> *  any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; see the file COPYING.  If not, write to</span>", 
"<span class=\"comment\"> *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* for inode_lock */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify_backend\">fsnotify_backend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"fsnotify.h\"", 
"", 
"void <a class=\"id\" href=\"#fsnotify_clear_marks_by_mount\">fsnotify_clear_marks_by_mount</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>, *<a class=\"id\" href=\"#lmark\">lmark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#free_list\">free_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_fsnotify_marks\">mnt_fsnotify_marks</a>, <a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#m_list\">m_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#free_m_list\">free_m_list</a>, &amp;<a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_init_rcu\">hlist_del_init_rcu</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#m_list\">m_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_get_mark\">fsnotify_get_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#lmark\">lmark</a>, &amp;<a class=\"id\" href=\"#free_list\">free_list</a>, <a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#free_m_list\">free_m_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#fsnotify_clear_vfsmount_marks_by_group\">fsnotify_clear_vfsmount_marks_by_group</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_clear_marks_by_group_flags\">fsnotify_clear_marks_by_group_flags</a>(<a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_VFSMOUNT\">FSNOTIFY_MARK_FLAG_VFSMOUNT</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Recalculate the mask of events relevant to a given vfsmount locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#fsnotify_recalc_vfsmount_mask_locked\">fsnotify_recalc_vfsmount_mask_locked</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#new_mask\">new_mask</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_fsnotify_marks\">mnt_fsnotify_marks</a>, <a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#m_list\">m_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_mask\">new_mask</a> |= <a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_fsnotify_mask\">mnt_fsnotify_mask</a> = <a class=\"id\" href=\"#new_mask\">new_mask</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Recalculate the mnt-&gt;mnt_fsnotify_mask, or the mask of all FS_* event types</span>", 
"<span class=\"comment\"> * any notifier is interested in hearing for this mount point</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_recalc_vfsmount_mask\">fsnotify_recalc_vfsmount_mask</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_recalc_vfsmount_mask_locked\">fsnotify_recalc_vfsmount_mask_locked</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#fsnotify_destroy_vfsmount_mark\">fsnotify_destroy_vfsmount_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#mnt\">mnt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#mark_lock\">mark_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_init_rcu\">hlist_del_init_rcu</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#m_list\">m_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_recalc_vfsmount_mask_locked\">fsnotify_recalc_vfsmount_mask_locked</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#fsnotify_find_vfsmount_mark_locked\">fsnotify_find_vfsmount_mark_locked</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_fsnotify_marks\">mnt_fsnotify_marks</a>, <a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#m_list\">m_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#group\">group</a> == <a class=\"id\" href=\"#group\">group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_get_mark\">fsnotify_get_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * given a group and vfsmount, find the mark associated with that combination.</span>", 
"<span class=\"comment\"> * if found take a reference to that mark and return it, else return NULL</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#fsnotify_find_vfsmount_mark\">fsnotify_find_vfsmount_mark</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a> = <a class=\"id\" href=\"#fsnotify_find_vfsmount_mark_locked\">fsnotify_find_vfsmount_mark_locked</a>(<a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mark\">mark</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attach an initialized mark to a given group and vfsmount.</span>", 
"<span class=\"comment\"> * These marks may be used for the fsnotify backend to determine which</span>", 
"<span class=\"comment\"> * event types should be delivered to which groups.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fsnotify_add_vfsmount_mark\">fsnotify_add_vfsmount_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#allow_dups\">allow_dups</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#lmark\">lmark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_VFSMOUNT\">FSNOTIFY_MARK_FLAG_VFSMOUNT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#mark_lock\">mark_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* is mark the first mark? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hlist_empty\">hlist_empty</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_fsnotify_marks\">mnt_fsnotify_marks</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#m_list\">m_list</a>, &amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_fsnotify_marks\">mnt_fsnotify_marks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* should mark be in the middle of the current list? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#lmark\">lmark</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_fsnotify_marks\">mnt_fsnotify_marks</a>, <a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#m_list\">m_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#lmark\">lmark</a>-><a class=\"id\" href=\"#group\">group</a> == <a class=\"id\" href=\"#group\">group</a>) && !<a class=\"id\" href=\"#allow_dups\">allow_dups</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#lmark\">lmark</a>-><a class=\"id\" href=\"#group\">group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_before_rcu\">hlist_add_before_rcu</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#m_list\">m_list</a>, &amp;<a class=\"id\" href=\"#lmark\">lmark</a>-><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#m_list\">m_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#last\">last</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* mark should be the last entry.  last is the current last entry */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_after_rcu\">hlist_add_after_rcu</a>(<a class=\"id\" href=\"#last\">last</a>, &amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#m_list\">m_list</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_recalc_vfsmount_mask_locked\">fsnotify_recalc_vfsmount_mask_locked</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
];
xr_frag_insert('l/ee/828db215ace27e53c811a97c94b06ae4ff311e.xr', __xr_tmp);
