var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  file.c - part of debugfs, a tiny little debug file system</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004 Greg Kroah-Hartman &lt;greg@kroah.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004 IBM Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>modify it under the terms of the GNU General Public License version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2 as published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  debugfs is for people to use instead of /proc or /sys.</span>", 
"<span class=\"comment\"> *  See Documentation/DocBook/kernel-api for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* uncomment to get debug messages from the debug filesystem, ah the irony. */</span>", 
"<span class=\"comment\">/* #define DEBUG */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kobject\">kobject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify\">fsnotify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#debugfs_mount\">debugfs_mount</a>;", 
"static int <a class=\"id\" href=\"#debugfs_mount_count\">debugfs_mount_count</a>;", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#debugfs_registered\">debugfs_registered</a>;", 
"", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#debugfs_get_inode\">debugfs_get_inode</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#data\">data</a>, const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>)", 
"", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#new_inode\">new_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#CURRENT_TIME\">CURRENT_TIME</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IFMT\">S_IFMT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_special_inode\">init_special_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#S_IFREG\">S_IFREG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = <a class=\"id\" href=\"#fops\">fops</a> ? <a class=\"id\" href=\"#fops\">fops</a> : &amp;<a class=\"id\" href=\"#debugfs_file_operations\">debugfs_file_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#S_IFLNK\">S_IFLNK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#debugfs_link_operations\">debugfs_link_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = <a class=\"id\" href=\"#fops\">fops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#simple_dir_inode_operations\">simple_dir_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = <a class=\"id\" href=\"#fops\">fops</a> ? <a class=\"id\" href=\"#fops\">fops</a> : &amp;<a class=\"id\" href=\"#simple_dir_operations\">simple_dir_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* directory inodes start off with i_nlink == 2</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * (for \".\" entry) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_nlink\">inc_nlink</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>; ", 
"}", 
"", 
"<span class=\"comment\">/* SMP-safe */</span>", 
"static int <a class=\"id\" href=\"#debugfs_mknod\">debugfs_mknod</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#debugfs_get_inode\">debugfs_get_inode</a>(<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#fops\">fops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_instantiate\">d_instantiate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#debugfs_mkdir\">debugfs_mkdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void *<a class=\"id\" href=\"#data\">data</a>, const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = (<a class=\"id\" href=\"#mode\">mode</a> &amp; (<a class=\"id\" href=\"#S_IRWXUGO\">S_IRWXUGO</a> | <a class=\"id\" href=\"#S_ISVTX\">S_ISVTX</a>)) | <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#debugfs_mknod\">debugfs_mknod</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a>, 0, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#fops\">fops</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_nlink\">inc_nlink</a>(<a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_mkdir\">fsnotify_mkdir</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#debugfs_link\">debugfs_link</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>, const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>) | <a class=\"id\" href=\"#S_IFLNK\">S_IFLNK</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_mknod\">debugfs_mknod</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a>, 0, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#fops\">fops</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#debugfs_create\">debugfs_create</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#data\">data</a>, const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>) | <a class=\"id\" href=\"#S_IFREG\">S_IFREG</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#debugfs_mknod\">debugfs_mknod</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a>, 0, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#fops\">fops</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_create\">fsnotify_create</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#debugfs_positive\">debugfs_positive</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> && !<a class=\"id\" href=\"#d_unhashed\">d_unhashed</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#debug_fill_super\">debug_fill_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#silent\">silent</a>)", 
"{", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#tree_descr\">tree_descr</a> <a class=\"id\" href=\"#debug_files\">debug_files</a>[] = {{\"\"}};", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_fill_super\">simple_fill_super</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#DEBUGFS_MAGIC\">DEBUGFS_MAGIC</a>, <a class=\"id\" href=\"#debug_files\">debug_files</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#debug_get_sb\">debug_get_sb</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#dev_name\">dev_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_sb_single\">get_sb_single</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#debug_fill_super\">debug_fill_super</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> <a class=\"id\" href=\"#debug_fs_type\">debug_fs_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a> =<span class=\"ts\"/><a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> =<span class=\"ts\"/><span class=\"ts\"/>\"debugfs\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_sb\">get_sb</a> =<span class=\"ts\"/><a class=\"id\" href=\"#debug_get_sb\">debug_get_sb</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#kill_sb\">kill_sb</a> =<span class=\"ts\"/><a class=\"id\" href=\"#kill_litter_super\">kill_litter_super</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#debugfs_create_by_name\">debugfs_create_by_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dentry\">dentry</a> **<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the parent is not specified, we create it in the root.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need the root dentry to do this, which is in the super </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * block. A pointer to that is in the struct vfsmount that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have around.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#debugfs_mount\">debugfs_mount</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#lookup_one_len\">lookup_one_len</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(*<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IFMT\">S_IFMT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#debugfs_mkdir\">debugfs_mkdir</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, *<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#fops\">fops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#S_IFLNK\">S_IFLNK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#debugfs_link\">debugfs_link</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, *<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#fops\">fops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#debugfs_create\">debugfs_create</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, *<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#fops\">fops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(*<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(*<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_create_file - create a file in the debugfs filesystem</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the file to create.</span>", 
"<span class=\"comment\"> * @mode: the permission that the file should have.</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this file.  This should be a</span>", 
"<span class=\"comment\"> *          directory dentry if set.  If this paramater is NULL, then the</span>", 
"<span class=\"comment\"> *          file will be created in the root of the debugfs filesystem.</span>", 
"<span class=\"comment\"> * @data: a pointer to something that the caller will want to get to later</span>", 
"<span class=\"comment\"> *        on.  The inode.i_private pointer will point to this value on</span>", 
"<span class=\"comment\"> *        the open() call.</span>", 
"<span class=\"comment\"> * @fops: a pointer to a struct file_operations that should be used for</span>", 
"<span class=\"comment\"> *        this file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the basic \"create a file\" function for debugfs.  It allows for a</span>", 
"<span class=\"comment\"> * wide range of flexibility in creating a file, or a directory (if you want</span>", 
"<span class=\"comment\"> * to create a directory, the debugfs_create_dir() function is</span>", 
"<span class=\"comment\"> * recommended to be used instead.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will return a pointer to a dentry if it succeeds.  This</span>", 
"<span class=\"comment\"> * pointer must be passed to the debugfs_remove() function when the file is</span>", 
"<span class=\"comment\"> * to be removed (no automatic cleanup happens if your module is unloaded,</span>", 
"<span class=\"comment\"> * you are responsible here.)  If an error occurs, %NULL will be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If debugfs is not enabled in the kernel, the value -%ENODEV will be</span>", 
"<span class=\"comment\"> * returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#fops\">fops</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"debugfs: creating file '%s'\\n\",<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#simple_pin_fs\">simple_pin_fs</a>(&amp;<a class=\"id\" href=\"#debug_fs_type\">debug_fs_type</a>, &amp;<a class=\"id\" href=\"#debugfs_mount\">debugfs_mount</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#debugfs_mount_count\">debugfs_mount_count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#debugfs_create_by_name\">debugfs_create_by_name</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, &amp;<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#fops\">fops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#simple_release_fs\">simple_release_fs</a>(&amp;<a class=\"id\" href=\"#debugfs_mount\">debugfs_mount</a>, &amp;<a class=\"id\" href=\"#debugfs_mount_count\">debugfs_mount_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_create_dir - create a directory in the debugfs filesystem</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the directory to</span>", 
"<span class=\"comment\"> *        create.</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this file.  This should be a</span>", 
"<span class=\"comment\"> *          directory dentry if set.  If this paramater is NULL, then the</span>", 
"<span class=\"comment\"> *          directory will be created in the root of the debugfs filesystem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a directory in debugfs with the given name.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will return a pointer to a dentry if it succeeds.  This</span>", 
"<span class=\"comment\"> * pointer must be passed to the debugfs_remove() function when the file is</span>", 
"<span class=\"comment\"> * to be removed (no automatic cleanup happens if your module is unloaded,</span>", 
"<span class=\"comment\"> * you are responsible here.)  If an error occurs, %NULL will be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If debugfs is not enabled in the kernel, the value -%ENODEV will be</span>", 
"<span class=\"comment\"> * returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_create_dir\">debugfs_create_dir</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a> | <a class=\"id\" href=\"#S_IRWXU\">S_IRWXU</a> | <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IXUGO\">S_IXUGO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_create_dir\">debugfs_create_dir</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_create_symlink- create a symbolic link in the debugfs filesystem</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the symbolic link to</span>", 
"<span class=\"comment\"> *        create.</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this symbolic link.  This</span>", 
"<span class=\"comment\"> *          should be a directory dentry if set.  If this paramater is NULL,</span>", 
"<span class=\"comment\"> *          then the symbolic link will be created in the root of the debugfs</span>", 
"<span class=\"comment\"> *          filesystem.</span>", 
"<span class=\"comment\"> * @target: a pointer to a string containing the path to the target of the</span>", 
"<span class=\"comment\"> *          symbolic link.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a symbolic link with the given name in debugfs that</span>", 
"<span class=\"comment\"> * links to the given target path.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will return a pointer to a dentry if it succeeds.  This</span>", 
"<span class=\"comment\"> * pointer must be passed to the debugfs_remove() function when the symbolic</span>", 
"<span class=\"comment\"> * link is to be removed (no automatic cleanup happens if your module is</span>", 
"<span class=\"comment\"> * unloaded, you are responsible here.)  If an error occurs, %NULL will be</span>", 
"<span class=\"comment\"> * returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If debugfs is not enabled in the kernel, the value -%ENODEV will be</span>", 
"<span class=\"comment\"> * returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_create_symlink\">debugfs_create_symlink</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#target\">target</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#link\">link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#S_IFLNK\">S_IFLNK</a> | <a class=\"id\" href=\"#S_IRWXUGO\">S_IRWXUGO</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#link\">link</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_create_symlink\">debugfs_create_symlink</a>);", 
"", 
"static void <a class=\"id\" href=\"#__debugfs_remove\">__debugfs_remove</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#debugfs_positive\">debugfs_positive</a>(<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> &amp; <a class=\"id\" href=\"#S_IFMT\">S_IFMT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#simple_rmdir\">simple_rmdir</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#S_IFLNK\">S_IFLNK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#simple_unlink\">simple_unlink</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_delete\">d_delete</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_remove - removes a file or directory from the debugfs filesystem</span>", 
"<span class=\"comment\"> * @dentry: a pointer to a the dentry of the file or directory to be</span>", 
"<span class=\"comment\"> *          removed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function removes a file or directory in debugfs that was previously</span>", 
"<span class=\"comment\"> * created with a call to another debugfs function (like</span>", 
"<span class=\"comment\"> * debugfs_create_file() or variants thereof.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is required to be called in order for the file to be</span>", 
"<span class=\"comment\"> * removed, no automatic cleanup of files will happen when a module is</span>", 
"<span class=\"comment\"> * removed, you are responsible here.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a> || !<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__debugfs_remove\">__debugfs_remove</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simple_release_fs\">simple_release_fs</a>(&amp;<a class=\"id\" href=\"#debugfs_mount\">debugfs_mount</a>, &amp;<a class=\"id\" href=\"#debugfs_mount_count\">debugfs_mount_count</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_remove_recursive - recursively removes a directory</span>", 
"<span class=\"comment\"> * @dentry: a pointer to a the dentry of the directory to be removed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function recursively removes a directory tree in debugfs that</span>", 
"<span class=\"comment\"> * was previously created with a call to another debugfs function</span>", 
"<span class=\"comment\"> * (like debugfs_create_file() or variants thereof.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is required to be called in order for the file to be</span>", 
"<span class=\"comment\"> * removed, no automatic cleanup of files will happen when a module is</span>", 
"<span class=\"comment\"> * removed, you are responsible here.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#debugfs_remove_recursive\">debugfs_remove_recursive</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a> || !<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When all dentries under \"parent\" has been removed,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * walk up the tree until we reach our starting point.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>);", 
" <a class=\"id\" href=\"#next_sibling\">next_sibling</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If \"child\" isn't empty, walk down the tree and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * remove all its descendants first.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__debugfs_remove\">__debugfs_remove</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>.<a class=\"id\" href=\"#next\">next</a> == &amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Try the next sibling.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>.<a class=\"id\" href=\"#next\">next</a> != &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next_sibling\">next_sibling</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Avoid infinite loop if we fail to remove</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * one dentry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#simple_release_fs\">simple_release_fs</a>(&amp;<a class=\"id\" href=\"#debugfs_mount\">debugfs_mount</a>, &amp;<a class=\"id\" href=\"#debugfs_mount_count\">debugfs_mount_count</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__debugfs_remove\">__debugfs_remove</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simple_release_fs\">simple_release_fs</a>(&amp;<a class=\"id\" href=\"#debugfs_mount\">debugfs_mount</a>, &amp;<a class=\"id\" href=\"#debugfs_mount_count\">debugfs_mount_count</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_remove_recursive\">debugfs_remove_recursive</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_rename - rename a file/directory in the debugfs filesystem</span>", 
"<span class=\"comment\"> * @old_dir: a pointer to the parent dentry for the renamed object. This</span>", 
"<span class=\"comment\"> *          should be a directory dentry.</span>", 
"<span class=\"comment\"> * @old_dentry: dentry of an object to be renamed.</span>", 
"<span class=\"comment\"> * @new_dir: a pointer to the parent dentry where the object should be</span>", 
"<span class=\"comment\"> *          moved. This should be a directory dentry.</span>", 
"<span class=\"comment\"> * @new_name: a pointer to a string containing the target name.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function renames a file/directory in debugfs.  The target must not</span>", 
"<span class=\"comment\"> * exist for rename to succeed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will return a pointer to old_dentry (which is updated to</span>", 
"<span class=\"comment\"> * reflect renaming) if it succeeds. If an error occurs, %NULL will be</span>", 
"<span class=\"comment\"> * returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If debugfs is not enabled in the kernel, the value -%ENODEV will be</span>", 
"<span class=\"comment\"> * returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_rename\">debugfs_rename</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dir\">old_dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dir\">new_dir</a>, const char *<a class=\"id\" href=\"#new_name\">new_name</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#trap\">trap</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#old_name\">old_name</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trap\">trap</a> = <a class=\"id\" href=\"#lock_rename\">lock_rename</a>(<a class=\"id\" href=\"#new_dir\">new_dir</a>, <a class=\"id\" href=\"#old_dir\">old_dir</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Source or destination directories don't exist? */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#old_dir\">old_dir</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> || !<a class=\"id\" href=\"#new_dir\">new_dir</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Source does not exist, cyclic rename, or mountpoint? */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#old_dentry\">old_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> || <a class=\"id\" href=\"#old_dentry\">old_dentry</a> == <a class=\"id\" href=\"#trap\">trap</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#d_mountpoint\">d_mountpoint</a>(<a class=\"id\" href=\"#old_dentry\">old_dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#lookup_one_len\">lookup_one_len</a>(<a class=\"id\" href=\"#new_name\">new_name</a>, <a class=\"id\" href=\"#new_dir\">new_dir</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#new_name\">new_name</a>));", 
"<span class=\"ts\"/><span class=\"comment\">/* Lookup failed, cyclic rename or target exists? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>) || <a class=\"id\" href=\"#dentry\">dentry</a> == <a class=\"id\" href=\"#trap\">trap</a> || <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_name\">old_name</a> = <a class=\"id\" href=\"#fsnotify_oldname_init\">fsnotify_oldname_init</a>(<a class=\"id\" href=\"#old_dentry\">old_dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#simple_rename\">simple_rename</a>(<a class=\"id\" href=\"#old_dir\">old_dir</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#old_dentry\">old_dentry</a>, <a class=\"id\" href=\"#new_dir\">new_dir</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_oldname_free\">fsnotify_oldname_free</a>(<a class=\"id\" href=\"#old_name\">old_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_move\">d_move</a>(<a class=\"id\" href=\"#old_dentry\">old_dentry</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_move\">fsnotify_move</a>(<a class=\"id\" href=\"#old_dir\">old_dir</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#new_dir\">new_dir</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#old_name\">old_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#old_dentry\">old_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#old_dentry\">old_dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_oldname_free\">fsnotify_oldname_free</a>(<a class=\"id\" href=\"#old_name\">old_name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_rename\">unlock_rename</a>(<a class=\"id\" href=\"#new_dir\">new_dir</a>, <a class=\"id\" href=\"#old_dir\">old_dir</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#old_dentry\">old_dentry</a>;", 
"<a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a> && !<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_rename\">unlock_rename</a>(<a class=\"id\" href=\"#new_dir\">new_dir</a>, <a class=\"id\" href=\"#old_dir\">old_dir</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_rename\">debugfs_rename</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_initialized - Tells whether debugfs has been registered</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#debugfs_initialized\">debugfs_initialized</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_registered\">debugfs_registered</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_initialized\">debugfs_initialized</a>);", 
"", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#debug_kobj\">debug_kobj</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#debugfs_init\">debugfs_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_kobj\">debug_kobj</a> = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(\"debug\", <a class=\"id\" href=\"#kernel_kobj\">kernel_kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#debug_kobj\">debug_kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#register_filesystem\">register_filesystem</a>(&amp;<a class=\"id\" href=\"#debug_fs_type\">debug_fs_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#debug_kobj\">debug_kobj</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugfs_registered\">debugfs_registered</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#debugfs_exit\">debugfs_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_registered\">debugfs_registered</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simple_release_fs\">simple_release_fs</a>(&amp;<a class=\"id\" href=\"#debugfs_mount\">debugfs_mount</a>, &amp;<a class=\"id\" href=\"#debugfs_mount_count\">debugfs_mount_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_filesystem\">unregister_filesystem</a>(&amp;<a class=\"id\" href=\"#debug_fs_type\">debug_fs_type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#debug_kobj\">debug_kobj</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#debugfs_init\">debugfs_init</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#debugfs_exit\">debugfs_exit</a>);", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"", 
];
xr_frag_insert('l/ee/e0711e0fee29fa3618dd9ab0b9d1c7f16d8cbb.xr', __xr_tmp);
