var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This file define the new driver API for Wireless Extensions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Version :<span class=\"ts\"/>8<span class=\"ts\"/>16.3.07</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors :<span class=\"ts\"/>Jean Tourrilhes - HPL - &lt;jt@hpl.hp.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2001-2007 Jean Tourrilhes, All Rights Reserved.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_IW_HANDLER_H\">_IW_HANDLER_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_IW_HANDLER_H\">_IW_HANDLER_H</a>", 
"", 
"<span class=\"comment\">/************************** DOCUMENTATION **************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initial driver API (1996 -&gt; onward) :</span>", 
"<span class=\"comment\"> * -----------------------------------</span>", 
"<span class=\"comment\"> * The initial API just sends the IOCTL request received from user space</span>", 
"<span class=\"comment\"> * to the driver (via the driver ioctl handler). The driver has to</span>", 
"<span class=\"comment\"> * handle all the rest...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The initial API also defines a specific handler in struct net_device</span>", 
"<span class=\"comment\"> * to handle wireless statistics.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The initial APIs served us well and has proven a reasonably good design.</span>", 
"<span class=\"comment\"> * However, there is a few shortcommings :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o No events, everything is a request to the driver.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o Large ioctl function in driver with gigantic switch statement</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  (i.e. spaghetti code).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o Driver has to mess up with copy_to/from_user, and in many cases</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  does it unproperly. Common mistakes are :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>* buffer overflows (no checks or off by one checks)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>* call copy_to/from_user with irq disabled</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o The user space interface is tied to ioctl because of the use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  copy_to/from_user.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * New driver API (2002 -&gt; onward) :</span>", 
"<span class=\"comment\"> * -------------------------------</span>", 
"<span class=\"comment\"> * The new driver API is just a bunch of standard functions (handlers),</span>", 
"<span class=\"comment\"> * each handling a specific Wireless Extension. The driver just export</span>", 
"<span class=\"comment\"> * the list of handler it supports, and those will be called apropriately.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * I tried to keep the main advantage of the previous API (simplicity,</span>", 
"<span class=\"comment\"> * efficiency and light weight), and also I provide a good dose of backward</span>", 
"<span class=\"comment\"> * compatibility (most structures are the same, driver can use both API</span>", 
"<span class=\"comment\"> * simultaneously, ...).</span>", 
"<span class=\"comment\"> * Hopefully, I've also addressed the shortcomming of the initial API.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The advantage of the new API are :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o Handling of Extensions in driver broken in small contained functions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o Tighter checks of ioctl before calling the driver</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o Flexible commit strategy (at least, the start of it)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o Backward compatibility (can be mixed with old API)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o Driver doesn't have to worry about memory and user-space issues</span>", 
"<span class=\"comment\"> * The last point is important for the following reasons :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o You are now able to call the new driver API from any API you</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>want (including from within other parts of the kernel).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o Common mistakes are avoided (buffer overflow, user space copy</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>with irq disabled and so on).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The Drawback of the new API are :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o bloat (especially kernel)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o need to migrate existing drivers to new API</span>", 
"<span class=\"comment\"> * My initial testing shows that the new API adds around 3kB to the kernel</span>", 
"<span class=\"comment\"> * and save between 0 and 5kB from a typical driver.</span>", 
"<span class=\"comment\"> * Also, as all structures and data types are unchanged, the migration is</span>", 
"<span class=\"comment\"> * quite straightforward (but tedious).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ---</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The new driver API is defined below in this file. User space should</span>", 
"<span class=\"comment\"> * not be aware of what's happening down there...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A new kernel wrapper is in charge of validating the IOCTLs and calling</span>", 
"<span class=\"comment\"> * the appropriate driver handler. This is implemented in :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/># net/core/wireless.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The driver export the list of handlers in :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/># include/linux/netdevice.h (one place)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The new driver API is available for WIRELESS_EXT &gt;= 13.</span>", 
"<span class=\"comment\"> * Good luck with migration to the new API ;-)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* ---------------------- THE IMPLEMENTATION ---------------------- */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some of the choice I've made are pretty controversials. Defining an</span>", 
"<span class=\"comment\"> * API is very much weighting compromises. This goes into some of the</span>", 
"<span class=\"comment\"> * details and the thinking behind the implementation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Implementation goals :</span>", 
"<span class=\"comment\"> * --------------------</span>", 
"<span class=\"comment\"> * The implementation goals were as follow :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o Obvious : you should not need a PhD to understand what's happening,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>the benefit is easier maintainance.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o Flexible : it should accommodate a wide variety of driver</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>implementations and be as flexible as the old API.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o Lean : it should be efficient memory wise to minimise the impact</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>on kernel footprint.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o Transparent to user space : the large number of user space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>applications that use Wireless Extensions should not need</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>any modifications.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Array of functions versus Struct of functions</span>", 
"<span class=\"comment\"> * ---------------------------------------------</span>", 
"<span class=\"comment\"> * 1) Having an array of functions allow the kernel code to access the</span>", 
"<span class=\"comment\"> * handler in a single lookup, which is much more efficient (think hash</span>", 
"<span class=\"comment\"> * table here).</span>", 
"<span class=\"comment\"> * 2) The only drawback is that driver writer may put their handler in</span>", 
"<span class=\"comment\"> * the wrong slot. This is trivial to test (I set the frequency, the</span>", 
"<span class=\"comment\"> * bitrate changes). Once the handler is in the proper slot, it will be</span>", 
"<span class=\"comment\"> * there forever, because the array is only extended at the end.</span>", 
"<span class=\"comment\"> * 3) Backward/forward compatibility : adding new handler just require</span>", 
"<span class=\"comment\"> * extending the array, so you can put newer driver in older kernel</span>", 
"<span class=\"comment\"> * without having to patch the kernel code (and vice versa).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All handler are of the same generic type</span>", 
"<span class=\"comment\"> * ----------------------------------------</span>", 
"<span class=\"comment\"> * That's a feature !!!</span>", 
"<span class=\"comment\"> * 1) Having a generic handler allow to have generic code, which is more</span>", 
"<span class=\"comment\"> * efficient. If each of the handler was individually typed I would need</span>", 
"<span class=\"comment\"> * to add a big switch in the kernel (== more bloat). This solution is</span>", 
"<span class=\"comment\"> * more scalable, adding new Wireless Extensions doesn't add new code.</span>", 
"<span class=\"comment\"> * 2) You can use the same handler in different slots of the array. For</span>", 
"<span class=\"comment\"> * hardware, it may be more efficient or logical to handle multiple</span>", 
"<span class=\"comment\"> * Wireless Extensions with a single function, and the API allow you to</span>", 
"<span class=\"comment\"> * do that. (An example would be a single record on the card to control</span>", 
"<span class=\"comment\"> * both bitrate and frequency, the handler would read the old record,</span>", 
"<span class=\"comment\"> * modify it according to info-&gt;cmd and rewrite it).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Functions prototype uses union iwreq_data</span>", 
"<span class=\"comment\"> * -----------------------------------------</span>", 
"<span class=\"comment\"> * Some would have prefered functions defined this way :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>static int mydriver_ioctl_setrate(struct net_device *dev, </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  long rate, int auto)</span>", 
"<span class=\"comment\"> * 1) The kernel code doesn't \"validate\" the content of iwreq_data, and</span>", 
"<span class=\"comment\"> * can't do it (different hardware may have different notion of what a</span>", 
"<span class=\"comment\"> * valid frequency is), so we don't pretend that we do it.</span>", 
"<span class=\"comment\"> * 2) The above form is not extendable. If I want to add a flag (for</span>", 
"<span class=\"comment\"> * example to distinguish setting max rate and basic rate), I would</span>", 
"<span class=\"comment\"> * break the prototype. Using iwreq_data is more flexible.</span>", 
"<span class=\"comment\"> * 3) Also, the above form is not generic (see above).</span>", 
"<span class=\"comment\"> * 4) I don't expect driver developper using the wrong field of the</span>", 
"<span class=\"comment\"> * union (Doh !), so static typechecking doesn't add much value.</span>", 
"<span class=\"comment\"> * 5) Lastly, you can skip the union by doing :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>static int mydriver_ioctl_setrate(struct net_device *dev,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct iw_request_info *info,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct iw_param *rrq,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char *extra)</span>", 
"<span class=\"comment\"> * And then adding the handler in the array like this :</span>", 
"<span class=\"comment\"> *        (iw_handler) mydriver_ioctl_setrate,             // SIOCSIWRATE</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Using functions and not a registry</span>", 
"<span class=\"comment\"> * ----------------------------------</span>", 
"<span class=\"comment\"> * Another implementation option would have been for every instance to</span>", 
"<span class=\"comment\"> * define a registry (a struct containing all the Wireless Extensions)</span>", 
"<span class=\"comment\"> * and only have a function to commit the registry to the hardware.</span>", 
"<span class=\"comment\"> * 1) This approach can be emulated by the current code, but not</span>", 
"<span class=\"comment\"> * vice versa.</span>", 
"<span class=\"comment\"> * 2) Some drivers don't keep any configuration in the driver, for them</span>", 
"<span class=\"comment\"> * adding such a registry would be a significant bloat.</span>", 
"<span class=\"comment\"> * 3) The code to translate from Wireless Extension to native format is</span>", 
"<span class=\"comment\"> * needed anyway, so it would not reduce significantely the amount of code.</span>", 
"<span class=\"comment\"> * 4) The current approach only selectively translate Wireless Extensions</span>", 
"<span class=\"comment\"> * to native format and only selectively set, whereas the registry approach</span>", 
"<span class=\"comment\"> * would require to translate all WE and set all parameters for any single</span>", 
"<span class=\"comment\"> * change.</span>", 
"<span class=\"comment\"> * 5) For many Wireless Extensions, the GET operation return the current</span>", 
"<span class=\"comment\"> * dynamic value, not the value that was set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This header is &lt;net/iw_handler.h&gt;</span>", 
"<span class=\"comment\"> * ---------------------------------</span>", 
"<span class=\"comment\"> * 1) This header is kernel space only and should not be exported to</span>", 
"<span class=\"comment\"> * user space. Headers in \"include/linux/\" are exported, headers in</span>", 
"<span class=\"comment\"> * \"include/net/\" are not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mixed 32/64 bit issues</span>", 
"<span class=\"comment\"> * ----------------------</span>", 
"<span class=\"comment\"> * The Wireless Extensions are designed to be 64 bit clean, by using only</span>", 
"<span class=\"comment\"> * datatypes with explicit storage size.</span>", 
"<span class=\"comment\"> * There are some issues related to kernel and user space using different</span>", 
"<span class=\"comment\"> * memory model, and in particular 64bit kernel with 32bit user space.</span>", 
"<span class=\"comment\"> * The problem is related to struct iw_point, that contains a pointer</span>", 
"<span class=\"comment\"> * that *may* need to be translated.</span>", 
"<span class=\"comment\"> * This is quite messy. The new API doesn't solve this problem (it can't),</span>", 
"<span class=\"comment\"> * but is a step in the right direction :</span>", 
"<span class=\"comment\"> * 1) Meta data about each ioctl is easily available, so we know what type</span>", 
"<span class=\"comment\"> * of translation is needed.</span>", 
"<span class=\"comment\"> * 2) The move of data between kernel and user space is only done in a single</span>", 
"<span class=\"comment\"> * place in the kernel, so adding specific hooks in there is possible.</span>", 
"<span class=\"comment\"> * 3) In the long term, it allows to move away from using ioctl as the</span>", 
"<span class=\"comment\"> * user space API.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So many comments and so few code</span>", 
"<span class=\"comment\"> * --------------------------------</span>", 
"<span class=\"comment\"> * That's a feature. Comments won't bloat the resulting kernel binary.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/***************************** INCLUDES *****************************/</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wireless\">wireless</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* IOCTL user space API */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_ether\">if_ether</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/***************************** VERSION *****************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This constant is used to know which version of the driver API is</span>", 
"<span class=\"comment\"> * available. Hopefully, this will be pretty stable and no changes</span>", 
"<span class=\"comment\"> * will be needed...</span>", 
"<span class=\"comment\"> * I just plan to increment with each new version.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_HANDLER_VERSION\">IW_HANDLER_VERSION</a><span class=\"ts\"/>8", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Changes :</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * V2 to V3</span>", 
"<span class=\"comment\"> * --------</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Move event definition in &lt;linux/wireless.h&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Add Wireless Event support :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>o wireless_send_event() prototype</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>o iwe_stream_add_event/point() inline functions</span>", 
"<span class=\"comment\"> * V3 to V4</span>", 
"<span class=\"comment\"> * --------</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Reshuffle IW_HEADER_TYPE_XXX to map IW_PRIV_TYPE_XXX changes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * V4 to V5</span>", 
"<span class=\"comment\"> * --------</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Add new spy support : struct iw_spy_data &amp; prototypes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * V5 to V6</span>", 
"<span class=\"comment\"> * --------</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Change the way we get to spy_data method for added safety</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Remove spy #ifdef, they are always on -&gt; cleaner code</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Add IW_DESCR_FLAG_NOMAX flag for very large requests</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Start migrating get_wireless_stats to struct iw_handler_def</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * V6 to V7</span>", 
"<span class=\"comment\"> * --------</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Add struct ieee80211_device pointer in struct iw_public_data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Remove (struct iw_point *)-&gt;pointer from events and streams</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Remove spy_offset from struct iw_handler_def</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Add \"check\" version of event macros for ieee802.11 stack</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * V7 to V8</span>", 
"<span class=\"comment\"> * ----------</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Prevent leaking of kernel space in stream on 64 bits.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**************************** CONSTANTS ****************************/</span>", 
"", 
"<span class=\"comment\">/* Enhanced spy support available */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_WIRELESS_SPY\">IW_WIRELESS_SPY</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_WIRELESS_THRSPY\">IW_WIRELESS_THRSPY</a>", 
"", 
"<span class=\"comment\">/* Special error message for the driver to indicate that we</span>", 
"<span class=\"comment\"> * should do a commit after return from the iw_handler */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EIWCOMMIT\">EIWCOMMIT</a><span class=\"ts\"/><a class=\"id\" href=\"#EINPROGRESS\">EINPROGRESS</a>", 
"", 
"<span class=\"comment\">/* Flags available in struct iw_request_info */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_REQUEST_FLAG_COMPAT\">IW_REQUEST_FLAG_COMPAT</a><span class=\"ts\"/>0x0001<span class=\"ts\"/><span class=\"comment\">/* Compat ioctl call */</span>", 
"", 
"<span class=\"comment\">/* Type of headers we know about (basically union iwreq_data) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_HEADER_TYPE_NULL\">IW_HEADER_TYPE_NULL</a><span class=\"ts\"/>0<span class=\"ts\"/><span class=\"comment\">/* Not available */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_HEADER_TYPE_CHAR\">IW_HEADER_TYPE_CHAR</a><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"comment\">/* char [IFNAMSIZ] */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_HEADER_TYPE_UINT\">IW_HEADER_TYPE_UINT</a><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"comment\">/* __u32 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_HEADER_TYPE_FREQ\">IW_HEADER_TYPE_FREQ</a><span class=\"ts\"/>5<span class=\"ts\"/><span class=\"comment\">/* struct iw_freq */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_HEADER_TYPE_ADDR\">IW_HEADER_TYPE_ADDR</a><span class=\"ts\"/>6<span class=\"ts\"/><span class=\"comment\">/* struct sockaddr */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_HEADER_TYPE_POINT\">IW_HEADER_TYPE_POINT</a><span class=\"ts\"/>8<span class=\"ts\"/><span class=\"comment\">/* struct iw_point */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_HEADER_TYPE_PARAM\">IW_HEADER_TYPE_PARAM</a><span class=\"ts\"/>9<span class=\"ts\"/><span class=\"comment\">/* struct iw_param */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_HEADER_TYPE_QUAL\">IW_HEADER_TYPE_QUAL</a><span class=\"ts\"/>10<span class=\"ts\"/><span class=\"comment\">/* struct iw_quality */</span>", 
"", 
"<span class=\"comment\">/* Handling flags */</span>", 
"<span class=\"comment\">/* Most are not implemented. I just use them as a reminder of some</span>", 
"<span class=\"comment\"> * cool features we might need one day ;-) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_DESCR_FLAG_NONE\">IW_DESCR_FLAG_NONE</a><span class=\"ts\"/>0x0000<span class=\"ts\"/><span class=\"comment\">/* Obvious */</span>", 
"<span class=\"comment\">/* Wrapper level flags */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_DESCR_FLAG_DUMP\">IW_DESCR_FLAG_DUMP</a><span class=\"ts\"/>0x0001<span class=\"ts\"/><span class=\"comment\">/* Not part of the dump command */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_DESCR_FLAG_EVENT\">IW_DESCR_FLAG_EVENT</a><span class=\"ts\"/>0x0002<span class=\"ts\"/><span class=\"comment\">/* Generate an event on SET */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_DESCR_FLAG_RESTRICT\">IW_DESCR_FLAG_RESTRICT</a><span class=\"ts\"/>0x0004<span class=\"ts\"/><span class=\"comment\">/* GET : request is ROOT only */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SET : Omit payload from generated iwevent */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_DESCR_FLAG_NOMAX\">IW_DESCR_FLAG_NOMAX</a><span class=\"ts\"/>0x0008<span class=\"ts\"/><span class=\"comment\">/* GET : no limit on request size */</span>", 
"<span class=\"comment\">/* Driver level flags */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IW_DESCR_FLAG_WAIT\">IW_DESCR_FLAG_WAIT</a><span class=\"ts\"/>0x0100<span class=\"ts\"/><span class=\"comment\">/* Wait for driver event */</span>", 
"", 
"<span class=\"comment\">/****************************** TYPES ******************************/</span>", 
"", 
"<span class=\"comment\">/* ----------------------- WIRELESS HANDLER ----------------------- */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A wireless handler is just a standard function, that looks like the</span>", 
"<span class=\"comment\"> * ioctl handler.</span>", 
"<span class=\"comment\"> * We also define there how a handler list look like... As the Wireless</span>", 
"<span class=\"comment\"> * Extension space is quite dense, we use a simple array, which is faster</span>", 
"<span class=\"comment\"> * (that's the perfect hash table ;-).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Meta data about the request passed to the iw_handler.</span>", 
"<span class=\"comment\"> * Most handlers can safely ignore what's in there.</span>", 
"<span class=\"comment\"> * The 'cmd' field might come handy if you want to use the same handler</span>", 
"<span class=\"comment\"> * for multiple command...</span>", 
"<span class=\"comment\"> * This struct is also my long term insurance. I can add new fields here</span>", 
"<span class=\"comment\"> * without breaking the prototype of iw_handler...</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Wireless Extension command */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* More to come ;-) */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is how a function handling a Wireless Extension should look</span>", 
"<span class=\"comment\"> * like (both get and set, standard and private).</span>", 
"<span class=\"comment\"> */</span>", 
"typedef int (*<a class=\"id\" href=\"#iw_handler\">iw_handler</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#iwreq_data\">iwreq_data</a> *<a class=\"id\" href=\"#wrqu\">wrqu</a>, char *<a class=\"id\" href=\"#extra\">extra</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This define all the handler that the driver export.</span>", 
"<span class=\"comment\"> * As you need only one per driver type, please use a static const</span>", 
"<span class=\"comment\"> * shared by all driver instances... Same for the members...</span>", 
"<span class=\"comment\"> * This will be linked from net_device in &lt;linux/netdevice.h&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#iw_handler_def\">iw_handler_def</a> {", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Array of handlers for standard ioctls</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We will call dev-&gt;wireless_handlers-&gt;standard[ioctl - SIOCIWFIRST]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#iw_handler\">iw_handler</a> *<span class=\"ts\"/><a class=\"id\" href=\"#standard\">standard</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Number of handlers defined (more precisely, index of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * last defined handler + 1) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_standard\">num_standard</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_WEXT_PRIV\">CONFIG_WEXT_PRIV</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_private\">num_private</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Number of private arg description */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_private_args\">num_private_args</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Array of handlers for private ioctls</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Will call dev-&gt;wireless_handlers-&gt;private[ioctl - SIOCIWFIRSTPRIV]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#iw_handler\">iw_handler</a> *<span class=\"ts\"/><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Arguments of private handler. This one is just a list, so you</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can put it in any order you want and should not leave holes...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We will automatically export that to user space... */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#iw_priv_args\">iw_priv_args</a> *<span class=\"ts\"/><a class=\"id\" href=\"#private_args\">private_args</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* New location of get_wireless_stats, to de-bloat struct net_device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The old pointer in struct net_device will be gradually phased</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * out, and drivers are encouraged to use this one... */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iw_statistics\">iw_statistics</a>*<span class=\"ts\"/>(*<a class=\"id\" href=\"#get_wireless_stats\">get_wireless_stats</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"};", 
"", 
"<span class=\"comment\">/* ---------------------- IOCTL DESCRIPTION ---------------------- */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * One of the main goal of the new interface is to deal entirely with</span>", 
"<span class=\"comment\"> * user space/kernel space memory move.</span>", 
"<span class=\"comment\"> * For that, we need to know :</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o if iwreq is a pointer or contain the full data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>o what is the size of the data to copy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For private IOCTLs, we use the same rules as used by iwpriv and</span>", 
"<span class=\"comment\"> * defined in struct iw_priv_args.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For standard IOCTLs, things are quite different and we need to</span>", 
];
xr_frag_insert('l/ef/3c0bd1c1eec970e5fafbdc3e98086e84939f2c.xr', __xr_tmp);
