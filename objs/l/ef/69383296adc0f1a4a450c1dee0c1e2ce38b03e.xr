var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Infrastructure for profiling code inserted by 'gcc -pg'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2007-2008 Steven Rostedt &lt;srostedt@redhat.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2004-2008 Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Originally ported from the -rt patch by:</span>", 
"<span class=\"comment\"> *   Copyright (C) 2007 Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on code in the latency_tracer, that is:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004-2006 Ingo Molnar</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004 William Lee Irwin III</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stop_machine\">stop_machine</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#clocksource\">clocksource</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#setup\">setup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace_output.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace_stat.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FTRACE_WARN_ON\">FTRACE_WARN_ON</a>(<a class=\"id\" href=\"#cond\">cond</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#cond\">cond</a>))<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_kill\">ftrace_kill</a>();<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FTRACE_WARN_ON_ONCE\">FTRACE_WARN_ON_ONCE</a>(<a class=\"id\" href=\"#cond\">cond</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#cond\">cond</a>))<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_kill\">ftrace_kill</a>();<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"<span class=\"comment\">/* hash bits for specific function selection */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FTRACE_HASH_BITS\">FTRACE_HASH_BITS</a> 7", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FTRACE_FUNC_HASHSIZE\">FTRACE_FUNC_HASHSIZE</a> (1 << <a class=\"id\" href=\"#FTRACE_HASH_BITS\">FTRACE_HASH_BITS</a>)", 
"", 
"<span class=\"comment\">/* ftrace_enabled is a method to turn ftrace on or off */</span>", 
"int <a class=\"id\" href=\"#ftrace_enabled\">ftrace_enabled</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static int <a class=\"id\" href=\"#last_ftrace_enabled\">last_ftrace_enabled</a>;", 
"", 
"<span class=\"comment\">/* Quick disabling of function tracer. */</span>", 
"int <a class=\"id\" href=\"#function_trace_stop\">function_trace_stop</a>;", 
"", 
"<span class=\"comment\">/* List for set_ftrace_pid's pids. */</span>", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#ftrace_pids\">ftrace_pids</a>);", 
"struct <a class=\"id\" href=\"#ftrace_pid\">ftrace_pid</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ftrace_disabled is set when an anomaly is discovered.</span>", 
"<span class=\"comment\"> * ftrace_disabled is much stronger than ftrace_enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ftrace_disabled\">ftrace_disabled</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#ftrace_lock\">ftrace_lock</a>);", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> <a class=\"id\" href=\"#ftrace_list_end\">ftrace_list_end</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> =", 
"{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> *<a class=\"id\" href=\"#ftrace_list\">ftrace_list</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = &amp;<a class=\"id\" href=\"#ftrace_list_end\">ftrace_list_end</a>;", 
"<a class=\"id\" href=\"#ftrace_func_t\">ftrace_func_t</a> <a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>;", 
"<a class=\"id\" href=\"#ftrace_func_t\">ftrace_func_t</a> <a class=\"id\" href=\"#__ftrace_trace_function\">__ftrace_trace_function</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>;", 
"<a class=\"id\" href=\"#ftrace_func_t\">ftrace_func_t</a> <a class=\"id\" href=\"#ftrace_pid_function\">ftrace_pid_function</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Traverse the ftrace_list, invoking all entries.  The reason that we</span>", 
"<span class=\"comment\"> * can use rcu_dereference_raw() is that elements removed from this list</span>", 
"<span class=\"comment\"> * are simply leaked, so there is no need to interact with a grace-period</span>", 
"<span class=\"comment\"> * mechanism.  The rcu_dereference_raw() calls are needed to handle</span>", 
"<span class=\"comment\"> * concurrent insertions into the ftrace_list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Silly Alpha and silly pointer-speculation compiler optimizations!</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ftrace_list_func\">ftrace_list_func</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> *<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#ftrace_list\">ftrace_list</a>); <span class=\"comment\">/*see above*/</span>", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#op\">op</a> != &amp;<a class=\"id\" href=\"#ftrace_list_end\">ftrace_list_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#parent_ip\">parent_ip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#next\">next</a>); <span class=\"comment\">/*see above*/</span>", 
"<span class=\"ts\"/>};", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_pid_func\">ftrace_pid_func</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_tsk_trace_trace\">test_tsk_trace_trace</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_pid_function\">ftrace_pid_function</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#parent_ip\">parent_ip</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_ftrace_pid_function\">set_ftrace_pid_function</a>(<a class=\"id\" href=\"#ftrace_func_t\">ftrace_func_t</a> <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* do not set ftrace_pid_function to itself! */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#func\">func</a> != <a class=\"id\" href=\"#ftrace_pid_func\">ftrace_pid_func</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_pid_function\">ftrace_pid_function</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clear_ftrace_function - reset the ftrace function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This NULLs the ftrace function and in essence stops</span>", 
"<span class=\"comment\"> * tracing.  There may be lag</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#clear_ftrace_function\">clear_ftrace_function</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a> = <a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ftrace_trace_function\">__ftrace_trace_function</a> = <a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_pid_function\">ftrace_pid_function</a> = <a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_HAVE_FUNCTION_TRACE_MCOUNT_TEST\">CONFIG_HAVE_FUNCTION_TRACE_MCOUNT_TEST</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For those archs that do not test ftrace_trace_stop in their</span>", 
"<span class=\"comment\"> * mcount call site, we need to do it from C.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ftrace_test_stop_func\">ftrace_test_stop_func</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#function_trace_stop\">function_trace_stop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ftrace_trace_function\">__ftrace_trace_function</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#parent_ip\">parent_ip</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__register_ftrace_function\">__register_ftrace_function</a>(struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ftrace_list\">ftrace_list</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are entering ops into the ftrace_list but another</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU might be walking that list. We need to make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the ops-&gt;next pointer is valid before another CPU sees</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the ops pointer included into the ftrace_list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#ftrace_list\">ftrace_list</a>, <a class=\"id\" href=\"#ops\">ops</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_enabled\">ftrace_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_func_t\">ftrace_func_t</a> <a class=\"id\" href=\"#func\">func</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#next\">next</a> == &amp;<a class=\"id\" href=\"#ftrace_list_end\">ftrace_list_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#ftrace_list_func\">ftrace_list_func</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ftrace_pids\">ftrace_pids</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_ftrace_pid_function\">set_ftrace_pid_function</a>(<a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#ftrace_pid_func\">ftrace_pid_func</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For one func, simply call it directly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For more than one func, call the chain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_FUNCTION_TRACE_MCOUNT_TEST\">CONFIG_HAVE_FUNCTION_TRACE_MCOUNT_TEST</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ftrace_trace_function\">__ftrace_trace_function</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a> = <a class=\"id\" href=\"#ftrace_test_stop_func\">ftrace_test_stop_func</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__unregister_ftrace_function\">__unregister_ftrace_function</a>(struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> **<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are removing the last function, then simply point</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the ftrace_stub.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_list\">ftrace_list</a> == <a class=\"id\" href=\"#ops\">ops</a> && <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#next\">next</a> == &amp;<a class=\"id\" href=\"#ftrace_list_end\">ftrace_list_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a> = <a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_list\">ftrace_list</a> = &amp;<a class=\"id\" href=\"#ftrace_list_end\">ftrace_list_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#ftrace_list\">ftrace_list</a>; *<a class=\"id\" href=\"#p\">p</a> != &amp;<a class=\"id\" href=\"#ftrace_list_end\">ftrace_list_end</a>; <a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#ops\">ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#ops\">ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = (*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_enabled\">ftrace_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we only have one func left, then call that directly */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_list\">ftrace_list</a>-><a class=\"id\" href=\"#next\">next</a> == &amp;<a class=\"id\" href=\"#ftrace_list_end\">ftrace_list_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_func_t\">ftrace_func_t</a> <a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#ftrace_list\">ftrace_list</a>-><a class=\"id\" href=\"#func\">func</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ftrace_pids\">ftrace_pids</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_ftrace_pid_function\">set_ftrace_pid_function</a>(<a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#ftrace_pid_func\">ftrace_pid_func</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_FUNCTION_TRACE_MCOUNT_TEST\">CONFIG_HAVE_FUNCTION_TRACE_MCOUNT_TEST</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ftrace_trace_function\">__ftrace_trace_function</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_update_pid_func\">ftrace_update_pid_func</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_func_t\">ftrace_func_t</a> <a class=\"id\" href=\"#func\">func</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a> == <a class=\"id\" href=\"#ftrace_stub\">ftrace_stub</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_FUNCTION_TRACE_MCOUNT_TEST\">CONFIG_HAVE_FUNCTION_TRACE_MCOUNT_TEST</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#__ftrace_trace_function\">__ftrace_trace_function</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ftrace_pids\">ftrace_pids</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_ftrace_pid_function\">set_ftrace_pid_function</a>(<a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#ftrace_pid_func\">ftrace_pid_func</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#func\">func</a> == <a class=\"id\" href=\"#ftrace_pid_func\">ftrace_pid_func</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#ftrace_pid_function\">ftrace_pid_function</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_FUNCTION_TRACE_MCOUNT_TEST\">CONFIG_HAVE_FUNCTION_TRACE_MCOUNT_TEST</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_trace_function\">ftrace_trace_function</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ftrace_trace_function\">__ftrace_trace_function</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_PROFILER\">CONFIG_FUNCTION_PROFILER</a>", 
"struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#counter\">counter</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"<span class=\"ts\"/>unsigned long long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/>unsigned long long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time_squared\">time_squared</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ftrace_profile_page\">ftrace_profile_page</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile_page\">ftrace_profile_page</a><span class=\"ts\"/>*<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#records\">records</a>[];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disabled\">disabled</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile_page\">ftrace_profile_page</a><span class=\"ts\"/>*<a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile_page\">ftrace_profile_page</a><span class=\"ts\"/>*<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tracer_stat\">tracer_stat</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PROFILE_RECORDS_SIZE\">PROFILE_RECORDS_SIZE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#ftrace_profile_page\">ftrace_profile_page</a>, <a class=\"id\" href=\"#records\">records</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PROFILES_PER_PAGE\">PROFILES_PER_PAGE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#PROFILE_RECORDS_SIZE\">PROFILE_RECORDS_SIZE</a> / sizeof(struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a>))", 
"", 
"static int <a class=\"id\" href=\"#ftrace_profile_bits\">ftrace_profile_bits</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static int <a class=\"id\" href=\"#ftrace_profile_enabled\">ftrace_profile_enabled</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/* ftrace_profile_lock - synchronize the enable and disable of the profiler */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#ftrace_profile_lock\">ftrace_profile_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a>, <a class=\"id\" href=\"#ftrace_profile_stats\">ftrace_profile_stats</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FTRACE_PROFILE_HASH_SIZE\">FTRACE_PROFILE_HASH_SIZE</a> 1024 <span class=\"comment\">/* must be power of 2 */</span>", 
"", 
"static void *", 
"<a class=\"id\" href=\"#function_stat_next\">function_stat_next</a>(void *<a class=\"id\" href=\"#v\">v</a>, int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *<a class=\"id\" href=\"#rec\">rec</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile_page\">ftrace_profile_page</a> *<a class=\"id\" href=\"#pg\">pg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a> = (struct <a class=\"id\" href=\"#ftrace_profile_page\">ftrace_profile_page</a> *)((unsigned long)<a class=\"id\" href=\"#rec\">rec</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>++;", 
"", 
"<span class=\"ts\"/>if ((void *)<a class=\"id\" href=\"#rec\">rec</a> >= (void *)&amp;<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#records\">records</a>[<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#index\">index</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pg\">pg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a> = &amp;<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#records\">records</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rec\">rec</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#function_stat_start\">function_stat_start</a>(struct <a class=\"id\" href=\"#tracer_stat\">tracer_stat</a> *<a class=\"id\" href=\"#trace\">trace</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a> *<a class=\"id\" href=\"#stat\">stat</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#trace\">trace</a>, struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a>, <a class=\"id\" href=\"#stat\">stat</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#stat\">stat</a> || !<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#function_stat_next\">function_stat_next</a>(&amp;<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#start\">start</a>-><a class=\"id\" href=\"#records\">records</a>[0], 0);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"<span class=\"comment\">/* function graph compares on total time */</span>", 
"static int <a class=\"id\" href=\"#function_stat_cmp\">function_stat_cmp</a>(void *<a class=\"id\" href=\"#p1\">p1</a>, void *<a class=\"id\" href=\"#p2\">p2</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *<a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#p1\">p1</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *<a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#p2\">p2</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#time\">time</a> &lt; <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#time\">time</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#time\">time</a> &gt; <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#time\">time</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"<span class=\"comment\">/* not function graph compares against hits */</span>", 
"static int <a class=\"id\" href=\"#function_stat_cmp\">function_stat_cmp</a>(void *<a class=\"id\" href=\"#p1\">p1</a>, void *<a class=\"id\" href=\"#p2\">p2</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *<a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#p1\">p1</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *<a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#p2\">p2</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#counter\">counter</a> &lt; <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#counter\">counter</a> &gt; <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#function_stat_headers\">function_stat_headers</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"  Function                               \"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"Hit    Time            Avg             s^2\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"  --------                               \"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"---    ----            ---             ---\\n\");", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"  Function                               Hit\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"  --------                               ---\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#function_stat_show\">function_stat_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *<a class=\"id\" href=\"#rec\">rec</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#str\">str</a>[<a class=\"id\" href=\"#KSYM_SYMBOL_LEN\">KSYM_SYMBOL_LEN</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#avg\">avg</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#stddev\">stddev</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_profile_lock\">ftrace_profile_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we raced with function_profile_reset() */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#counter\">counter</a> == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kallsyms_lookup\">kallsyms_lookup</a>(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"  %-30.30s  %10lu\", <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#counter\">counter</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"    \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avg\">avg</a> = <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#avg\">avg</a>, <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#counter\">counter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Sample standard deviation (s^2) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#counter\">counter</a> <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stddev\">stddev</a> = 0;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stddev\">stddev</a> = <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#time_squared\">time_squared</a> - <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#counter\">counter</a> * <a class=\"id\" href=\"#avg\">avg</a> * <a class=\"id\" href=\"#avg\">avg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Divide only 1000 for ns^2 -&gt; us^2 conversion.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * trace_print_graph_duration will divide 1000 again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#stddev\">stddev</a>, (<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#counter\">counter</a> - 1) * 1000);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_seq_init\">trace_seq_init</a>(&amp;<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_print_graph_duration\">trace_print_graph_duration</a>(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#time\">time</a>, &amp;<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_seq_puts\">trace_seq_puts</a>(&amp;<a class=\"id\" href=\"#s\">s</a>, \"    \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_print_graph_duration\">trace_print_graph_duration</a>(<a class=\"id\" href=\"#avg\">avg</a>, &amp;<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_seq_puts\">trace_seq_puts</a>(&amp;<a class=\"id\" href=\"#s\">s</a>, \"    \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_print_graph_duration\">trace_print_graph_duration</a>(<a class=\"id\" href=\"#stddev\">stddev</a>, &amp;<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_print_seq\">trace_print_seq</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#s\">s</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, '\\n');", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_profile_lock\">ftrace_profile_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_profile_reset\">ftrace_profile_reset</a>(struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a> *<a class=\"id\" href=\"#stat\">stat</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile_page\">ftrace_profile_page</a> *<a class=\"id\" href=\"#pg\">pg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pg\">pg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#records\">records</a>, 0, <a class=\"id\" href=\"#PROFILE_RECORDS_SIZE\">PROFILE_RECORDS_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#hash\">hash</a>, 0,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#FTRACE_PROFILE_HASH_SIZE\">FTRACE_PROFILE_HASH_SIZE</a> * sizeof(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a>));", 
"}", 
"", 
"int <a class=\"id\" href=\"#ftrace_profile_pages_init\">ftrace_profile_pages_init</a>(struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a> *<a class=\"id\" href=\"#stat\">stat</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile_page\">ftrace_profile_page</a> *<a class=\"id\" href=\"#pg\">pg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#functions\">functions</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we already allocated, do nothing */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a> = (void *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DYNAMIC_FTRACE\">CONFIG_DYNAMIC_FTRACE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#functions\">functions</a> = <a class=\"id\" href=\"#ftrace_update_tot_cnt\">ftrace_update_tot_cnt</a>;", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We do not know the number of functions that exist because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dynamic tracing is what counts them. With past experience</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we have around 20K functions. That should be more than enough.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is highly unlikely we will execute every function in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the kernel.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#functions\">functions</a> = 20000;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#functions\">functions</a>, <a class=\"id\" href=\"#PROFILES_PER_PAGE\">PROFILES_PER_PAGE</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pages\">pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#next\">next</a> = (void *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pg\">pg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a> = (unsigned long)<a class=\"id\" href=\"#pg\">pg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ftrace_profile_init_cpu\">ftrace_profile_init_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a> *<a class=\"id\" href=\"#stat\">stat</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#ftrace_profile_stats\">ftrace_profile_stats</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#hash\">hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the profile is already created, simply reset it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_profile_reset\">ftrace_profile_reset</a>(<a class=\"id\" href=\"#stat\">stat</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are profiling all functions, but usually only a few thousand</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * functions are hit. We'll make a hash of 1024 items.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#FTRACE_PROFILE_HASH_SIZE\">FTRACE_PROFILE_HASH_SIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a>) * <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#hash\">hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ftrace_profile_bits\">ftrace_profile_bits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#size\">size</a> >>= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_profile_bits\">ftrace_profile_bits</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Preallocate the function profiling pages */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_profile_pages_init\">ftrace_profile_pages_init</a>(<a class=\"id\" href=\"#stat\">stat</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ftrace_profile_init\">ftrace_profile_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_profile_init_cpu\">ftrace_profile_init_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* interrupts must be disabled */</span>", 
"static struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *", 
"<a class=\"id\" href=\"#ftrace_find_profiled_func\">ftrace_find_profiled_func</a>(struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a> *<a class=\"id\" href=\"#stat\">stat</a>, unsigned long <a class=\"id\" href=\"#ip\">ip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *<a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hhd\">hhd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#ftrace_profile_bits\">ftrace_profile_bits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hhd\">hhd</a> = &amp;<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#key\">key</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hlist_empty\">hlist_empty</a>(<a class=\"id\" href=\"#hhd\">hhd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#rec\">rec</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#hhd\">hhd</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a> == <a class=\"id\" href=\"#ip\">ip</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_add_profile\">ftrace_add_profile</a>(struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a> *<a class=\"id\" href=\"#stat\">stat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *<a class=\"id\" href=\"#rec\">rec</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#ftrace_profile_bits\">ftrace_profile_bits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#key\">key</a>]);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The memory is already allocated, this simply finds a new record to use.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *", 
"<a class=\"id\" href=\"#ftrace_profile_alloc\">ftrace_profile_alloc</a>(struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a> *<a class=\"id\" href=\"#stat\">stat</a>, unsigned long <a class=\"id\" href=\"#ip\">ip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *<a class=\"id\" href=\"#rec\">rec</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* prevent recursion (from NMIs) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#disabled\">disabled</a>) != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to find the function again since an NMI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * could have added it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a> = <a class=\"id\" href=\"#ftrace_find_profiled_func\">ftrace_find_profiled_func</a>(<a class=\"id\" href=\"#stat\">stat</a>, <a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rec\">rec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a>-><a class=\"id\" href=\"#index\">index</a> == <a class=\"id\" href=\"#PROFILES_PER_PAGE\">PROFILES_PER_PAGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a> = &amp;<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a>-><a class=\"id\" href=\"#records\">records</a>[<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#pages\">pages</a>-><a class=\"id\" href=\"#index\">index</a>++];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_add_profile\">ftrace_add_profile</a>(<a class=\"id\" href=\"#stat\">stat</a>, <a class=\"id\" href=\"#rec\">rec</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rec\">rec</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#function_profile_call\">function_profile_call</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a> *<a class=\"id\" href=\"#stat\">stat</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *<a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ftrace_profile_enabled\">ftrace_profile_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#ftrace_profile_stats\">ftrace_profile_stats</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#hash\">hash</a> || !<a class=\"id\" href=\"#ftrace_profile_enabled\">ftrace_profile_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a> = <a class=\"id\" href=\"#ftrace_find_profiled_func\">ftrace_find_profiled_func</a>(<a class=\"id\" href=\"#stat\">stat</a>, <a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rec\">rec</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a> = <a class=\"id\" href=\"#ftrace_profile_alloc\">ftrace_profile_alloc</a>(<a class=\"id\" href=\"#stat\">stat</a>, <a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rec\">rec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#counter\">counter</a>++;", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_GRAPH_TRACER\">CONFIG_FUNCTION_GRAPH_TRACER</a>", 
"static int <a class=\"id\" href=\"#profile_graph_entry\">profile_graph_entry</a>(struct <a class=\"id\" href=\"#ftrace_graph_ent\">ftrace_graph_ent</a> *<a class=\"id\" href=\"#trace\">trace</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#function_profile_call\">function_profile_call</a>(<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#func\">func</a>, 0);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#profile_graph_return\">profile_graph_return</a>(struct <a class=\"id\" href=\"#ftrace_graph_ret\">ftrace_graph_ret</a> *<a class=\"id\" href=\"#trace\">trace</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a> *<a class=\"id\" href=\"#stat\">stat</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#calltime\">calltime</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile\">ftrace_profile</a> *<a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#ftrace_profile_stats\">ftrace_profile_stats</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#hash\">hash</a> || !<a class=\"id\" href=\"#ftrace_profile_enabled\">ftrace_profile_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the calltime was zero'd ignore it */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#calltime\">calltime</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calltime\">calltime</a> = <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#rettime\">rettime</a> - <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#calltime\">calltime</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#trace_flags\">trace_flags</a> &amp; <a class=\"id\" href=\"#TRACE_ITER_GRAPH_TIME\">TRACE_ITER_GRAPH_TIME</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#depth\">depth</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Append this call time to the parent time to subtract */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a> - 1].<a class=\"id\" href=\"#subtime\">subtime</a> += <a class=\"id\" href=\"#calltime\">calltime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#subtime\">subtime</a> &lt; <a class=\"id\" href=\"#calltime\">calltime</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#calltime\">calltime</a> -= <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#ret_stack\">ret_stack</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#subtime\">subtime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#calltime\">calltime</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a> = <a class=\"id\" href=\"#ftrace_find_profiled_func\">ftrace_find_profiled_func</a>(<a class=\"id\" href=\"#stat\">stat</a>, <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rec\">rec</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#time\">time</a> += <a class=\"id\" href=\"#calltime\">calltime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#time_squared\">time_squared</a> += <a class=\"id\" href=\"#calltime\">calltime</a> * <a class=\"id\" href=\"#calltime\">calltime</a>;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#register_ftrace_profiler\">register_ftrace_profiler</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_ftrace_graph\">register_ftrace_graph</a>(&amp;<a class=\"id\" href=\"#profile_graph_return\">profile_graph_return</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#profile_graph_entry\">profile_graph_entry</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#unregister_ftrace_profiler\">unregister_ftrace_profiler</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_ftrace_graph\">unregister_ftrace_graph</a>();", 
"}", 
"#else", 
"static struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> <a class=\"id\" href=\"#ftrace_profile_ops\">ftrace_profile_ops</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> =", 
"{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#function_profile_call\">function_profile_call</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#register_ftrace_profiler\">register_ftrace_profiler</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_ftrace_function\">register_ftrace_function</a>(&amp;<a class=\"id\" href=\"#ftrace_profile_ops\">ftrace_profile_ops</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#unregister_ftrace_profiler\">unregister_ftrace_profiler</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_ftrace_function\">unregister_ftrace_function</a>(&amp;<a class=\"id\" href=\"#ftrace_profile_ops\">ftrace_profile_ops</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FUNCTION_GRAPH_TRACER */</span>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ftrace_profile_write\">ftrace_profile_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[64];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* big enough to hold a number */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cnt\">cnt</a> >= sizeof(<a class=\"id\" href=\"#buf\">buf</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#cnt\">cnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#cnt\">cnt</a>] = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, 10, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = !!<a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_profile_lock\">ftrace_profile_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_profile_enabled\">ftrace_profile_enabled</a> ^ <a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ftrace_profile_init\">ftrace_profile_init</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_ftrace_profiler\">register_ftrace_profiler</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_profile_enabled\">ftrace_profile_enabled</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_profile_enabled\">ftrace_profile_enabled</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * unregister_ftrace_profiler calls stop_machine</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * so this acts like an synchronize_sched.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_ftrace_profiler\">unregister_ftrace_profiler</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_profile_lock\">ftrace_profile_lock</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ftrace_profile_read\">ftrace_profile_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[64];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* big enough to hold a number */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%u\\n\", <a class=\"id\" href=\"#ftrace_profile_enabled\">ftrace_profile_enabled</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#r\">r</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#ftrace_profile_fops\">ftrace_profile_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#tracing_open_generic\">tracing_open_generic</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_profile_read\">ftrace_profile_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_profile_write\">ftrace_profile_write</a>,", 
"};", 
"", 
"<span class=\"comment\">/* used to initialize the real stat files */</span>", 
"static struct <a class=\"id\" href=\"#tracer_stat\">tracer_stat</a> <a class=\"id\" href=\"#function_stats\">function_stats</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"functions\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stat_start\">stat_start</a><span class=\"ts\"/>= <a class=\"id\" href=\"#function_stat_start\">function_stat_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stat_next\">stat_next</a><span class=\"ts\"/>= <a class=\"id\" href=\"#function_stat_next\">function_stat_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stat_cmp\">stat_cmp</a><span class=\"ts\"/>= <a class=\"id\" href=\"#function_stat_cmp\">function_stat_cmp</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stat_headers\">stat_headers</a><span class=\"ts\"/>= <a class=\"id\" href=\"#function_stat_headers\">function_stat_headers</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stat_show\">stat_show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#function_stat_show\">function_stat_show</a>", 
"};", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#ftrace_profile_debugfs\">ftrace_profile_debugfs</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_tracer\">d_tracer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_profile_stat\">ftrace_profile_stat</a> *<a class=\"id\" href=\"#stat\">stat</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#ftrace_profile_stats\">ftrace_profile_stats</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allocate enough for function name + cpu number */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(32, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The files created are permanent, if something happens</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we still do not free memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"Could not allocate stat file for cpu %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#stat\">stat</a> = <a class=\"id\" href=\"#function_stats\">function_stats</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#name\">name</a>, 32, \"function%d\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_stat_tracer\">register_stat_tracer</a>(&amp;<a class=\"id\" href=\"#stat\">stat</a>-><a class=\"id\" href=\"#stat\">stat</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"Could not register function stat for cpu %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(\"function_profile_enabled\", 0644,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#d_tracer\">d_tracer</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#ftrace_profile_fops\">ftrace_profile_fops</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Could not create debugfs \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"'function_profile_enabled' entry\\n\");", 
"}", 
"", 
"#else <span class=\"comment\">/* CONFIG_FUNCTION_PROFILER */</span>", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#ftrace_profile_debugfs\">ftrace_profile_debugfs</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_tracer\">d_tracer</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FUNCTION_PROFILER */</span>", 
"", 
"static struct <a class=\"id\" href=\"#pid\">pid</a> * const <a class=\"id\" href=\"#ftrace_swapper_pid\">ftrace_swapper_pid</a> = &amp;<a class=\"id\" href=\"#init_struct_pid\">init_struct_pid</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DYNAMIC_FTRACE\">CONFIG_DYNAMIC_FTRACE</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_FTRACE_MCOUNT_RECORD\">CONFIG_FTRACE_MCOUNT_RECORD</a>", 
"# <a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#Dynamic\">Dynamic</a> <a class=\"id\" href=\"#ftrace\">ftrace</a> <a class=\"id\" href=\"#depends\">depends</a> <a class=\"id\" href=\"#on\">on</a> <a class=\"id\" href=\"#MCOUNT_RECORD\">MCOUNT_RECORD</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#ftrace_func_hash\">ftrace_func_hash</a>[<a class=\"id\" href=\"#FTRACE_FUNC_HASHSIZE\">FTRACE_FUNC_HASHSIZE</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"struct <a class=\"id\" href=\"#ftrace_func_probe\">ftrace_func_probe</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_probe_ops\">ftrace_probe_ops</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu\">rcu</a>;", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_ENABLE_CALLS\">FTRACE_ENABLE_CALLS</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_DISABLE_CALLS\">FTRACE_DISABLE_CALLS</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_UPDATE_TRACE_FUNC\">FTRACE_UPDATE_TRACE_FUNC</a><span class=\"ts\"/>= (1 << 2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_ENABLE_MCOUNT\">FTRACE_ENABLE_MCOUNT</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 3),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_DISABLE_MCOUNT\">FTRACE_DISABLE_MCOUNT</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 4),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_START_FUNC_RET\">FTRACE_START_FUNC_RET</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 5),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_STOP_FUNC_RET\">FTRACE_STOP_FUNC_RET</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 6),", 
"};", 
"", 
"static int <a class=\"id\" href=\"#ftrace_filtered\">ftrace_filtered</a>;", 
"", 
"static struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#ftrace_new_addrs\">ftrace_new_addrs</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#ftrace_regex_lock\">ftrace_regex_lock</a>);", 
"", 
"struct <a class=\"id\" href=\"#ftrace_page\">ftrace_page</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_page\">ftrace_page</a><span class=\"ts\"/>*<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a><span class=\"ts\"/><a class=\"id\" href=\"#records\">records</a>[];", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ENTRIES_PER_PAGE\">ENTRIES_PER_PAGE</a> \\", 
"  ((<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - sizeof(struct <a class=\"id\" href=\"#ftrace_page\">ftrace_page</a>)) / sizeof(struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a>))", 
"", 
"<span class=\"comment\">/* estimate from running different kernels */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NR_TO_INIT\">NR_TO_INIT</a><span class=\"ts\"/><span class=\"ts\"/>10000", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_page\">ftrace_page</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ftrace_pages_start\">ftrace_pages_start</a>;", 
"static struct <a class=\"id\" href=\"#ftrace_page\">ftrace_page</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ftrace_pages\">ftrace_pages</a>;", 
"", 
"static struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#ftrace_free_records\">ftrace_free_records</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a double for. Do not use 'break' to break out of the loop,</span>", 
"<span class=\"comment\"> * you must use a goto.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#do_for_each_ftrace_rec\">do_for_each_ftrace_rec</a>(<a class=\"id\" href=\"#pg\">pg</a>, <a class=\"id\" href=\"#rec\">rec</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#ftrace_pages_start\">ftrace_pages_start</a>; <a class=\"id\" href=\"#pg\">pg</a>; <a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#next\">next</a>) {<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#_____i\">_____i</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#_____i\">_____i</a> = 0; <a class=\"id\" href=\"#_____i\">_____i</a> &lt; <a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#index\">index</a>; <a class=\"id\" href=\"#_____i\">_____i</a>++) {<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a> = &amp;<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#records\">records</a>[<a class=\"id\" href=\"#_____i\">_____i</a>];", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#while_for_each_ftrace_rec\">while_for_each_ftrace_rec</a>()<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}", 
"", 
"static void <a class=\"id\" href=\"#ftrace_free_rec\">ftrace_free_rec</a>(struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#freelist\">freelist</a> = <a class=\"id\" href=\"#ftrace_free_records\">ftrace_free_records</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_free_records\">ftrace_free_records</a> = <a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FTRACE_FL_FREE\">FTRACE_FL_FREE</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#ftrace_alloc_dyn_node\">ftrace_alloc_dyn_node</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dyn_ftrace\">dyn_ftrace</a> *<a class=\"id\" href=\"#rec\">rec</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First check for freed records */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_free_records\">ftrace_free_records</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rec\">rec</a> = <a class=\"id\" href=\"#ftrace_free_records\">ftrace_free_records</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FTRACE_FL_FREE\">FTRACE_FL_FREE</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FTRACE_WARN_ON_ONCE\">FTRACE_WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_free_records\">ftrace_free_records</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_free_records\">ftrace_free_records</a> = <a class=\"id\" href=\"#rec\">rec</a>-><a class=\"id\" href=\"#freelist\">freelist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#rec\">rec</a>, 0, sizeof(*<a class=\"id\" href=\"#rec\">rec</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rec\">rec</a>;", 
"<span class=\"ts\"/>}", 
"", 
];
xr_frag_insert('l/ef/69383296adc0f1a4a450c1dee0c1e2ce38b03e.xr', __xr_tmp);
