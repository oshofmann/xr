var __xr_tmp = [
"<span class=\"comment\">/* Lzma decompressor for Linux kernel. Shamelessly snarfed</span>", 
"<span class=\"comment\"> *from busybox 1.1.1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *Linux kernel adaptation</span>", 
"<span class=\"comment\"> *Copyright (C) 2006  Alain &lt; alain@knaff.lu &gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *Based on small lzma deflate implementation/Small range coder</span>", 
"<span class=\"comment\"> *implementation for lzma.</span>", 
"<span class=\"comment\"> *Copyright (C) 2006  Aurelien Jacobs &lt; aurel@gnuage.org &gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *Based on LzmaDecode.c from the LZMA SDK 4.22 (http://www.7-zip.org/)</span>", 
"<span class=\"comment\"> *Copyright (C) 1999-2005  Igor Pavlov</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *Copyrights of the parts, see headers below.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *modify it under the terms of the GNU Lesser General Public</span>", 
"<span class=\"comment\"> *License as published by the Free Software Foundation; either</span>", 
"<span class=\"comment\"> *version 2.1 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\"> *Lesser General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *You should have received a copy of the GNU Lesser General Public</span>", 
"<span class=\"comment\"> *License along with this library; if not, write to the Free Software</span>", 
"<span class=\"comment\"> *Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#STATIC\">STATIC</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREBOOT\">PREBOOT</a>", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#decompress\">decompress</a>/<a class=\"id\" href=\"#unlzma\">unlzma</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* STATIC */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#decompress\">decompress</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#MIN\">MIN</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>) (((<a class=\"id\" href=\"#a\">a</a>) &lt; (<a class=\"id\" href=\"#b\">b</a>)) ? (<a class=\"id\" href=\"#a\">a</a>) : (<a class=\"id\" href=\"#b\">b</a>))", 
"", 
"static long long <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#read_int\">read_int</a>(unsigned char *<a class=\"id\" href=\"#ptr\">ptr</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>long long <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#ret\">ret</a> << 8) | <a class=\"id\" href=\"#ptr\">ptr</a>[<a class=\"id\" href=\"#size\">size</a>-<a class=\"id\" href=\"#i\">i</a>-1];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ENDIAN_CONVERT\">ENDIAN_CONVERT</a>(<a class=\"id\" href=\"#x\">x</a>) \\", 
"  <a class=\"id\" href=\"#x\">x</a> = (<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#x\">x</a>))<a class=\"id\" href=\"#read_int\">read_int</a>((unsigned char *)&amp;<a class=\"id\" href=\"#x\">x</a>, sizeof(<a class=\"id\" href=\"#x\">x</a>))", 
"", 
"", 
"<span class=\"comment\">/* Small range coder implementation for lzma.</span>", 
"<span class=\"comment\"> *Copyright (C) 2006  Aurelien Jacobs &lt; aurel@gnuage.org &gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *Based on LzmaDecode.c from the LZMA SDK 4.22 (http://www.7-zip.org/)</span>", 
"<span class=\"comment\"> *Copyright (c) 1999-2005  Igor Pavlov</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_IOBUF_SIZE\">LZMA_IOBUF_SIZE</a><span class=\"ts\"/>0x10000", 
"", 
"struct <a class=\"id\" href=\"#rc\">rc</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fill\">fill</a>)(void*, unsigned int);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> *<a class=\"id\" href=\"#buffer_end\">buffer_end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#buffer_size\">buffer_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#code\">code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#range\">range</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#bound\">bound</a>;", 
"};", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RC_TOP_BITS\">RC_TOP_BITS</a> 24", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RC_MOVE_BITS\">RC_MOVE_BITS</a> 5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RC_MODEL_TOTAL_BITS\">RC_MODEL_TOTAL_BITS</a> 11", 
"", 
"", 
"static int <a class=\"id\" href=\"#nofill\">nofill</a>(void *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/* Called twice: once at startup and once in rc_normalize() */</span>", 
"static void <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#rc_read\">rc_read</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> = <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#fill\">fill</a>((char *)<a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#LZMA_IOBUF_SIZE\">LZMA_IOBUF_SIZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"unexpected EOF\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer_end\">buffer_end</a> = <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Called once */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#rc_init\">rc_init</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int (*<a class=\"id\" href=\"#fill\">fill</a>)(void*, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buffer_size\">buffer_size</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fill\">fill</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#fill\">fill</a> = <a class=\"id\" href=\"#fill\">fill</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#fill\">fill</a> = <a class=\"id\" href=\"#nofill\">nofill</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = (<a class=\"id\" href=\"#uint8_t\">uint8_t</a> *)<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a> = <a class=\"id\" href=\"#buffer_size\">buffer_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer_end\">buffer_end</a> = <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer_size\">buffer_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#code\">code</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#range\">range</a> = 0xFFFFFFFF;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#rc_init_code\">rc_init_code</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 5; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#ptr\">ptr</a> >= <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer_end\">buffer_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_read\">rc_read</a>(<a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#code\">code</a> = (<a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#code\">code</a> << 8) | *<a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#ptr\">ptr</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Called once. TODO: bb_maybe_free() */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#rc_free\">rc_free</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer\">buffer</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Called twice, but one callsite is in inline'd rc_is_bit_0_helper() */</span>", 
"static void <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#rc_do_normalize\">rc_do_normalize</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#ptr\">ptr</a> >= <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#buffer_end\">buffer_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_read\">rc_read</a>(<a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#range\">range</a> <<= 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#code\">code</a> = (<a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#code\">code</a> << 8) | *<a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#ptr\">ptr</a>++;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#rc_normalize\">rc_normalize</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#range\">range</a> &lt; (1 << <a class=\"id\" href=\"#RC_TOP_BITS\">RC_TOP_BITS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_do_normalize\">rc_do_normalize</a>(<a class=\"id\" href=\"#rc\">rc</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Called 9 times */</span>", 
"<span class=\"comment\">/* Why rc_is_bit_0_helper exists?</span>", 
"<span class=\"comment\"> *Because we want to always expose (rc-&gt;code &lt; rc-&gt;bound) to optimizer</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#rc_is_bit_0_helper\">rc_is_bit_0_helper</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc_normalize\">rc_normalize</a>(<a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#bound\">bound</a> = *<a class=\"id\" href=\"#p\">p</a> * (<a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#range\">range</a> >> <a class=\"id\" href=\"#RC_MODEL_TOTAL_BITS\">RC_MODEL_TOTAL_BITS</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#bound\">bound</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#rc_is_bit_0\">rc_is_bit_0</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#rc_is_bit_0_helper\">rc_is_bit_0_helper</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#code\">code</a> &lt; <a class=\"id\" href=\"#t\">t</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Called ~10 times, but very small, thus inlined */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#rc_update_bit_0\">rc_update_bit_0</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#range\">range</a> = <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#bound\">bound</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> += ((1 << <a class=\"id\" href=\"#RC_MODEL_TOTAL_BITS\">RC_MODEL_TOTAL_BITS</a>) - *<a class=\"id\" href=\"#p\">p</a>) >> <a class=\"id\" href=\"#RC_MOVE_BITS\">RC_MOVE_BITS</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rc_update_bit_1\">rc_update_bit_1</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#range\">range</a> -= <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#bound\">bound</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#code\">code</a> -= <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#bound\">bound</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> -= *<a class=\"id\" href=\"#p\">p</a> >> <a class=\"id\" href=\"#RC_MOVE_BITS\">RC_MOVE_BITS</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Called 4 times in unlzma loop */</span>", 
"static int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#rc_get_bit\">rc_get_bit</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#p\">p</a>, int *<a class=\"id\" href=\"#symbol\">symbol</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc_is_bit_0\">rc_is_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_0\">rc_update_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#symbol\">symbol</a> *= 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_1\">rc_update_bit_1</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#symbol\">symbol</a> = *<a class=\"id\" href=\"#symbol\">symbol</a> * 2 + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Called once */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#rc_direct_bit\">rc_direct_bit</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc_normalize\">rc_normalize</a>(<a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#range\">range</a> >>= 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#code\">code</a> >= <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#range\">range</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#code\">code</a> -= <a class=\"id\" href=\"#rc\">rc</a>-><a class=\"id\" href=\"#range\">range</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Called twice */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT\">INIT</a>", 
"<a class=\"id\" href=\"#rc_bit_tree_decode\">rc_bit_tree_decode</a>(struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#num_levels\">num_levels</a>, int *<a class=\"id\" href=\"#symbol\">symbol</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#num_levels\">num_levels</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#symbol\">symbol</a> = 1;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_get_bit\">rc_get_bit</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#p\">p</a> + *<a class=\"id\" href=\"#symbol\">symbol</a>, <a class=\"id\" href=\"#symbol\">symbol</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#symbol\">symbol</a> -= 1 << <a class=\"id\" href=\"#num_levels\">num_levels</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Small lzma deflate implementation.</span>", 
"<span class=\"comment\"> * Copyright (C) 2006  Aurelien Jacobs &lt; aurel@gnuage.org &gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on LzmaDecode.c from the LZMA SDK 4.22 (http://www.7-zip.org/)</span>", 
"<span class=\"comment\"> * Copyright (C) 1999-2005  Igor Pavlov</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"struct <a class=\"id\" href=\"#lzma_header\">lzma_header</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#dict_size\">dict_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#dst_size\">dst_size</a>;", 
"} <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#packed\">packed</a>)) ;", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_BASE_SIZE\">LZMA_BASE_SIZE</a> 1846", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_LIT_SIZE\">LZMA_LIT_SIZE</a> 768", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_NUM_POS_BITS_MAX\">LZMA_NUM_POS_BITS_MAX</a> 4", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_LEN_NUM_LOW_BITS\">LZMA_LEN_NUM_LOW_BITS</a> 3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_LEN_NUM_MID_BITS\">LZMA_LEN_NUM_MID_BITS</a> 3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_LEN_NUM_HIGH_BITS\">LZMA_LEN_NUM_HIGH_BITS</a> 8", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_LEN_CHOICE\">LZMA_LEN_CHOICE</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_LEN_CHOICE_2\">LZMA_LEN_CHOICE_2</a> (<a class=\"id\" href=\"#LZMA_LEN_CHOICE\">LZMA_LEN_CHOICE</a> + 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_LEN_LOW\">LZMA_LEN_LOW</a> (<a class=\"id\" href=\"#LZMA_LEN_CHOICE_2\">LZMA_LEN_CHOICE_2</a> + 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_LEN_MID\">LZMA_LEN_MID</a> (<a class=\"id\" href=\"#LZMA_LEN_LOW\">LZMA_LEN_LOW</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>      + (1 << (<a class=\"id\" href=\"#LZMA_NUM_POS_BITS_MAX\">LZMA_NUM_POS_BITS_MAX</a> + <a class=\"id\" href=\"#LZMA_LEN_NUM_LOW_BITS\">LZMA_LEN_NUM_LOW_BITS</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_LEN_HIGH\">LZMA_LEN_HIGH</a> (<a class=\"id\" href=\"#LZMA_LEN_MID\">LZMA_LEN_MID</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>       +(1 << (<a class=\"id\" href=\"#LZMA_NUM_POS_BITS_MAX\">LZMA_NUM_POS_BITS_MAX</a> + <a class=\"id\" href=\"#LZMA_LEN_NUM_MID_BITS\">LZMA_LEN_NUM_MID_BITS</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_NUM_LEN_PROBS\">LZMA_NUM_LEN_PROBS</a> (<a class=\"id\" href=\"#LZMA_LEN_HIGH\">LZMA_LEN_HIGH</a> + (1 << <a class=\"id\" href=\"#LZMA_LEN_NUM_HIGH_BITS\">LZMA_LEN_NUM_HIGH_BITS</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_NUM_STATES\">LZMA_NUM_STATES</a> 12", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_NUM_LIT_STATES\">LZMA_NUM_LIT_STATES</a> 7", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_START_POS_MODEL_INDEX\">LZMA_START_POS_MODEL_INDEX</a> 4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_END_POS_MODEL_INDEX\">LZMA_END_POS_MODEL_INDEX</a> 14", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_NUM_FULL_DISTANCES\">LZMA_NUM_FULL_DISTANCES</a> (1 << (<a class=\"id\" href=\"#LZMA_END_POS_MODEL_INDEX\">LZMA_END_POS_MODEL_INDEX</a> >> 1))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_NUM_POS_SLOT_BITS\">LZMA_NUM_POS_SLOT_BITS</a> 6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_NUM_LEN_TO_POS_STATES\">LZMA_NUM_LEN_TO_POS_STATES</a> 4", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_NUM_ALIGN_BITS\">LZMA_NUM_ALIGN_BITS</a> 4", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_MATCH_MIN_LEN\">LZMA_MATCH_MIN_LEN</a> 2", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_IS_MATCH\">LZMA_IS_MATCH</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_IS_REP\">LZMA_IS_REP</a> (<a class=\"id\" href=\"#LZMA_IS_MATCH\">LZMA_IS_MATCH</a> + (<a class=\"id\" href=\"#LZMA_NUM_STATES\">LZMA_NUM_STATES</a> << <a class=\"id\" href=\"#LZMA_NUM_POS_BITS_MAX\">LZMA_NUM_POS_BITS_MAX</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_IS_REP_G0\">LZMA_IS_REP_G0</a> (<a class=\"id\" href=\"#LZMA_IS_REP\">LZMA_IS_REP</a> + <a class=\"id\" href=\"#LZMA_NUM_STATES\">LZMA_NUM_STATES</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_IS_REP_G1\">LZMA_IS_REP_G1</a> (<a class=\"id\" href=\"#LZMA_IS_REP_G0\">LZMA_IS_REP_G0</a> + <a class=\"id\" href=\"#LZMA_NUM_STATES\">LZMA_NUM_STATES</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_IS_REP_G2\">LZMA_IS_REP_G2</a> (<a class=\"id\" href=\"#LZMA_IS_REP_G1\">LZMA_IS_REP_G1</a> + <a class=\"id\" href=\"#LZMA_NUM_STATES\">LZMA_NUM_STATES</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_IS_REP_0_LONG\">LZMA_IS_REP_0_LONG</a> (<a class=\"id\" href=\"#LZMA_IS_REP_G2\">LZMA_IS_REP_G2</a> + <a class=\"id\" href=\"#LZMA_NUM_STATES\">LZMA_NUM_STATES</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_POS_SLOT\">LZMA_POS_SLOT</a> (<a class=\"id\" href=\"#LZMA_IS_REP_0_LONG\">LZMA_IS_REP_0_LONG</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>       + (<a class=\"id\" href=\"#LZMA_NUM_STATES\">LZMA_NUM_STATES</a> << <a class=\"id\" href=\"#LZMA_NUM_POS_BITS_MAX\">LZMA_NUM_POS_BITS_MAX</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_SPEC_POS\">LZMA_SPEC_POS</a> (<a class=\"id\" href=\"#LZMA_POS_SLOT\">LZMA_POS_SLOT</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>       +(<a class=\"id\" href=\"#LZMA_NUM_LEN_TO_POS_STATES\">LZMA_NUM_LEN_TO_POS_STATES</a> << <a class=\"id\" href=\"#LZMA_NUM_POS_SLOT_BITS\">LZMA_NUM_POS_SLOT_BITS</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_ALIGN\">LZMA_ALIGN</a> (<a class=\"id\" href=\"#LZMA_SPEC_POS\">LZMA_SPEC_POS</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>    + <a class=\"id\" href=\"#LZMA_NUM_FULL_DISTANCES\">LZMA_NUM_FULL_DISTANCES</a> - <a class=\"id\" href=\"#LZMA_END_POS_MODEL_INDEX\">LZMA_END_POS_MODEL_INDEX</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_LEN_CODER\">LZMA_LEN_CODER</a> (<a class=\"id\" href=\"#LZMA_ALIGN\">LZMA_ALIGN</a> + (1 << <a class=\"id\" href=\"#LZMA_NUM_ALIGN_BITS\">LZMA_NUM_ALIGN_BITS</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_REP_LEN_CODER\">LZMA_REP_LEN_CODER</a> (<a class=\"id\" href=\"#LZMA_LEN_CODER\">LZMA_LEN_CODER</a> + <a class=\"id\" href=\"#LZMA_NUM_LEN_PROBS\">LZMA_NUM_LEN_PROBS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LZMA_LITERAL\">LZMA_LITERAL</a> (<a class=\"id\" href=\"#LZMA_REP_LEN_CODER\">LZMA_REP_LEN_CODER</a> + <a class=\"id\" href=\"#LZMA_NUM_LEN_PROBS\">LZMA_NUM_LEN_PROBS</a>)", 
"", 
"", 
"struct <a class=\"id\" href=\"#writer\">writer</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#previous_byte\">previous_byte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buffer_pos\">buffer_pos</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bufsize\">bufsize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#global_pos\">global_pos</a>;", 
"<span class=\"ts\"/>int(*<a class=\"id\" href=\"#flush\">flush</a>)(void*, unsigned int);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lzma_header\">lzma_header</a> *<a class=\"id\" href=\"#header\">header</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#cstate\">cstate</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#rep0\">rep0</a>, <a class=\"id\" href=\"#rep1\">rep1</a>, <a class=\"id\" href=\"#rep2\">rep2</a>, <a class=\"id\" href=\"#rep3\">rep3</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#get_pos\">get_pos</a>(struct <a class=\"id\" href=\"#writer\">writer</a> *<a class=\"id\" href=\"#wr\">wr</a>)", 
"{", 
"<span class=\"ts\"/>return", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#global_pos\">global_pos</a> + <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#buffer_pos\">buffer_pos</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#peek_old_byte\">peek_old_byte</a>(struct <a class=\"id\" href=\"#writer\">writer</a> *<a class=\"id\" href=\"#wr\">wr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#offs\">offs</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#flush\">flush</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#int32_t\">int32_t</a> <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#offs\">offs</a> &gt; <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#dict_size\">dict_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offs\">offs</a> -= <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#dict_size\">dict_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#buffer_pos\">buffer_pos</a> - <a class=\"id\" href=\"#offs\">offs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#pos\">pos</a>];", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#buffer_pos\">buffer_pos</a> - <a class=\"id\" href=\"#offs\">offs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#pos\">pos</a> >= <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#dict_size\">dict_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#dict_size\">dict_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#pos\">pos</a>];", 
"<span class=\"ts\"/>}", 
"", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#write_byte\">write_byte</a>(struct <a class=\"id\" href=\"#writer\">writer</a> *<a class=\"id\" href=\"#wr\">wr</a>, <a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#byte\">byte</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#buffer_pos\">buffer_pos</a>++] = <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#previous_byte\">previous_byte</a> = <a class=\"id\" href=\"#byte\">byte</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#flush\">flush</a> && <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#buffer_pos\">buffer_pos</a> == <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#dict_size\">dict_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#buffer_pos\">buffer_pos</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#global_pos\">global_pos</a> += <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#dict_size\">dict_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#flush\">flush</a>((char *)<a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#dict_size\">dict_size</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#copy_byte\">copy_byte</a>(struct <a class=\"id\" href=\"#writer\">writer</a> *<a class=\"id\" href=\"#wr\">wr</a>, <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#offs\">offs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_byte\">write_byte</a>(<a class=\"id\" href=\"#wr\">wr</a>, <a class=\"id\" href=\"#peek_old_byte\">peek_old_byte</a>(<a class=\"id\" href=\"#wr\">wr</a>, <a class=\"id\" href=\"#offs\">offs</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#copy_bytes\">copy_bytes</a>(struct <a class=\"id\" href=\"#writer\">writer</a> *<a class=\"id\" href=\"#wr\">wr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#rep0\">rep0</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_byte\">copy_byte</a>(<a class=\"id\" href=\"#wr\">wr</a>, <a class=\"id\" href=\"#rep0\">rep0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>--;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#len\">len</a> != 0 && <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#buffer_pos\">buffer_pos</a> &lt; <a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#dst_size\">dst_size</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#process_bit0\">process_bit0</a>(struct <a class=\"id\" href=\"#writer\">writer</a> *<a class=\"id\" href=\"#wr\">wr</a>, struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#cstate\">cstate</a> *<a class=\"id\" href=\"#cst\">cst</a>, <a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#pos_state\">pos_state</a>, <a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#prob\">prob</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#lc\">lc</a>, <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#literal_pos_mask\">literal_pos_mask</a>) {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mi\">mi</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_0\">rc_update_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prob\">prob</a> = (<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#LZMA_LITERAL\">LZMA_LITERAL</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#LZMA_LIT_SIZE\">LZMA_LIT_SIZE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/> * (((<a class=\"id\" href=\"#get_pos\">get_pos</a>(<a class=\"id\" href=\"#wr\">wr</a>) &amp; <a class=\"id\" href=\"#literal_pos_mask\">literal_pos_mask</a>) << <a class=\"id\" href=\"#lc\">lc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    + (<a class=\"id\" href=\"#wr\">wr</a>-><a class=\"id\" href=\"#previous_byte\">previous_byte</a> >> (8 - <a class=\"id\" href=\"#lc\">lc</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> >= <a class=\"id\" href=\"#LZMA_NUM_LIT_STATES\">LZMA_NUM_LIT_STATES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#match_byte\">match_byte</a> = <a class=\"id\" href=\"#peek_old_byte\">peek_old_byte</a>(<a class=\"id\" href=\"#wr\">wr</a>, <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#prob_lit\">prob_lit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match_byte\">match_byte</a> <<= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#match_byte\">match_byte</a> &amp; 0x100;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob_lit\">prob_lit</a> = <a class=\"id\" href=\"#prob\">prob</a> + 0x100 + <a class=\"id\" href=\"#bit\">bit</a> + <a class=\"id\" href=\"#mi\">mi</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc_get_bit\">rc_get_bit</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob_lit\">prob_lit</a>, &amp;<a class=\"id\" href=\"#mi\">mi</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bit\">bit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bit\">bit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#mi\">mi</a> &lt; 0x100);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#mi\">mi</a> &lt; 0x100) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#prob_lit\">prob_lit</a> = <a class=\"id\" href=\"#prob\">prob</a> + <a class=\"id\" href=\"#mi\">mi</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_get_bit\">rc_get_bit</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob_lit\">prob_lit</a>, &amp;<a class=\"id\" href=\"#mi\">mi</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_byte\">write_byte</a>(<a class=\"id\" href=\"#wr\">wr</a>, <a class=\"id\" href=\"#mi\">mi</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> &lt; 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> = 0;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> &lt; 10)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> -= 3;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> -= 6;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#process_bit1\">process_bit1</a>(struct <a class=\"id\" href=\"#writer\">writer</a> *<a class=\"id\" href=\"#wr\">wr</a>, struct <a class=\"id\" href=\"#rc\">rc</a> *<a class=\"id\" href=\"#rc\">rc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#cstate\">cstate</a> *<a class=\"id\" href=\"#cst\">cst</a>, <a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#pos_state\">pos_state</a>, <a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#prob\">prob</a>) {", 
"  int <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#prob_len\">prob_len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_bits\">num_bits</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_1\">rc_update_bit_1</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prob\">prob</a> = <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#LZMA_IS_REP\">LZMA_IS_REP</a> + <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc_is_bit_0\">rc_is_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_0\">rc_update_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep3\">rep3</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep2\">rep2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep2\">rep2</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep1\">rep1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep1\">rep1</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#LZMA_NUM_LIT_STATES\">LZMA_NUM_LIT_STATES</a> ? 0 : 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob\">prob</a> = <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#LZMA_LEN_CODER\">LZMA_LEN_CODER</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_1\">rc_update_bit_1</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob\">prob</a> = <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#LZMA_IS_REP_G0\">LZMA_IS_REP_G0</a> + <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc_is_bit_0\">rc_is_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_0\">rc_update_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob\">prob</a> = (<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#LZMA_IS_REP_0_LONG\">LZMA_IS_REP_0_LONG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ (<a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> <<", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#LZMA_NUM_POS_BITS_MAX\">LZMA_NUM_POS_BITS_MAX</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos_state\">pos_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc_is_bit_0\">rc_is_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_0\">rc_update_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#LZMA_NUM_LIT_STATES\">LZMA_NUM_LIT_STATES</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>9 : 11;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_byte\">copy_byte</a>(<a class=\"id\" href=\"#wr\">wr</a>, <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_1\">rc_update_bit_1</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#distance\">distance</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_1\">rc_update_bit_1</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob\">prob</a> = <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#LZMA_IS_REP_G1\">LZMA_IS_REP_G1</a> + <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc_is_bit_0\">rc_is_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_0\">rc_update_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#distance\">distance</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep1\">rep1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_1\">rc_update_bit_1</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob\">prob</a> = <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#LZMA_IS_REP_G2\">LZMA_IS_REP_G2</a> + <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc_is_bit_0\">rc_is_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_0\">rc_update_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#distance\">distance</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep2\">rep2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_1\">rc_update_bit_1</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#distance\">distance</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep3\">rep3</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep3\">rep3</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep2\">rep2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep2\">rep2</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep1\">rep1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep1\">rep1</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a> = <a class=\"id\" href=\"#distance\">distance</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#LZMA_NUM_LIT_STATES\">LZMA_NUM_LIT_STATES</a> ? 8 : 11;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob\">prob</a> = <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#LZMA_REP_LEN_CODER\">LZMA_REP_LEN_CODER</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prob_len\">prob_len</a> = <a class=\"id\" href=\"#prob\">prob</a> + <a class=\"id\" href=\"#LZMA_LEN_CHOICE\">LZMA_LEN_CHOICE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc_is_bit_0\">rc_is_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob_len\">prob_len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_0\">rc_update_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob_len\">prob_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob_len\">prob_len</a> = (<a class=\"id\" href=\"#prob\">prob</a> + <a class=\"id\" href=\"#LZMA_LEN_LOW\">LZMA_LEN_LOW</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    + (<a class=\"id\" href=\"#pos_state\">pos_state</a> <<", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#LZMA_LEN_NUM_LOW_BITS\">LZMA_LEN_NUM_LOW_BITS</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_bits\">num_bits</a> = <a class=\"id\" href=\"#LZMA_LEN_NUM_LOW_BITS\">LZMA_LEN_NUM_LOW_BITS</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_1\">rc_update_bit_1</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob_len\">prob_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob_len\">prob_len</a> = <a class=\"id\" href=\"#prob\">prob</a> + <a class=\"id\" href=\"#LZMA_LEN_CHOICE_2\">LZMA_LEN_CHOICE_2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc_is_bit_0\">rc_is_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob_len\">prob_len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_0\">rc_update_bit_0</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob_len\">prob_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob_len\">prob_len</a> = (<a class=\"id\" href=\"#prob\">prob</a> + <a class=\"id\" href=\"#LZMA_LEN_MID\">LZMA_LEN_MID</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    + (<a class=\"id\" href=\"#pos_state\">pos_state</a> <<", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#LZMA_LEN_NUM_MID_BITS\">LZMA_LEN_NUM_MID_BITS</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = 1 << <a class=\"id\" href=\"#LZMA_LEN_NUM_LOW_BITS\">LZMA_LEN_NUM_LOW_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_bits\">num_bits</a> = <a class=\"id\" href=\"#LZMA_LEN_NUM_MID_BITS\">LZMA_LEN_NUM_MID_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_update_bit_1\">rc_update_bit_1</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob_len\">prob_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob_len\">prob_len</a> = <a class=\"id\" href=\"#prob\">prob</a> + <a class=\"id\" href=\"#LZMA_LEN_HIGH\">LZMA_LEN_HIGH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = ((1 << <a class=\"id\" href=\"#LZMA_LEN_NUM_LOW_BITS\">LZMA_LEN_NUM_LOW_BITS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  + (1 << <a class=\"id\" href=\"#LZMA_LEN_NUM_MID_BITS\">LZMA_LEN_NUM_MID_BITS</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_bits\">num_bits</a> = <a class=\"id\" href=\"#LZMA_LEN_NUM_HIGH_BITS\">LZMA_LEN_NUM_HIGH_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc_bit_tree_decode\">rc_bit_tree_decode</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob_len\">prob_len</a>, <a class=\"id\" href=\"#num_bits\">num_bits</a>, &amp;<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> &lt; 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#pos_slot\">pos_slot</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#state\">state</a> += <a class=\"id\" href=\"#LZMA_NUM_LIT_STATES\">LZMA_NUM_LIT_STATES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob\">prob</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#LZMA_POS_SLOT\">LZMA_POS_SLOT</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#len\">len</a> &lt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#LZMA_NUM_LEN_TO_POS_STATES\">LZMA_NUM_LEN_TO_POS_STATES</a> ? <a class=\"id\" href=\"#len\">len</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#LZMA_NUM_LEN_TO_POS_STATES\">LZMA_NUM_LEN_TO_POS_STATES</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> << <a class=\"id\" href=\"#LZMA_NUM_POS_SLOT_BITS\">LZMA_NUM_POS_SLOT_BITS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_bit_tree_decode\">rc_bit_tree_decode</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#LZMA_NUM_POS_SLOT_BITS\">LZMA_NUM_POS_SLOT_BITS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#pos_slot\">pos_slot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos_slot\">pos_slot</a> >= <a class=\"id\" href=\"#LZMA_START_POS_MODEL_INDEX\">LZMA_START_POS_MODEL_INDEX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#mi\">mi</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_bits\">num_bits</a> = (<a class=\"id\" href=\"#pos_slot\">pos_slot</a> >> 1) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a> = 2 | (<a class=\"id\" href=\"#pos_slot\">pos_slot</a> &amp; 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos_slot\">pos_slot</a> &lt; <a class=\"id\" href=\"#LZMA_END_POS_MODEL_INDEX\">LZMA_END_POS_MODEL_INDEX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a> <<= <a class=\"id\" href=\"#num_bits\">num_bits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob\">prob</a> = <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#LZMA_SPEC_POS\">LZMA_SPEC_POS</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a> - <a class=\"id\" href=\"#pos_slot\">pos_slot</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_bits\">num_bits</a> -= <a class=\"id\" href=\"#LZMA_NUM_ALIGN_BITS\">LZMA_NUM_ALIGN_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#num_bits\">num_bits</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a> = (<a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a> << 1) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_direct_bit\">rc_direct_bit</a>(<a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prob\">prob</a> = <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#LZMA_ALIGN\">LZMA_ALIGN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a> <<= <a class=\"id\" href=\"#LZMA_NUM_ALIGN_BITS\">LZMA_NUM_ALIGN_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_bits\">num_bits</a> = <a class=\"id\" href=\"#LZMA_NUM_ALIGN_BITS\">LZMA_NUM_ALIGN_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mi\">mi</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#num_bits\">num_bits</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc_get_bit\">rc_get_bit</a>(<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a> + <a class=\"id\" href=\"#mi\">mi</a>, &amp;<a class=\"id\" href=\"#mi\">mi</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a> |= <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> <<= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a> = <a class=\"id\" href=\"#pos_slot\">pos_slot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (++(<a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#LZMA_MATCH_MIN_LEN\">LZMA_MATCH_MIN_LEN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy_bytes\">copy_bytes</a>(<a class=\"id\" href=\"#wr\">wr</a>, <a class=\"id\" href=\"#cst\">cst</a>-><a class=\"id\" href=\"#rep0\">rep0</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"", 
"", 
"<a class=\"id\" href=\"#STATIC\">STATIC</a> <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#unlzma\">unlzma</a>(unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#in_len\">in_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int(*<a class=\"id\" href=\"#fill\">fill</a>)(void*, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int(*<a class=\"id\" href=\"#flush\">flush</a>)(void*, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned char *<a class=\"id\" href=\"#output\">output</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int *<a class=\"id\" href=\"#posp\">posp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void(*<a class=\"id\" href=\"#error_fn\">error_fn</a>)(char *<a class=\"id\" href=\"#x\">x</a>)", 
"<span class=\"ts\"/>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lzma_header\">lzma_header</a> <a class=\"id\" href=\"#header\">header</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lc\">lc</a>, <a class=\"id\" href=\"#pb\">pb</a>, <a class=\"id\" href=\"#lp\">lp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#pos_state_mask\">pos_state_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#literal_pos_mask\">literal_pos_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_probs\">num_probs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rc\">rc</a> <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#mi\">mi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#writer\">writer</a> <a class=\"id\" href=\"#wr\">wr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cstate\">cstate</a> <a class=\"id\" href=\"#cst\">cst</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#inbuf\">inbuf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_error_fn\">set_error_fn</a>(<a class=\"id\" href=\"#error_fn\">error_fn</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inbuf\">inbuf</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inbuf\">inbuf</a> = <a class=\"id\" href=\"#malloc\">malloc</a>(<a class=\"id\" href=\"#LZMA_IOBUF_SIZE\">LZMA_IOBUF_SIZE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inbuf\">inbuf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"Could not allocate input bufer\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_0\">exit_0</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>.<a class=\"id\" href=\"#state\">state</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cst\">cst</a>.<a class=\"id\" href=\"#rep0\">rep0</a> = <a class=\"id\" href=\"#cst\">cst</a>.<a class=\"id\" href=\"#rep1\">rep1</a> = <a class=\"id\" href=\"#cst\">cst</a>.<a class=\"id\" href=\"#rep2\">rep2</a> = <a class=\"id\" href=\"#cst\">cst</a>.<a class=\"id\" href=\"#rep3\">rep3</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#header\">header</a> = &amp;<a class=\"id\" href=\"#header\">header</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#flush\">flush</a> = <a class=\"id\" href=\"#flush\">flush</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#global_pos\">global_pos</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#previous_byte\">previous_byte</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#buffer_pos\">buffer_pos</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc_init\">rc_init</a>(&amp;<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#fill\">fill</a>, <a class=\"id\" href=\"#inbuf\">inbuf</a>, <a class=\"id\" href=\"#in_len\">in_len</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; sizeof(<a class=\"id\" href=\"#header\">header</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>.<a class=\"id\" href=\"#ptr\">ptr</a> >= <a class=\"id\" href=\"#rc\">rc</a>.<a class=\"id\" href=\"#buffer_end\">buffer_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc_read\">rc_read</a>(&amp;<a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>((unsigned char *)&amp;<a class=\"id\" href=\"#header\">header</a>)[<a class=\"id\" href=\"#i\">i</a>] = *<a class=\"id\" href=\"#rc\">rc</a>.<a class=\"id\" href=\"#ptr\">ptr</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#pos\">pos</a> >= (9 * 5 * 5))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>(\"bad header\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mi\">mi</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lc\">lc</a> = <a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#lc\">lc</a> >= 9) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mi\">mi</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lc\">lc</a> -= 9;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pb\">pb</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lp\">lp</a> = <a class=\"id\" href=\"#mi\">mi</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#lp\">lp</a> >= 5) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pb\">pb</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lp\">lp</a> -= 5;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos_state_mask\">pos_state_mask</a> = (1 << <a class=\"id\" href=\"#pb\">pb</a>) - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#literal_pos_mask\">literal_pos_mask</a> = (1 << <a class=\"id\" href=\"#lp\">lp</a>) - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ENDIAN_CONVERT\">ENDIAN_CONVERT</a>(<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#dict_size\">dict_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ENDIAN_CONVERT\">ENDIAN_CONVERT</a>(<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#dst_size\">dst_size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#dict_size\">dict_size</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#dict_size\">dict_size</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#output\">output</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#output\">output</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#bufsize\">bufsize</a> = <a class=\"id\" href=\"#MIN\">MIN</a>(<a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#dst_size\">dst_size</a>, <a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#dict_size\">dict_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#large_malloc\">large_malloc</a>(<a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#bufsize\">bufsize</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#buffer\">buffer</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_1\">exit_1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_probs\">num_probs</a> = <a class=\"id\" href=\"#LZMA_BASE_SIZE\">LZMA_BASE_SIZE</a> + (<a class=\"id\" href=\"#LZMA_LIT_SIZE\">LZMA_LIT_SIZE</a> << (<a class=\"id\" href=\"#lc\">lc</a> + <a class=\"id\" href=\"#lp\">lp</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (<a class=\"id\" href=\"#uint16_t\">uint16_t</a> *) <a class=\"id\" href=\"#large_malloc\">large_malloc</a>(<a class=\"id\" href=\"#num_probs\">num_probs</a> * sizeof(*<a class=\"id\" href=\"#p\">p</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit_2\">exit_2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_probs\">num_probs</a> = <a class=\"id\" href=\"#LZMA_LITERAL\">LZMA_LITERAL</a> + (<a class=\"id\" href=\"#LZMA_LIT_SIZE\">LZMA_LIT_SIZE</a> << (<a class=\"id\" href=\"#lc\">lc</a> + <a class=\"id\" href=\"#lp\">lp</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_probs\">num_probs</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>[<a class=\"id\" href=\"#i\">i</a>] = (1 << <a class=\"id\" href=\"#RC_MODEL_TOTAL_BITS\">RC_MODEL_TOTAL_BITS</a>) >> 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc_init_code\">rc_init_code</a>(&amp;<a class=\"id\" href=\"#rc\">rc</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#get_pos\">get_pos</a>(&amp;<a class=\"id\" href=\"#wr\">wr</a>) &lt; <a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#dst_size\">dst_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#pos_state\">pos_state</a> =<span class=\"ts\"/><a class=\"id\" href=\"#get_pos\">get_pos</a>(&amp;<a class=\"id\" href=\"#wr\">wr</a>) &amp; <a class=\"id\" href=\"#pos_state_mask\">pos_state_mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint16_t\">uint16_t</a> *<a class=\"id\" href=\"#prob\">prob</a> = <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#LZMA_IS_MATCH\">LZMA_IS_MATCH</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cst\">cst</a>.<a class=\"id\" href=\"#state\">state</a> << <a class=\"id\" href=\"#LZMA_NUM_POS_BITS_MAX\">LZMA_NUM_POS_BITS_MAX</a>) + <a class=\"id\" href=\"#pos_state\">pos_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc_is_bit_0\">rc_is_bit_0</a>(&amp;<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#prob\">prob</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#process_bit0\">process_bit0</a>(&amp;<a class=\"id\" href=\"#wr\">wr</a>, &amp;<a class=\"id\" href=\"#rc\">rc</a>, &amp;<a class=\"id\" href=\"#cst\">cst</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pos_state\">pos_state</a>, <a class=\"id\" href=\"#prob\">prob</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#lc\">lc</a>, <a class=\"id\" href=\"#literal_pos_mask\">literal_pos_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#process_bit1\">process_bit1</a>(&amp;<a class=\"id\" href=\"#wr\">wr</a>, &amp;<a class=\"id\" href=\"#rc\">rc</a>, &amp;<a class=\"id\" href=\"#cst\">cst</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pos_state\">pos_state</a>, <a class=\"id\" href=\"#prob\">prob</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cst\">cst</a>.<a class=\"id\" href=\"#rep0\">rep0</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#posp\">posp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#posp\">posp</a> = <a class=\"id\" href=\"#rc\">rc</a>.<a class=\"id\" href=\"#ptr\">ptr</a>-<a class=\"id\" href=\"#rc\">rc</a>.<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#flush\">flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#flush\">flush</a>(<a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#buffer_pos\">buffer_pos</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#large_free\">large_free</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<a class=\"id\" href=\"#exit_2\">exit_2</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#output\">output</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#large_free\">large_free</a>(<a class=\"id\" href=\"#wr\">wr</a>.<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<a class=\"id\" href=\"#exit_1\">exit_1</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#inbuf\">inbuf</a>);", 
"<a class=\"id\" href=\"#exit_0\">exit_0</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#PREBOOT\">PREBOOT</a>", 
"<a class=\"id\" href=\"#STATIC\">STATIC</a> int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#decompress\">decompress</a>(unsigned char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#in_len\">in_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int(*<a class=\"id\" href=\"#fill\">fill</a>)(void*, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int(*<a class=\"id\" href=\"#flush\">flush</a>)(void*, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned char *<a class=\"id\" href=\"#output\">output</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int *<a class=\"id\" href=\"#posp\">posp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void(*<a class=\"id\" href=\"#error_fn\">error_fn</a>)(char *<a class=\"id\" href=\"#x\">x</a>)", 
"<span class=\"ts\"/>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unlzma\">unlzma</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#in_len\">in_len</a> - 4, <a class=\"id\" href=\"#fill\">fill</a>, <a class=\"id\" href=\"#flush\">flush</a>, <a class=\"id\" href=\"#output\">output</a>, <a class=\"id\" href=\"#posp\">posp</a>, <a class=\"id\" href=\"#error_fn\">error_fn</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/ef/d0dc2c193c05daaec8983aba9544d354ee664a.xr', __xr_tmp);
