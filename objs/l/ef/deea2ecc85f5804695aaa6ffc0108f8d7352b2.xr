var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_SEQLOCK_H\">__LINUX_SEQLOCK_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_SEQLOCK_H\">__LINUX_SEQLOCK_H</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reader/writer consistent mechanism without starving writers. This type of</span>", 
"<span class=\"comment\"> * lock for data where the reader wants a consistent set of information</span>", 
"<span class=\"comment\"> * and is willing to retry if the information changes.  Readers never</span>", 
"<span class=\"comment\"> * block but they may have to retry if a writer is in</span>", 
"<span class=\"comment\"> * progress. Writers do not wait for readers. </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is not as cache friendly as brlock. Also, this will not work</span>", 
"<span class=\"comment\"> * for data that contains pointers, because any writer could</span>", 
"<span class=\"comment\"> * invalidate a pointer that a reader was following.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Expected reader usage:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>do {</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    seq = read_seqbegin(&amp;foo);</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>...</span>", 
"<span class=\"comment\"> *      } while (read_seqretry(&amp;foo, seq));</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On non-SMP the spin locks disappear but the writer still needs</span>", 
"<span class=\"comment\"> * to increment the sequence variables because an interrupt routine could</span>", 
"<span class=\"comment\"> * change the state of the data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on x86_64 vsyscall gettimeofday </span>", 
"<span class=\"comment\"> * by Keith Owens and Andrea Arcangeli</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#preempt\">preempt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"typedef struct {", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#sequence\">sequence</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"} <a class=\"id\" href=\"#seqlock_t\">seqlock_t</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These macros triggered gcc-3.x compile-time problems.  We think these are</span>", 
"<span class=\"comment\"> * OK now.  Be cautious.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__SEQLOCK_UNLOCKED\">__SEQLOCK_UNLOCKED</a>(<a class=\"id\" href=\"#lockname\">lockname</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/> { 0, <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(<a class=\"id\" href=\"#lockname\">lockname</a>) }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEQLOCK_UNLOCKED\">SEQLOCK_UNLOCKED</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__SEQLOCK_UNLOCKED\">__SEQLOCK_UNLOCKED</a>(<a class=\"id\" href=\"#old_style_seqlock_init\">old_style_seqlock_init</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#seqlock_init\">seqlock_init</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#sequence\">sequence</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;(<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_SEQLOCK\">DEFINE_SEQLOCK</a>(<a class=\"id\" href=\"#x\">x</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seqlock_t\">seqlock_t</a> <a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#__SEQLOCK_UNLOCKED\">__SEQLOCK_UNLOCKED</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"", 
"<span class=\"comment\">/* Lock out other writers and update the count.</span>", 
"<span class=\"comment\"> * Acts like a normal spin_lock/unlock.</span>", 
"<span class=\"comment\"> * Don't need preempt_disable() because that is in the spin_lock already.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#write_seqlock\">write_seqlock</a>(<a class=\"id\" href=\"#seqlock_t\">seqlock_t</a> *<a class=\"id\" href=\"#sl\">sl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sl\">sl</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#sl\">sl</a>-><a class=\"id\" href=\"#sequence\">sequence</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#write_sequnlock\">write_sequnlock</a>(<a class=\"id\" href=\"#seqlock_t\">seqlock_t</a> *<a class=\"id\" href=\"#sl\">sl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sl\">sl</a>-><a class=\"id\" href=\"#sequence\">sequence</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sl\">sl</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#write_tryseqlock\">write_tryseqlock</a>(<a class=\"id\" href=\"#seqlock_t\">seqlock_t</a> *<a class=\"id\" href=\"#sl\">sl</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#spin_trylock\">spin_trylock</a>(&amp;<a class=\"id\" href=\"#sl\">sl</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#sl\">sl</a>-><a class=\"id\" href=\"#sequence\">sequence</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Start of read calculation -- fetch last complete writer token */</span>", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> unsigned <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(const <a class=\"id\" href=\"#seqlock_t\">seqlock_t</a> *<a class=\"id\" href=\"#sl\">sl</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sl\">sl</a>-><a class=\"id\" href=\"#sequence\">sequence</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> &amp; 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test if reader processed invalid data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If sequence value changed then writer changed data while in section.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> int <a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(const <a class=\"id\" href=\"#seqlock_t\">seqlock_t</a> *<a class=\"id\" href=\"#sl\">sl</a>, unsigned <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#sl\">sl</a>-><a class=\"id\" href=\"#sequence\">sequence</a> != <a class=\"id\" href=\"#start\">start</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Version using sequence counter only.</span>", 
"<span class=\"comment\"> * This can be used when code has its own mutex protecting the</span>", 
"<span class=\"comment\"> * updating starting before the write_seqcountbeqin() and ending</span>", 
"<span class=\"comment\"> * after the write_seqcount_end().</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"typedef struct <a class=\"id\" href=\"#seqcount\">seqcount</a> {", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#sequence\">sequence</a>;", 
"} <a class=\"id\" href=\"#seqcount_t\">seqcount_t</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEQCNT_ZERO\">SEQCNT_ZERO</a> { 0 }", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#seqcount_init\">seqcount_init</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>do { *(<a class=\"id\" href=\"#x\">x</a>) = (<a class=\"id\" href=\"#seqcount_t\">seqcount_t</a>) <a class=\"id\" href=\"#SEQCNT_ZERO\">SEQCNT_ZERO</a>; } while (0)", 
"", 
"<span class=\"comment\">/* Start of read using pointer to a sequence counter only.  */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#read_seqcount_begin\">read_seqcount_begin</a>(const <a class=\"id\" href=\"#seqcount_t\">seqcount_t</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sequence\">sequence</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> &amp; 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test if reader processed invalid data because sequence number has changed.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#read_seqcount_retry\">read_seqcount_retry</a>(const <a class=\"id\" href=\"#seqcount_t\">seqcount_t</a> *<a class=\"id\" href=\"#s\">s</a>, unsigned <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sequence\">sequence</a> != <a class=\"id\" href=\"#start\">start</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sequence counter only version assumes that callers are using their</span>", 
"<span class=\"comment\"> * own mutexing.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#write_seqcount_begin\">write_seqcount_begin</a>(<a class=\"id\" href=\"#seqcount_t\">seqcount_t</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sequence\">sequence</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#write_seqcount_end\">write_seqcount_end</a>(<a class=\"id\" href=\"#seqcount_t\">seqcount_t</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sequence\">sequence</a>++;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Possible sw/hw IRQ protected versions of the interfaces.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_seqlock_irqsave\">write_seqlock_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do { <a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>); <a class=\"id\" href=\"#write_seqlock\">write_seqlock</a>(<a class=\"id\" href=\"#lock\">lock</a>); } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_seqlock_irq\">write_seqlock_irq</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do { <a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();   <a class=\"id\" href=\"#write_seqlock\">write_seqlock</a>(<a class=\"id\" href=\"#lock\">lock</a>); } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_seqlock_bh\">write_seqlock_bh</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"        do { <a class=\"id\" href=\"#local_bh_disable\">local_bh_disable</a>();    <a class=\"id\" href=\"#write_seqlock\">write_seqlock</a>(<a class=\"id\" href=\"#lock\">lock</a>); } while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_sequnlock_irqrestore\">write_sequnlock_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do { <a class=\"id\" href=\"#write_sequnlock\">write_sequnlock</a>(<a class=\"id\" href=\"#lock\">lock</a>); <a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>); } while(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_sequnlock_irq\">write_sequnlock_irq</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do { <a class=\"id\" href=\"#write_sequnlock\">write_sequnlock</a>(<a class=\"id\" href=\"#lock\">lock</a>); <a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>(); } while(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_sequnlock_bh\">write_sequnlock_bh</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do { <a class=\"id\" href=\"#write_sequnlock\">write_sequnlock</a>(<a class=\"id\" href=\"#lock\">lock</a>); <a class=\"id\" href=\"#local_bh_enable\">local_bh_enable</a>(); } while(0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#read_seqbegin_irqsave\">read_seqbegin_irqsave</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>({ <a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);   <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(<a class=\"id\" href=\"#lock\">lock</a>); })", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#read_seqretry_irqrestore\">read_seqretry_irqrestore</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#iv\">iv</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#iv\">iv</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>})", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_SEQLOCK_H */</span>", 
];
xr_frag_insert('l/ef/deea2ecc85f5804695aaa6ffc0108f8d7352b2.xr', __xr_tmp);
