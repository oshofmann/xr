var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Xen time implementation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is implemented in terms of a clocksource driver which uses</span>", 
"<span class=\"comment\"> * the hypervisor clock as a nanosecond timebase, and a clockevent</span>", 
"<span class=\"comment\"> * driver which uses the hypervisor's timer mechanism.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Jeremy Fitzhardinge &lt;jeremy@xensource.com&gt;, XenSource Inc, 2007</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#clocksource\">clocksource</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#clockchips\">clockchips</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#math64\">math64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pvclock\">pvclock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#hypervisor\">hypervisor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#hypercall\">hypercall</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#events\">events</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#features\">features</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#xen\">xen</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#vcpu\">vcpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"xen-ops.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#XEN_SHIFT\">XEN_SHIFT</a> 22", 
"", 
"<span class=\"comment\">/* Xen may fire a timer up to this many ns early */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIMER_SLOP\">TIMER_SLOP</a><span class=\"ts\"/>100000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NS_PER_TICK\">NS_PER_TICK</a><span class=\"ts\"/>(1000000000LL / <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"", 
"<span class=\"comment\">/* runstate info updated by Xen */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#vcpu_runstate_info\">vcpu_runstate_info</a>, <a class=\"id\" href=\"#xen_runstate\">xen_runstate</a>);", 
"", 
"<span class=\"comment\">/* snapshots of runstate info */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#vcpu_runstate_info\">vcpu_runstate_info</a>, <a class=\"id\" href=\"#xen_runstate_snapshot\">xen_runstate_snapshot</a>);", 
"", 
"<span class=\"comment\">/* unused ns of stolen and blocked time */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#u64\">u64</a>, <a class=\"id\" href=\"#xen_residual_stolen\">xen_residual_stolen</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#u64\">u64</a>, <a class=\"id\" href=\"#xen_residual_blocked\">xen_residual_blocked</a>);", 
"", 
"<span class=\"comment\">/* return an consistent snapshot of 64-bit time/counter value */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#get64\">get64</a>(const <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> &lt; 64) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#p32\">p32</a> = (<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#l\">l</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Read high then low, and then make sure high is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * still the same; this will only loop if low wraps</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and carries into high.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * XXX some clean way to make this endian-proof?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#p32\">p32</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#p32\">p32</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#p32\">p32</a>[1] != <a class=\"id\" href=\"#h\">h</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#h\">h</a>) << 32) | <a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Runstate accounting</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#get_runstate_snapshot\">get_runstate_snapshot</a>(struct <a class=\"id\" href=\"#vcpu_runstate_info\">vcpu_runstate_info</a> *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#state_time\">state_time</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vcpu_runstate_info\">vcpu_runstate_info</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#preemptible\">preemptible</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#xen_runstate\">xen_runstate</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The runstate info is always updated by the hypervisor on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the current CPU, so there's no need to use anything</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stronger than a compiler barrier when fetching it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state_time\">state_time</a> = <a class=\"id\" href=\"#get64\">get64</a>(&amp;<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#state_entry_time\">state_entry_time</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#res\">res</a> = *<a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#get64\">get64</a>(&amp;<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#state_entry_time\">state_entry_time</a>) != <a class=\"id\" href=\"#state_time\">state_time</a>);", 
"}", 
"", 
"<span class=\"comment\">/* return true when a vcpu could run but has no real cpu to run on */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#xen_vcpu_stolen\">xen_vcpu_stolen</a>(int <a class=\"id\" href=\"#vcpu\">vcpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#xen_runstate\">xen_runstate</a>, <a class=\"id\" href=\"#vcpu\">vcpu</a>).<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#RUNSTATE_runnable\">RUNSTATE_runnable</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_setup_runstate_info\">xen_setup_runstate_info</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vcpu_register_runstate_memory_area\">vcpu_register_runstate_memory_area</a> <a class=\"id\" href=\"#area\">area</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>.<a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#v\">v</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#xen_runstate\">xen_runstate</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_vcpu_op\">HYPERVISOR_vcpu_op</a>(<a class=\"id\" href=\"#VCPUOP_register_runstate_memory_area\">VCPUOP_register_runstate_memory_area</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#area\">area</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#do_stolen_accounting\">do_stolen_accounting</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vcpu_runstate_info\">vcpu_runstate_info</a> <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vcpu_runstate_info\">vcpu_runstate_info</a> *<a class=\"id\" href=\"#snap\">snap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#blocked\">blocked</a>, <a class=\"id\" href=\"#runnable\">runnable</a>, <a class=\"id\" href=\"#offline\">offline</a>, <a class=\"id\" href=\"#stolen\">stolen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#ticks\">ticks</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_runstate_snapshot\">get_runstate_snapshot</a>(&amp;<a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#RUNSTATE_running\">RUNSTATE_running</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snap\">snap</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#xen_runstate_snapshot\">xen_runstate_snapshot</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* work out how much time the VCPU has not been runn*ing*  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocked\">blocked</a> = <a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#time\">time</a>[<a class=\"id\" href=\"#RUNSTATE_blocked\">RUNSTATE_blocked</a>] - <a class=\"id\" href=\"#snap\">snap</a>-><a class=\"id\" href=\"#time\">time</a>[<a class=\"id\" href=\"#RUNSTATE_blocked\">RUNSTATE_blocked</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#runnable\">runnable</a> = <a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#time\">time</a>[<a class=\"id\" href=\"#RUNSTATE_runnable\">RUNSTATE_runnable</a>] - <a class=\"id\" href=\"#snap\">snap</a>-><a class=\"id\" href=\"#time\">time</a>[<a class=\"id\" href=\"#RUNSTATE_runnable\">RUNSTATE_runnable</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offline\">offline</a> = <a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#time\">time</a>[<a class=\"id\" href=\"#RUNSTATE_offline\">RUNSTATE_offline</a>] - <a class=\"id\" href=\"#snap\">snap</a>-><a class=\"id\" href=\"#time\">time</a>[<a class=\"id\" href=\"#RUNSTATE_offline\">RUNSTATE_offline</a>];", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#snap\">snap</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add the appropriate number of ticks of stolen time,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   including any left-overs from last time. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stolen\">stolen</a> = <a class=\"id\" href=\"#runnable\">runnable</a> + <a class=\"id\" href=\"#offline\">offline</a> + <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#xen_residual_stolen\">xen_residual_stolen</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stolen\">stolen</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stolen\">stolen</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ticks\">ticks</a> = <a class=\"id\" href=\"#iter_div_u64_rem\">iter_div_u64_rem</a>(<a class=\"id\" href=\"#stolen\">stolen</a>, <a class=\"id\" href=\"#NS_PER_TICK\">NS_PER_TICK</a>, &amp;<a class=\"id\" href=\"#stolen\">stolen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#xen_residual_stolen\">xen_residual_stolen</a>) = <a class=\"id\" href=\"#stolen\">stolen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_steal_ticks\">account_steal_ticks</a>(<a class=\"id\" href=\"#ticks\">ticks</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add the appropriate number of ticks of blocked time,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   including any left-overs from last time. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocked\">blocked</a> += <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#xen_residual_blocked\">xen_residual_blocked</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blocked\">blocked</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocked\">blocked</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ticks\">ticks</a> = <a class=\"id\" href=\"#iter_div_u64_rem\">iter_div_u64_rem</a>(<a class=\"id\" href=\"#blocked\">blocked</a>, <a class=\"id\" href=\"#NS_PER_TICK\">NS_PER_TICK</a>, &amp;<a class=\"id\" href=\"#blocked\">blocked</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#xen_residual_blocked\">xen_residual_blocked</a>) = <a class=\"id\" href=\"#blocked\">blocked</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_idle_ticks\">account_idle_ticks</a>(<a class=\"id\" href=\"#ticks\">ticks</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Get the TSC speed from Xen */</span>", 
"static unsigned long <a class=\"id\" href=\"#xen_tsc_khz\">xen_tsc_khz</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pvclock_vcpu_time_info\">pvclock_vcpu_time_info</a> *<a class=\"id\" href=\"#info\">info</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#HYPERVISOR_shared_info\">HYPERVISOR_shared_info</a>-><a class=\"id\" href=\"#vcpu_info\">vcpu_info</a>[0].<a class=\"id\" href=\"#time\">time</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pvclock_tsc_khz\">pvclock_tsc_khz</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#xen_clocksource_read\">xen_clocksource_read</a>(void)", 
"{", 
"        struct <a class=\"id\" href=\"#pvclock_vcpu_time_info\">pvclock_vcpu_time_info</a> *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>)-><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pvclock_clocksource_read\">pvclock_clocksource_read</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#xen_clocksource_get_cycles\">xen_clocksource_get_cycles</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xen_clocksource_read\">xen_clocksource_read</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_read_wallclock\">xen_read_wallclock</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#shared_info\">shared_info</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#HYPERVISOR_shared_info\">HYPERVISOR_shared_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pvclock_wall_clock\">pvclock_wall_clock</a> *<a class=\"id\" href=\"#wall_clock\">wall_clock</a> = &amp;(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#wc\">wc</a>);", 
"        struct <a class=\"id\" href=\"#pvclock_vcpu_time_info\">pvclock_vcpu_time_info</a> *<a class=\"id\" href=\"#vcpu_time\">vcpu_time</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vcpu_time\">vcpu_time</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>)-><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pvclock_read_wallclock\">pvclock_read_wallclock</a>(<a class=\"id\" href=\"#wall_clock\">wall_clock</a>, <a class=\"id\" href=\"#vcpu_time\">vcpu_time</a>, <a class=\"id\" href=\"#ts\">ts</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>);", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#xen_get_wallclock\">xen_get_wallclock</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_read_wallclock\">xen_read_wallclock</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#xen_set_wallclock\">xen_set_wallclock</a>(unsigned long <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* do nothing for domU */</span>", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#clocksource\">clocksource</a> <a class=\"id\" href=\"#xen_clocksource\">xen_clocksource</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"xen\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rating\">rating</a> = 400,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#xen_clocksource_get_cycles\">xen_clocksource_get_cycles</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mask\">mask</a> = ~0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mult\">mult</a> = 1<<<a class=\"id\" href=\"#XEN_SHIFT\">XEN_SHIFT</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* time directly in nanoseconds */</span>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#XEN_SHIFT\">XEN_SHIFT</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#CLOCK_SOURCE_IS_CONTINUOUS\">CLOCK_SOURCE_IS_CONTINUOUS</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">   Xen clockevent implementation</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Xen has two clockevent implementations:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   The old timer_op one works with all released versions of Xen prior</span>", 
"<span class=\"comment\">   to version 3.0.4.  This version of the hypervisor provides a</span>", 
"<span class=\"comment\">   single-shot timer with nanosecond resolution.  However, sharing the</span>", 
"<span class=\"comment\">   same event channel is a 100Hz tick which is delivered while the</span>", 
"<span class=\"comment\">   vcpu is running.  We don't care about or use this tick, but it will</span>", 
"<span class=\"comment\">   cause the core time code to think the timer fired too soon, and</span>", 
"<span class=\"comment\">   will end up resetting it each time.  It could be filtered, but</span>", 
"<span class=\"comment\">   doing so has complications when the ktime clocksource is not yet</span>", 
"<span class=\"comment\">   the xen clocksource (ie, at boot time).</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   The new vcpu_op-based timer interface allows the tick timer period</span>", 
"<span class=\"comment\">   to be changed or turned off.  The tick timer is not useful as a</span>", 
"<span class=\"comment\">   periodic timer because events are only delivered to running vcpus.</span>", 
"<span class=\"comment\">   The one-shot timer can report when a timeout is in the past, so</span>", 
"<span class=\"comment\">   set_next_event is capable of returning -ETIME when appropriate.</span>", 
"<span class=\"comment\">   This interface is used when available.</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">  Get a hypervisor absolute time.  In theory we could maintain an</span>", 
"<span class=\"comment\">  offset between the kernel's time and the hypervisor's time, and</span>", 
"<span class=\"comment\">  apply that to a kernel's absolute timeout.  Unfortunately the</span>", 
"<span class=\"comment\">  hypervisor and kernel times can drift even if the kernel is using</span>", 
"<span class=\"comment\">  the Xen clocksource, because ntp can warp the kernel's clocksource.</span>", 
"<span class=\"comment\">*/</span>", 
"static <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#get_abs_timeout\">get_abs_timeout</a>(unsigned long <a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xen_clocksource_read\">xen_clocksource_read</a>() + <a class=\"id\" href=\"#delta\">delta</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_timerop_set_mode\">xen_timerop_set_mode</a>(enum <a class=\"id\" href=\"#clock_event_mode\">clock_event_mode</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#evt\">evt</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_PERIODIC\">CLOCK_EVT_MODE_PERIODIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unsupported */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_ONESHOT\">CLOCK_EVT_MODE_ONESHOT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_RESUME\">CLOCK_EVT_MODE_RESUME</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_UNUSED\">CLOCK_EVT_MODE_UNUSED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_SHUTDOWN\">CLOCK_EVT_MODE_SHUTDOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HYPERVISOR_set_timer_op\">HYPERVISOR_set_timer_op</a>(0);  <span class=\"comment\">/* cancel timeout */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#xen_timerop_set_next_event\">xen_timerop_set_next_event</a>(unsigned long <a class=\"id\" href=\"#delta\">delta</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#evt\">evt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#CLOCK_EVT_MODE_ONESHOT\">CLOCK_EVT_MODE_ONESHOT</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_set_timer_op\">HYPERVISOR_set_timer_op</a>(<a class=\"id\" href=\"#get_abs_timeout\">get_abs_timeout</a>(<a class=\"id\" href=\"#delta\">delta</a>)) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We may have missed the deadline, but there's no real way of</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   knowing for sure.  If the event was in the past, then we'll</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   get an immediate interrupt. */</span>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> <a class=\"id\" href=\"#xen_timerop_clockevent\">xen_timerop_clockevent</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"xen\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#features\">features</a> = <a class=\"id\" href=\"#CLOCK_EVT_FEAT_ONESHOT\">CLOCK_EVT_FEAT_ONESHOT</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#max_delta_ns\">max_delta_ns</a> = 0xffffffff,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#min_delta_ns\">min_delta_ns</a> = <a class=\"id\" href=\"#TIMER_SLOP\">TIMER_SLOP</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mult\">mult</a> = 1,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shift\">shift</a> = 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rating\">rating</a> = 500,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_mode\">set_mode</a> = <a class=\"id\" href=\"#xen_timerop_set_mode\">xen_timerop_set_mode</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_next_event\">set_next_event</a> = <a class=\"id\" href=\"#xen_timerop_set_next_event\">xen_timerop_set_next_event</a>,", 
"};", 
"", 
"", 
"", 
"static void <a class=\"id\" href=\"#xen_vcpuop_set_mode\">xen_vcpuop_set_mode</a>(enum <a class=\"id\" href=\"#clock_event_mode\">clock_event_mode</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#evt\">evt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_PERIODIC\">CLOCK_EVT_MODE_PERIODIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);<span class=\"ts\"/><span class=\"comment\">/* unsupported */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_ONESHOT\">CLOCK_EVT_MODE_ONESHOT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_vcpu_op\">HYPERVISOR_vcpu_op</a>(<a class=\"id\" href=\"#VCPUOP_stop_periodic_timer\">VCPUOP_stop_periodic_timer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_UNUSED\">CLOCK_EVT_MODE_UNUSED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_SHUTDOWN\">CLOCK_EVT_MODE_SHUTDOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_vcpu_op\">HYPERVISOR_vcpu_op</a>(<a class=\"id\" href=\"#VCPUOP_stop_singleshot_timer\">VCPUOP_stop_singleshot_timer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#NULL\">NULL</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#HYPERVISOR_vcpu_op\">HYPERVISOR_vcpu_op</a>(<a class=\"id\" href=\"#VCPUOP_stop_periodic_timer\">VCPUOP_stop_periodic_timer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CLOCK_EVT_MODE_RESUME\">CLOCK_EVT_MODE_RESUME</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#xen_vcpuop_set_next_event\">xen_vcpuop_set_next_event</a>(unsigned long <a class=\"id\" href=\"#delta\">delta</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#evt\">evt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vcpu_set_singleshot_timer\">vcpu_set_singleshot_timer</a> <a class=\"id\" href=\"#single\">single</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#CLOCK_EVT_MODE_ONESHOT\">CLOCK_EVT_MODE_ONESHOT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#single\">single</a>.<a class=\"id\" href=\"#timeout_abs_ns\">timeout_abs_ns</a> = <a class=\"id\" href=\"#get_abs_timeout\">get_abs_timeout</a>(<a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#single\">single</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#VCPU_SSHOTTMR_future\">VCPU_SSHOTTMR_future</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#HYPERVISOR_vcpu_op\">HYPERVISOR_vcpu_op</a>(<a class=\"id\" href=\"#VCPUOP_set_singleshot_timer\">VCPUOP_set_singleshot_timer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#single\">single</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a> != 0 && <a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#ETIME\">ETIME</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> <a class=\"id\" href=\"#xen_vcpuop_clockevent\">xen_vcpuop_clockevent</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"xen\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#features\">features</a> = <a class=\"id\" href=\"#CLOCK_EVT_FEAT_ONESHOT\">CLOCK_EVT_FEAT_ONESHOT</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#max_delta_ns\">max_delta_ns</a> = 0xffffffff,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#min_delta_ns\">min_delta_ns</a> = <a class=\"id\" href=\"#TIMER_SLOP\">TIMER_SLOP</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mult\">mult</a> = 1,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shift\">shift</a> = 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rating\">rating</a> = 500,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_mode\">set_mode</a> = <a class=\"id\" href=\"#xen_vcpuop_set_mode\">xen_vcpuop_set_mode</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_next_event\">set_next_event</a> = <a class=\"id\" href=\"#xen_vcpuop_set_next_event\">xen_vcpuop_set_next_event</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#xen_clockevent\">xen_clockevent</a> =", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#xen_timerop_clockevent\">xen_timerop_clockevent</a>;", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a>, <a class=\"id\" href=\"#xen_clock_events\">xen_clock_events</a>);", 
"", 
"static <a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#xen_timer_interrupt\">xen_timer_interrupt</a>(int <a class=\"id\" href=\"#irq\">irq</a>, void *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#evt\">evt</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#xen_clock_events\">xen_clock_events</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#IRQ_NONE\">IRQ_NONE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#event_handler\">event_handler</a>(<a class=\"id\" href=\"#evt\">evt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#IRQ_HANDLED\">IRQ_HANDLED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_stolen_accounting\">do_stolen_accounting</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_setup_timer\">xen_setup_timer</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#evt\">evt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#irq\">irq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"installing Xen timer for CPU %d\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kasprintf\">kasprintf</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, \"timer%d\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = \"<timer kasprintf failed>\";", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#bind_virq_to_irqhandler\">bind_virq_to_irqhandler</a>(<a class=\"id\" href=\"#VIRQ_TIMER\">VIRQ_TIMER</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#xen_timer_interrupt\">xen_timer_interrupt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IRQF_DISABLED\">IRQF_DISABLED</a>|<a class=\"id\" href=\"#IRQF_PERCPU\">IRQF_PERCPU</a>|<a class=\"id\" href=\"#IRQF_NOBALANCING\">IRQF_NOBALANCING</a>|<a class=\"id\" href=\"#IRQF_TIMER\">IRQF_TIMER</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#evt\">evt</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#xen_clock_events\">xen_clock_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#evt\">evt</a>, <a class=\"id\" href=\"#xen_clockevent\">xen_clockevent</a>, sizeof(*<a class=\"id\" href=\"#evt\">evt</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a> = <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#irq\">irq</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_teardown_timer\">xen_teardown_timer</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#evt\">evt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu\">cpu</a> == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#evt\">evt</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#xen_clock_events\">xen_clock_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unbind_from_irqhandler\">unbind_from_irqhandler</a>(<a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_setup_cpu_clockevents\">xen_setup_cpu_clockevents</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#preemptible\">preemptible</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clockevents_register_device\">clockevents_register_device</a>(&amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#xen_clock_events\">xen_clock_events</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_timer_resume\">xen_timer_resume</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_clockevent\">xen_clockevent</a> != &amp;<a class=\"id\" href=\"#xen_vcpuop_clockevent\">xen_vcpuop_clockevent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_vcpu_op\">HYPERVISOR_vcpu_op</a>(<a class=\"id\" href=\"#VCPUOP_stop_periodic_timer\">VCPUOP_stop_periodic_timer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#pv_time_ops\">pv_time_ops</a> <a class=\"id\" href=\"#xen_time_ops\">xen_time_ops</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sched_clock\">sched_clock</a> = <a class=\"id\" href=\"#xen_clocksource_read\">xen_clocksource_read</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#xen_time_init\">xen_time_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#tp\">tp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_register\">clocksource_register</a>(&amp;<a class=\"id\" href=\"#xen_clocksource\">xen_clocksource</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_vcpu_op\">HYPERVISOR_vcpu_op</a>(<a class=\"id\" href=\"#VCPUOP_stop_periodic_timer\">VCPUOP_stop_periodic_timer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#NULL\">NULL</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Successfully turned off 100Hz tick, so we have the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   vcpuop-based timer interface */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"Xen: using vcpuop timer interface\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_clockevent\">xen_clockevent</a> = &amp;<a class=\"id\" href=\"#xen_vcpuop_clockevent\">xen_vcpuop_clockevent</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set initial system time with full resolution */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_read_wallclock\">xen_read_wallclock</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_settimeofday\">do_settimeofday</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_force_cpu_cap\">setup_force_cpu_cap</a>(<a class=\"id\" href=\"#X86_FEATURE_TSC\">X86_FEATURE_TSC</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_setup_runstate_info\">xen_setup_runstate_info</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_setup_timer\">xen_setup_timer</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_setup_cpu_clockevents\">xen_setup_cpu_clockevents</a>();", 
"}", 
"", 
"<a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#xen_init_time_ops\">xen_init_time_ops</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_time_ops\">pv_time_ops</a> = <a class=\"id\" href=\"#xen_time_ops\">xen_time_ops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#timers\">timers</a>.<a class=\"id\" href=\"#timer_init\">timer_init</a> = <a class=\"id\" href=\"#xen_time_init\">xen_time_init</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#timers\">timers</a>.<a class=\"id\" href=\"#setup_percpu_clockev\">setup_percpu_clockev</a> = <a class=\"id\" href=\"#x86_init_noop\">x86_init_noop</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_cpuinit\">x86_cpuinit</a>.<a class=\"id\" href=\"#setup_percpu_clockev\">setup_percpu_clockev</a> = <a class=\"id\" href=\"#x86_init_noop\">x86_init_noop</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#calibrate_tsc\">calibrate_tsc</a> = <a class=\"id\" href=\"#xen_tsc_khz\">xen_tsc_khz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#get_wallclock\">get_wallclock</a> = <a class=\"id\" href=\"#xen_get_wallclock\">xen_get_wallclock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#set_wallclock\">set_wallclock</a> = <a class=\"id\" href=\"#xen_set_wallclock\">xen_set_wallclock</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_XEN_PVHVM\">CONFIG_XEN_PVHVM</a>", 
"static void <a class=\"id\" href=\"#xen_hvm_setup_cpu_clockevents\">xen_hvm_setup_cpu_clockevents</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_setup_runstate_info\">xen_setup_runstate_info</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_setup_timer\">xen_setup_timer</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_setup_cpu_clockevents\">xen_setup_cpu_clockevents</a>();", 
"}", 
"", 
"<a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#xen_hvm_init_time_ops\">xen_hvm_init_time_ops</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* vector callback is needed otherwise we cannot receive interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on cpu &gt; 0 and at this point we don't know how many cpus are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * available */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#xen_have_vector_callback\">xen_have_vector_callback</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#xen_feature\">xen_feature</a>(<a class=\"id\" href=\"#XENFEAT_hvm_safe_pvclock\">XENFEAT_hvm_safe_pvclock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Xen doesn't support pvclock on HVM,\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"disable pv timer\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_time_ops\">pv_time_ops</a> = <a class=\"id\" href=\"#xen_time_ops\">xen_time_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#timers\">timers</a>.<a class=\"id\" href=\"#setup_percpu_clockev\">setup_percpu_clockev</a> = <a class=\"id\" href=\"#xen_time_init\">xen_time_init</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_cpuinit\">x86_cpuinit</a>.<a class=\"id\" href=\"#setup_percpu_clockev\">setup_percpu_clockev</a> = <a class=\"id\" href=\"#xen_hvm_setup_cpu_clockevents\">xen_hvm_setup_cpu_clockevents</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#calibrate_tsc\">calibrate_tsc</a> = <a class=\"id\" href=\"#xen_tsc_khz\">xen_tsc_khz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#get_wallclock\">get_wallclock</a> = <a class=\"id\" href=\"#xen_get_wallclock\">xen_get_wallclock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#set_wallclock\">set_wallclock</a> = <a class=\"id\" href=\"#xen_set_wallclock\">xen_set_wallclock</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/f0/734b6e7211dd29d95c7618bfa4cf3b0512e620.xr', __xr_tmp);
