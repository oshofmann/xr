var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic VM initialization for x86-64 NUMA setups.</span>", 
"<span class=\"comment\"> * Copyright 2002,2003 Andi Kleen, SuSE Labs.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmzone\">mmzone</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nodemask\">nodemask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#dma\">dma</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#numa\">numa</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#k8\">k8</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#pglist_data\">pglist_data</a> *<a class=\"id\" href=\"#node_data\">node_data</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#node_data\">node_data</a>);", 
"", 
"struct <a class=\"id\" href=\"#memnode\">memnode</a> <a class=\"id\" href=\"#memnode\">memnode</a>;", 
"", 
"<a class=\"id\" href=\"#s16\">s16</a> <a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#MAX_LOCAL_APIC\">MAX_LOCAL_APIC</a>] <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> = {", 
"<span class=\"ts\"/>[0 ... <a class=\"id\" href=\"#MAX_LOCAL_APIC\">MAX_LOCAL_APIC</a>-1] = <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>", 
"};", 
"", 
"int <a class=\"id\" href=\"#numa_off\">numa_off</a> <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static unsigned long <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#nodemap_addr\">nodemap_addr</a>;", 
"static unsigned long <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#nodemap_size\">nodemap_size</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map cpu index to node index</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_EARLY_PER_CPU\">DEFINE_EARLY_PER_CPU</a>(int, <a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>, <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>);", 
"<a class=\"id\" href=\"#EXPORT_EARLY_PER_CPU_SYMBOL\">EXPORT_EARLY_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Given a shift value, try to populate memnodemap[]</span>", 
"<span class=\"comment\"> * Returns :</span>", 
"<span class=\"comment\"> * 1 if OK</span>", 
"<span class=\"comment\"> * 0 if memnodmap[] too small (of shift too small)</span>", 
"<span class=\"comment\"> * -1 if node overlap or lost ram (shift too big)</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#populate_memnodemap\">populate_memnodemap</a>(const struct <a class=\"id\" href=\"#bootnode\">bootnode</a> *<a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#numnodes\">numnodes</a>, int <a class=\"id\" href=\"#shift\">shift</a>, int *<a class=\"id\" href=\"#nodeids\">nodeids</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#res\">res</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#memnodemap\">memnodemap</a>, 0xff, sizeof(<a class=\"id\" href=\"#s16\">s16</a>)*<a class=\"id\" href=\"#memnodemapsize\">memnodemapsize</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#numnodes\">numnodes</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#end\">end</a> >> <a class=\"id\" href=\"#shift\">shift</a>) >= <a class=\"id\" href=\"#memnodemapsize\">memnodemapsize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memnodemap\">memnodemap</a>[<a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#shift\">shift</a>] != <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodeids\">nodeids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memnodemap\">memnodemap</a>[<a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#shift\">shift</a>] = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memnodemap\">memnodemap</a>[<a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#shift\">shift</a>] = <a class=\"id\" href=\"#nodeids\">nodeids</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += (1UL << <a class=\"id\" href=\"#shift\">shift</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#allocate_cachealigned_memnodemap\">allocate_cachealigned_memnodemap</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memnodemap\">memnodemap</a> = <a class=\"id\" href=\"#memnode\">memnode</a>.<a class=\"id\" href=\"#embedded_map\">embedded_map</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memnodemapsize\">memnodemapsize</a> <= <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#memnode\">memnode</a>.<a class=\"id\" href=\"#embedded_map\">embedded_map</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = 0x8000;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemap_size\">nodemap_size</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(sizeof(<a class=\"id\" href=\"#s16\">s16</a>) * <a class=\"id\" href=\"#memnodemapsize\">memnodemapsize</a>, <a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemap_addr\">nodemap_addr</a> = <a class=\"id\" href=\"#find_e820_area\">find_e820_area</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#max_pfn\">max_pfn</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#nodemap_size\">nodemap_size</a>, <a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodemap_addr\">nodemap_addr</a> == -1UL) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"NUMA: Unable to allocate Memory to Node hash map\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemap_addr\">nodemap_addr</a> = <a class=\"id\" href=\"#nodemap_size\">nodemap_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memnodemap\">memnodemap</a> = <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#nodemap_addr\">nodemap_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reserve_early\">reserve_early</a>(<a class=\"id\" href=\"#nodemap_addr\">nodemap_addr</a>, <a class=\"id\" href=\"#nodemap_addr\">nodemap_addr</a> + <a class=\"id\" href=\"#nodemap_size\">nodemap_size</a>, \"MEMNODEMAP\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"NUMA: Allocated memnodemap from %lx - %lx\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#nodemap_addr\">nodemap_addr</a>, <a class=\"id\" href=\"#nodemap_addr\">nodemap_addr</a> + <a class=\"id\" href=\"#nodemap_size\">nodemap_size</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The LSB of all start and end addresses in the node map is the value of the</span>", 
"<span class=\"comment\"> * maximum possible shift.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#extract_lsb_from_nodes\">extract_lsb_from_nodes</a>(const struct <a class=\"id\" href=\"#bootnode\">bootnode</a> *<a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#numnodes\">numnodes</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nodes_used\">nodes_used</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bitfield\">bitfield</a> = 0, <a class=\"id\" href=\"#memtop\">memtop</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#numnodes\">numnodes</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitfield\">bitfield</a> |= <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_used\">nodes_used</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#memtop\">memtop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memtop\">memtop</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodes_used\">nodes_used</a> <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 63;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>(&amp;<a class=\"id\" href=\"#bitfield\">bitfield</a>, sizeof(unsigned long)*8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memnodemapsize\">memnodemapsize</a> = (<a class=\"id\" href=\"#memtop\">memtop</a> >> <a class=\"id\" href=\"#i\">i</a>)+1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#compute_hash_shift\">compute_hash_shift</a>(struct <a class=\"id\" href=\"#bootnode\">bootnode</a> *<a class=\"id\" href=\"#nodes\">nodes</a>, int <a class=\"id\" href=\"#numnodes\">numnodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int *<a class=\"id\" href=\"#nodeids\">nodeids</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shift\">shift</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#extract_lsb_from_nodes\">extract_lsb_from_nodes</a>(<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#numnodes\">numnodes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#allocate_cachealigned_memnodemap\">allocate_cachealigned_memnodemap</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"NUMA: Using %d for the hash shift.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#populate_memnodemap\">populate_memnodemap</a>(<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#numnodes\">numnodes</a>, <a class=\"id\" href=\"#shift\">shift</a>, <a class=\"id\" href=\"#nodeids\">nodeids</a>) != 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Your memory is not aligned you need to \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"rebuild your kernel with a bigger NODEMAPSIZE \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"shift=%d\\n\", <a class=\"id\" href=\"#shift\">shift</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#shift\">shift</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__meminit\">__meminit</a>  <a class=\"id\" href=\"#__early_pfn_to_nid\">__early_pfn_to_nid</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#phys_to_nid\">phys_to_nid</a>(<a class=\"id\" href=\"#pfn\">pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"", 
"static void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_node_mem\">early_node_mem</a>(int <a class=\"id\" href=\"#nodeid\">nodeid</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#end\">end</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mem\">mem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * put it on high as possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * something will go with NODE_DATA</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; (<a class=\"id\" href=\"#MAX_DMA_PFN\">MAX_DMA_PFN</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#MAX_DMA_PFN\">MAX_DMA_PFN</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; (<a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#end\">end</a> &gt; (<a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#find_e820_area\">find_e820_area</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a> != -1L)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* extend the search scope */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#max_pfn_mapped\">max_pfn_mapped</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; (<a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#MAX_DMA_PFN\">MAX_DMA_PFN</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#find_e820_area\">find_e820_area</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a> != -1L)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Cannot find %lu bytes in node %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Initialize bootmem allocator for a node */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#setup_node_bootmem\">setup_node_bootmem</a>(int <a class=\"id\" href=\"#nodeid\">nodeid</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#last_pfn\">last_pfn</a>, <a class=\"id\" href=\"#nodedata_phys\">nodedata_phys</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#pgdat_size\">pgdat_size</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(sizeof(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a>), <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bootmap_start\">bootmap_start</a>, <a class=\"id\" href=\"#bootmap_pages\">bootmap_pages</a>, <a class=\"id\" href=\"#bootmap_size\">bootmap_size</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#bootmap\">bootmap</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't confuse VM with a node that doesn't have the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * minimum amount of memory:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> && (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>) &lt; <a class=\"id\" href=\"#NODE_MIN_SIZE\">NODE_MIN_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#ZONE_ALIGN\">ZONE_ALIGN</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Initmem setup node %d %016lx-%016lx\\n\", <a class=\"id\" href=\"#nodeid\">nodeid</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_pfn\">last_pfn</a> = <a class=\"id\" href=\"#end\">end</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_data\">node_data</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>] = <a class=\"id\" href=\"#early_node_mem\">early_node_mem</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#pgdat_size\">pgdat_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#SMP_CACHE_BYTES\">SMP_CACHE_BYTES</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node_data\">node_data</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>] == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodedata_phys\">nodedata_phys</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#node_data\">node_data</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reserve_early\">reserve_early</a>(<a class=\"id\" href=\"#nodedata_phys\">nodedata_phys</a>, <a class=\"id\" href=\"#nodedata_phys\">nodedata_phys</a> + <a class=\"id\" href=\"#pgdat_size\">pgdat_size</a>, \"NODE_DATA\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"  NODE_DATA [%016lx - %016lx]\\n\", <a class=\"id\" href=\"#nodedata_phys\">nodedata_phys</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodedata_phys\">nodedata_phys</a> + <a class=\"id\" href=\"#pgdat_size\">pgdat_size</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#phys_to_nid\">phys_to_nid</a>(<a class=\"id\" href=\"#nodedata_phys\">nodedata_phys</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nid\">nid</a> != <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"    NODE_DATA(%d) on node %d\\n\", <a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>), 0, sizeof(<a class=\"id\" href=\"#pg_data_t\">pg_data_t</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>)-><a class=\"id\" href=\"#node_id\">node_id</a> = <a class=\"id\" href=\"#nodeid\">nodeid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>)-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>)-><a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a> = <a class=\"id\" href=\"#last_pfn\">last_pfn</a> - <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>)-><a class=\"id\" href=\"#bdata\">bdata</a> = &amp;<a class=\"id\" href=\"#bootmem_node_data\">bootmem_node_data</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find a place for the bootmem map</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nodedata_phys could be on other nodes by alloc_bootmem,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so need to sure bootmap_start not to be small, otherwise</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * early_node_mem will get that with find_e820_area instead</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of alloc_bootmem, that could clash with reserved range</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bootmap_pages\">bootmap_pages</a> = <a class=\"id\" href=\"#bootmem_bootmap_pages\">bootmem_bootmap_pages</a>(<a class=\"id\" href=\"#last_pfn\">last_pfn</a> - <a class=\"id\" href=\"#start_pfn\">start_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bootmap_start\">bootmap_start</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#nodedata_phys\">nodedata_phys</a> + <a class=\"id\" href=\"#pgdat_size\">pgdat_size</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SMP_CACHE_BYTES could be enough, but init_bootmem_node like</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to use that to align to PAGE_SIZE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bootmap\">bootmap</a> = <a class=\"id\" href=\"#early_node_mem\">early_node_mem</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#bootmap_start\">bootmap_start</a>, <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bootmap_pages\">bootmap_pages</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bootmap\">bootmap</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)  {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_early\">free_early</a>(<a class=\"id\" href=\"#nodedata_phys\">nodedata_phys</a>, <a class=\"id\" href=\"#nodedata_phys\">nodedata_phys</a> + <a class=\"id\" href=\"#pgdat_size\">pgdat_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_data\">node_data</a>[<a class=\"id\" href=\"#nodeid\">nodeid</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bootmap_start\">bootmap_start</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#bootmap\">bootmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reserve_early\">reserve_early</a>(<a class=\"id\" href=\"#bootmap_start\">bootmap_start</a>, <a class=\"id\" href=\"#bootmap_start\">bootmap_start</a>+(<a class=\"id\" href=\"#bootmap_pages\">bootmap_pages</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"BOOTMAP\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bootmap_size\">bootmap_size</a> = <a class=\"id\" href=\"#init_bootmem_node\">init_bootmem_node</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bootmap_start\">bootmap_start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#last_pfn\">last_pfn</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"  bootmap [%016lx -  %016lx] pages %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bootmap_start\">bootmap_start</a>, <a class=\"id\" href=\"#bootmap_start\">bootmap_start</a> + <a class=\"id\" href=\"#bootmap_size\">bootmap_size</a> - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bootmap_pages\">bootmap_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#phys_to_nid\">phys_to_nid</a>(<a class=\"id\" href=\"#bootmap_start\">bootmap_start</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nid\">nid</a> != <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"    bootmap(%d) on node %d\\n\", <a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem_with_active_regions\">free_bootmem_with_active_regions</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set_online\">node_set_online</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * There are unfortunately some poorly designed mainboards around that</span>", 
"<span class=\"comment\"> * only connect memory to a single CPU. This breaks the 1:1 cpu-&gt;node</span>", 
"<span class=\"comment\"> * mapping. To avoid this fill in the mapping for all possible CPUs,</span>", 
"<span class=\"comment\"> * as the number of CPUs is not known yet. We round robin the existing</span>", 
"<span class=\"comment\"> * nodes.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#numa_init_array\">numa_init_array</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rr\">rr</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rr\">rr</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#i\">i</a>) != <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numa_set_node\">numa_set_node</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rr\">rr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rr\">rr</a> = <a class=\"id\" href=\"#next_node\">next_node</a>(<a class=\"id\" href=\"#rr\">rr</a>, <a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rr\">rr</a> == <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rr\">rr</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA_EMU\">CONFIG_NUMA_EMU</a>", 
"<span class=\"comment\">/* Numa emulation */</span>", 
"static struct <a class=\"id\" href=\"#bootnode\">bootnode</a> <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static struct <a class=\"id\" href=\"#bootnode\">bootnode</a> <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static char *<a class=\"id\" href=\"#cmdline\">cmdline</a> <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_physnodes\">setup_physnodes</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#acpi\">acpi</a>, int <a class=\"id\" href=\"#k8\">k8</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_nodes\">nr_nodes</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ACPI_NUMA\">CONFIG_ACPI_NUMA</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi\">acpi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_nodes\">nr_nodes</a> = <a class=\"id\" href=\"#acpi_get_nodes\">acpi_get_nodes</a>(<a class=\"id\" href=\"#physnodes\">physnodes</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_K8_NUMA\">CONFIG_K8_NUMA</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k8\">k8</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_nodes\">nr_nodes</a> = <a class=\"id\" href=\"#k8_get_nodes\">k8_get_nodes</a>(<a class=\"id\" href=\"#physnodes\">physnodes</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Basic sanity checking on the physical node map: there may be errors</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the SRAT or K8 incorrectly reported the topology or the mem=</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernel parameter is used.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_nodes\">nr_nodes</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Remove all nodes that have no memory or were truncated because of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * limited address range.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_nodes\">nr_nodes</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#ret\">ret</a>].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#ret\">ret</a>].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If no physical topology was detected, a single node is faked to cover</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the entire address space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#ret\">ret</a>].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#ret\">ret</a>].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setups up nid to range from addr to addr + size.  If the end</span>", 
"<span class=\"comment\"> * boundary is greater than max_addr, then max_addr is used instead.</span>", 
"<span class=\"comment\"> * The return value is 0 if there is additional memory left for</span>", 
"<span class=\"comment\"> * allocation past addr and -1 otherwise.  addr is adjusted to be at</span>", 
"<span class=\"comment\"> * the end of the node.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_node_range\">setup_node_range</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#max_addr\">max_addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#nid\">nid</a>].<a class=\"id\" href=\"#start\">start</a> = *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#max_addr\">max_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#max_addr\">max_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#nid\">nid</a>].<a class=\"id\" href=\"#end\">end</a> = *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Faking node %d at %016Lx-%016Lx (%LuMB)\\n\", <a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#nid\">nid</a>].<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#nid\">nid</a>].<a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#nid\">nid</a>].<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#nid\">nid</a>].<a class=\"id\" href=\"#start\">start</a>) >> 20);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sets up nr_nodes fake nodes interleaved over physical nodes ranging from addr</span>", 
"<span class=\"comment\"> * to max_addr.  The return value is the number of nodes allocated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#split_nodes_interleave\">split_nodes_interleave</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#max_addr\">max_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_phys_nodes\">nr_phys_nodes</a>, int <a class=\"id\" href=\"#nr_nodes\">nr_nodes</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#physnode_mask\">physnode_mask</a> = <a class=\"id\" href=\"#NODE_MASK_NONE\">NODE_MASK_NONE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#big\">big</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_nodes\">nr_nodes</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_nodes\">nr_nodes</a> &gt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"numa=fake=%d too large, reducing to %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_nodes\">nr_nodes</a>, <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_nodes\">nr_nodes</a> = <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = (<a class=\"id\" href=\"#max_addr\">max_addr</a> - <a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#e820_hole_size\">e820_hole_size</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#max_addr\">max_addr</a>)) / <a class=\"id\" href=\"#nr_nodes\">nr_nodes</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Calculate the number of big nodes that can be allocated as a result</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of consolidating the remainder.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#big\">big</a> = ((<a class=\"id\" href=\"#size\">size</a> &amp; ~<a class=\"id\" href=\"#FAKE_NODE_MIN_HASH_MASK\">FAKE_NODE_MIN_HASH_MASK</a>) * <a class=\"id\" href=\"#nr_nodes\">nr_nodes</a>) /", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FAKE_NODE_MIN_SIZE\">FAKE_NODE_MIN_SIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> &= <a class=\"id\" href=\"#FAKE_NODE_MIN_HASH_MASK\">FAKE_NODE_MIN_HASH_MASK</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"Not enough memory for each node.  \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"NUMA emulation disabled.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_phys_nodes\">nr_phys_nodes</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> != <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#physnode_mask\">physnode_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Continue to fill physical nodes with fake nodes until there is no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * memory left on any of them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nodes_weight\">nodes_weight</a>(<a class=\"id\" href=\"#physnode_mask\">physnode_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#physnode_mask\">physnode_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dma32_end\">dma32_end</a> = <a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; <a class=\"id\" href=\"#big\">big</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> += <a class=\"id\" href=\"#FAKE_NODE_MIN_SIZE\">FAKE_NODE_MIN_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Continue to add memory to this fake node if its</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * non-reserved memory is less than the per-node size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e820_hole_size\">e820_hole_size</a>(<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>) &lt; <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> += <a class=\"id\" href=\"#FAKE_NODE_MIN_SIZE\">FAKE_NODE_MIN_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If there won't be at least FAKE_NODE_MIN_SIZE of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * non-reserved memory in ZONE_DMA32 for the next node,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * this one must extend to the boundary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#dma32_end\">dma32_end</a> && <a class=\"id\" href=\"#dma32_end\">dma32_end</a> - <a class=\"id\" href=\"#end\">end</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#e820_hole_size\">e820_hole_size</a>(<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#dma32_end\">dma32_end</a>) &lt; <a class=\"id\" href=\"#FAKE_NODE_MIN_SIZE\">FAKE_NODE_MIN_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#dma32_end\">dma32_end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If there won't be enough non-reserved memory for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * next node, this one must extend to the end of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * physical node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#end\">end</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#e820_hole_size\">e820_hole_size</a>(<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>) &lt; <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Avoid allocating more nodes than requested, which can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * happen as a result of rounding down each node's size</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to FAKE_NODE_MIN_SIZE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nodes_weight\">nodes_weight</a>(<a class=\"id\" href=\"#physnode_mask\">physnode_mask</a>) + <a class=\"id\" href=\"#ret\">ret</a> >= <a class=\"id\" href=\"#nr_nodes\">nr_nodes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#setup_node_range\">setup_node_range</a>(<a class=\"id\" href=\"#ret\">ret</a>++, &amp;<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_clear\">node_clear</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#physnode_mask\">physnode_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns the end address of a node so that there is at least `size' amount of</span>", 
"<span class=\"comment\"> * non-reserved memory or `max_addr' is reached.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#find_end_of_node\">find_end_of_node</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#max_addr\">max_addr</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#e820_hole_size\">e820_hole_size</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>) &lt; <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> += <a class=\"id\" href=\"#FAKE_NODE_MIN_SIZE\">FAKE_NODE_MIN_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#max_addr\">max_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#max_addr\">max_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#end\">end</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sets up fake nodes of `size' interleaved over physical nodes ranging from</span>", 
"<span class=\"comment\"> * `addr' to `max_addr'.  The return value is the number of nodes allocated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#split_nodes_size_interleave\">split_nodes_size_interleave</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#max_addr\">max_addr</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#physnode_mask\">physnode_mask</a> = <a class=\"id\" href=\"#NODE_MASK_NONE\">NODE_MASK_NONE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#min_size\">min_size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The limit on emulated nodes is MAX_NUMNODES, so the size per node is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * increased accordingly if the requested size is too small.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * creates a uniform distribution of node sizes across the entire</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * machine (but not necessarily over physical nodes).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_size\">min_size</a> = (<a class=\"id\" href=\"#max_addr\">max_addr</a> - <a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#e820_hole_size\">e820_hole_size</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#max_addr\">max_addr</a>)) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_size\">min_size</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#min_size\">min_size</a>, <a class=\"id\" href=\"#FAKE_NODE_MIN_SIZE\">FAKE_NODE_MIN_SIZE</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#min_size\">min_size</a> &amp; <a class=\"id\" href=\"#FAKE_NODE_MIN_HASH_MASK\">FAKE_NODE_MIN_HASH_MASK</a>) &lt; <a class=\"id\" href=\"#min_size\">min_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_size\">min_size</a> = (<a class=\"id\" href=\"#min_size\">min_size</a> + <a class=\"id\" href=\"#FAKE_NODE_MIN_SIZE\">FAKE_NODE_MIN_SIZE</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FAKE_NODE_MIN_HASH_MASK\">FAKE_NODE_MIN_HASH_MASK</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#min_size\">min_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"Fake node size %LuMB too small, increasing to %LuMB\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> >> 20, <a class=\"id\" href=\"#min_size\">min_size</a> >> 20);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#min_size\">min_size</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> &= <a class=\"id\" href=\"#FAKE_NODE_MIN_HASH_MASK\">FAKE_NODE_MIN_HASH_MASK</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> != <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#physnode_mask\">physnode_mask</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fill physical nodes with fake nodes of size until there is no memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * left on any of them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nodes_weight\">nodes_weight</a>(<a class=\"id\" href=\"#physnode_mask\">physnode_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#physnode_mask\">physnode_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dma32_end\">dma32_end</a> = <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#find_end_of_node\">find_end_of_node</a>(<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If there won't be at least FAKE_NODE_MIN_SIZE of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * non-reserved memory in ZONE_DMA32 for the next node,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * this one must extend to the boundary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#dma32_end\">dma32_end</a> && <a class=\"id\" href=\"#dma32_end\">dma32_end</a> - <a class=\"id\" href=\"#end\">end</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#e820_hole_size\">e820_hole_size</a>(<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#dma32_end\">dma32_end</a>) &lt; <a class=\"id\" href=\"#FAKE_NODE_MIN_SIZE\">FAKE_NODE_MIN_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#dma32_end\">dma32_end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If there won't be enough non-reserved memory for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * next node, this one must extend to the end of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * physical node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#end\">end</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#e820_hole_size\">e820_hole_size</a>(<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>) &lt; <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Setup the fake node that will be allocated as bootmem</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * later.  If setup_node_range() returns non-zero, there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is no more memory available on this physical node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#setup_node_range\">setup_node_range</a>(<a class=\"id\" href=\"#ret\">ret</a>++, &amp;<a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_clear\">node_clear</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#physnode_mask\">physnode_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sets up the system RAM area from start_pfn to last_pfn according to the</span>", 
"<span class=\"comment\"> * numa=fake command-line option.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#numa_emulation\">numa_emulation</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#last_pfn\">last_pfn</a>, int <a class=\"id\" href=\"#acpi\">acpi</a>, int <a class=\"id\" href=\"#k8\">k8</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#max_addr\">max_addr</a> = <a class=\"id\" href=\"#last_pfn\">last_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_phys_nodes\">num_phys_nodes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_nodes\">num_nodes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_phys_nodes\">num_phys_nodes</a> = <a class=\"id\" href=\"#setup_physnodes\">setup_physnodes</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#max_addr\">max_addr</a>, <a class=\"id\" href=\"#acpi\">acpi</a>, <a class=\"id\" href=\"#k8\">k8</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the numa=fake command-line contains a 'M' or 'G', it represents</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the fixed node size.  Otherwise, if it is just a single number N,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * split the system RAM into N fake nodes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#cmdline\">cmdline</a>, 'M') || <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#cmdline\">cmdline</a>, 'G')) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#cmdline\">cmdline</a>, &amp;<a class=\"id\" href=\"#cmdline\">cmdline</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_nodes\">num_nodes</a> = <a class=\"id\" href=\"#split_nodes_size_interleave\">split_nodes_size_interleave</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#max_addr\">max_addr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#cmdline\">cmdline</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_nodes\">num_nodes</a> = <a class=\"id\" href=\"#split_nodes_interleave\">split_nodes_interleave</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#max_addr\">max_addr</a>, <a class=\"id\" href=\"#num_phys_nodes\">num_phys_nodes</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_nodes\">num_nodes</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#num_nodes\">num_nodes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memnode_shift\">memnode_shift</a> = <a class=\"id\" href=\"#compute_hash_shift\">compute_hash_shift</a>(<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#num_nodes\">num_nodes</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memnode_shift\">memnode_shift</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memnode_shift\">memnode_shift</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"No NUMA hash function found.  NUMA emulation \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"disabled.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to vacate all active ranges that may have been registered for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the e820 memory map.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_all_active_ranges\">remove_all_active_ranges</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e820_register_active_regions\">e820_register_active_regions</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_node_bootmem\">setup_node_bootmem</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_fake_nodes\">acpi_fake_nodes</a>(<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#num_nodes\">num_nodes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_init_array\">numa_init_array</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA_EMU */</span>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#initmem_init\">initmem_init</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#last_pfn\">last_pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#acpi\">acpi</a>, int <a class=\"id\" href=\"#k8\">k8</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA_EMU\">CONFIG_NUMA_EMU</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmdline\">cmdline</a> && !<a class=\"id\" href=\"#numa_emulation\">numa_emulation</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#last_pfn\">last_pfn</a>, <a class=\"id\" href=\"#acpi\">acpi</a>, <a class=\"id\" href=\"#k8\">k8</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ACPI_NUMA\">CONFIG_ACPI_NUMA</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#numa_off\">numa_off</a> && <a class=\"id\" href=\"#acpi\">acpi</a> && !<a class=\"id\" href=\"#acpi_scan_nodes\">acpi_scan_nodes</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#last_pfn\">last_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_K8_NUMA\">CONFIG_K8_NUMA</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#numa_off\">numa_off</a> && <a class=\"id\" href=\"#k8\">k8</a> && !<a class=\"id\" href=\"#k8_scan_nodes\">k8_scan_nodes</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#numa_off\">numa_off</a> ? \"NUMA turned off\" : \"No NUMA configuration found\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Faking a node at %016lx-%016lx\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#start_pfn\">start_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#last_pfn\">last_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* setup dummy node covering all memory */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memnode_shift\">memnode_shift</a> = 63;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memnodemap\">memnodemap</a> = <a class=\"id\" href=\"#memnode\">memnode</a>.<a class=\"id\" href=\"#embedded_map\">embedded_map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memnodemap\">memnodemap</a>[0] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set_online\">node_set_online</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(0, <a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numa_set_node\">numa_set_node</a>(<a class=\"id\" href=\"#i\">i</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e820_register_active_regions\">e820_register_active_regions</a>(0, <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#last_pfn\">last_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_node_bootmem\">setup_node_bootmem</a>(0, <a class=\"id\" href=\"#start_pfn\">start_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#last_pfn\">last_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#numa_free_all_bootmem\">numa_free_all_bootmem</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pages\">pages</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#free_all_bootmem_node\">free_all_bootmem_node</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#free_all_memory_core_early\">free_all_memory_core_early</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pages\">pages</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#numa_setup\">numa_setup</a>(char *<a class=\"id\" href=\"#opt\">opt</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#opt\">opt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#opt\">opt</a>, \"off\", 3))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numa_off\">numa_off</a> = 1;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA_EMU\">CONFIG_NUMA_EMU</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#opt\">opt</a>, \"fake=\", 5))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmdline\">cmdline</a> = <a class=\"id\" href=\"#opt\">opt</a> + 5;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ACPI_NUMA\">CONFIG_ACPI_NUMA</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#opt\">opt</a>, \"noacpi\", 6))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_numa\">acpi_numa</a> = -1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"numa\", <a class=\"id\" href=\"#numa_setup\">numa_setup</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#find_near_online_node\">find_near_online_node</a>(int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#min_val\">min_val</a> = <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#best_node\">best_node</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#node_distance\">node_distance</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; <a class=\"id\" href=\"#min_val\">min_val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_val\">min_val</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best_node\">best_node</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#best_node\">best_node</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup early cpu_to_node.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Populate cpu_to_node[] only if x86_cpu_to_apicid[],</span>", 
"<span class=\"comment\"> * and apicid_to_node[] tables have valid entries for a CPU.</span>", 
"<span class=\"comment\"> * This means we skip cpu_to_node[] initialisation for NUMA</span>", 
"<span class=\"comment\"> * emulation and faking node case (when running a kernel compiled</span>", 
"<span class=\"comment\"> * for NUMA on a non NUMA box), which is OK as cpu_to_node[]</span>", 
"<span class=\"comment\"> * is already initialized in a round robin manner at numa_init_array,</span>", 
"<span class=\"comment\"> * prior to this call, and this initialization is good enough</span>", 
"<span class=\"comment\"> * for the fake NUMA cases.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called before the per_cpu areas are setup.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_cpu_to_node\">init_cpu_to_node</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#cpu_to_apicid\">cpu_to_apicid</a> = <a class=\"id\" href=\"#early_per_cpu_ptr\">early_per_cpu_ptr</a>(<a class=\"id\" href=\"#x86_cpu_to_apicid\">x86_cpu_to_apicid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu_to_apicid\">cpu_to_apicid</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#cpu_to_apicid\">cpu_to_apicid</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#apicid\">apicid</a> == <a class=\"id\" href=\"#BAD_APICID\">BAD_APICID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#apicid\">apicid</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> == <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#find_near_online_node\">find_near_online_node</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numa_set_node\">numa_set_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#numa_set_node\">numa_set_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#cpu_to_node_map\">cpu_to_node_map</a> = <a class=\"id\" href=\"#early_per_cpu_ptr\">early_per_cpu_ptr</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* early setting, no percpu area yet */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_to_node_map\">cpu_to_node_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_node_map\">cpu_to_node_map</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PER_CPU_MAPS\">CONFIG_DEBUG_PER_CPU_MAPS</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> || !<a class=\"id\" href=\"#cpu_possible\">cpu_possible</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"numa_set_node: invalid cpu# (%d)\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> != <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_numa_node\">set_cpu_numa_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#numa_clear_node\">numa_clear_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_set_node\">numa_set_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PER_CPU_MAPS\">CONFIG_DEBUG_PER_CPU_MAPS</a>", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#numa_add_cpu\">numa_add_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node_to_cpumask_map\">node_to_cpumask_map</a>[<a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)]);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#numa_remove_cpu\">numa_remove_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node_to_cpumask_map\">node_to_cpumask_map</a>[<a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)]);", 
"}", 
"", 
"#else <span class=\"comment\">/* CONFIG_DEBUG_PER_CPU_MAPS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * --------- debug versions of the numa functions ---------</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#numa_set_cpumask\">numa_set_cpumask</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[64];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#node_to_cpumask_map\">node_to_cpumask_map</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"node_to_cpumask_map[%i] NULL\\n\", <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpulist_scnprintf\">cpulist_scnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, sizeof(<a class=\"id\" href=\"#buf\">buf</a>), <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"%s cpu %d node %d: mask now %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable\">enable</a> ? \"numa_add_cpu\" : \"numa_remove_cpu\", <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#numa_add_cpu\">numa_add_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_set_cpumask\">numa_set_cpumask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, 1);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#numa_remove_cpu\">numa_remove_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_set_cpumask\">numa_set_cpumask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, 0);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__cpu_to_node\">__cpu_to_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#early_per_cpu_ptr\">early_per_cpu_ptr</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"cpu_to_node(%d): usage too early!\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#early_per_cpu_ptr\">early_per_cpu_ptr</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>)[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__cpu_to_node\">__cpu_to_node</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Same function as cpu_to_node() but used if called before the</span>", 
"<span class=\"comment\"> * per_cpu areas are setup.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#early_per_cpu_ptr\">early_per_cpu_ptr</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#early_per_cpu_ptr\">early_per_cpu_ptr</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>)[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_possible\">cpu_possible</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"early_cpu_to_node(%d): no per_cpu area!\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * --------- end of debug versions of the numa functions ---------</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DEBUG_PER_CPU_MAPS */</span>", 
];
xr_frag_insert('l/f1/413c6dae18cd2919f668288df1d9e21bbf570d.xr', __xr_tmp);
