var __xr_tmp = [
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a> <a class=\"id\" href=\"#bdi_seq\">bdi_seq</a> = <a class=\"id\" href=\"#ATOMIC_LONG_INIT\">ATOMIC_LONG_INIT</a>(0);", 
"", 
"void <a class=\"id\" href=\"#default_unplug_io_fn\">default_unplug_io_fn</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#default_unplug_io_fn\">default_unplug_io_fn</a>);", 
"", 
"struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> <a class=\"id\" href=\"#default_backing_dev_info\">default_backing_dev_info</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"default\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ra_pages\">ra_pages</a><span class=\"ts\"/>= <a class=\"id\" href=\"#VM_MAX_READAHEAD\">VM_MAX_READAHEAD</a> * 1024 / <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#state\">state</a><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#capabilities\">capabilities</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BDI_CAP_MAP_COPY\">BDI_CAP_MAP_COPY</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unplug_io_fn\">unplug_io_fn</a><span class=\"ts\"/>= <a class=\"id\" href=\"#default_unplug_io_fn\">default_unplug_io_fn</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#default_backing_dev_info\">default_backing_dev_info</a>);", 
"", 
"struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> <a class=\"id\" href=\"#noop_backing_dev_info\">noop_backing_dev_info</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"noop\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#capabilities\">capabilities</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BDI_CAP_NO_ACCT_AND_WRITEBACK\">BDI_CAP_NO_ACCT_AND_WRITEBACK</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#noop_backing_dev_info\">noop_backing_dev_info</a>);", 
"", 
"static struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#bdi_class\">bdi_class</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bdi_lock protects updates to bdi_list and bdi_pending_list, as well as</span>", 
"<span class=\"comment\"> * reader side protection for bdi_pending_list. bdi_list has RCU reader side</span>", 
"<span class=\"comment\"> * locking.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#bdi_lock\">bdi_lock</a>);", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#bdi_list\">bdi_list</a>);", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#bdi_pending_list\">bdi_pending_list</a>);", 
"", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#sync_supers_tsk\">sync_supers_tsk</a>;", 
"static struct <a class=\"id\" href=\"#timer_list\">timer_list</a> <a class=\"id\" href=\"#sync_supers_timer\">sync_supers_timer</a>;", 
"", 
"static int <a class=\"id\" href=\"#bdi_sync_supers\">bdi_sync_supers</a>(void *);", 
"static void <a class=\"id\" href=\"#sync_supers_timer_fn\">sync_supers_timer_fn</a>(unsigned long);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_FS\">CONFIG_DEBUG_FS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#bdi_debug_root\">bdi_debug_root</a>;", 
"", 
"static void <a class=\"id\" href=\"#bdi_debug_init\">bdi_debug_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_debug_root\">bdi_debug_root</a> = <a class=\"id\" href=\"#debugfs_create_dir\">debugfs_create_dir</a>(\"bdi\", <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#bdi_debug_stats_show\">bdi_debug_stats_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a> = &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#background_thresh\">background_thresh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bdi_thresh\">bdi_thresh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_dirty\">nr_dirty</a>, <a class=\"id\" href=\"#nr_io\">nr_io</a>, <a class=\"id\" href=\"#nr_more_io\">nr_more_io</a>, <a class=\"id\" href=\"#nr_wb\">nr_wb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_wb\">nr_wb</a> = <a class=\"id\" href=\"#nr_dirty\">nr_dirty</a> = <a class=\"id\" href=\"#nr_io\">nr_io</a> = <a class=\"id\" href=\"#nr_more_io\">nr_more_io</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_dirty\">b_dirty</a>, <a class=\"id\" href=\"#i_list\">i_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_dirty\">nr_dirty</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_io\">b_io</a>, <a class=\"id\" href=\"#i_list\">i_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_io\">nr_io</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_more_io\">b_more_io</a>, <a class=\"id\" href=\"#i_list\">i_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_more_io\">nr_more_io</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#global_dirty_limits\">global_dirty_limits</a>(&amp;<a class=\"id\" href=\"#background_thresh\">background_thresh</a>, &amp;<a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_thresh\">bdi_thresh</a> = <a class=\"id\" href=\"#bdi_dirty_limit\">bdi_dirty_limit</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#x\">x</a>) ((<a class=\"id\" href=\"#x\">x</a>) << (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 10))", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"BdiWriteback:     %8lu kB\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"BdiReclaimable:   %8lu kB\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"BdiDirtyThresh:   %8lu kB\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"DirtyThresh:      %8lu kB\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"BackgroundThresh: %8lu kB\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"b_dirty:          %8lu\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"b_io:             %8lu\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"b_more_io:        %8lu\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"bdi_list:         %8u\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"state:            %8lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>   (unsigned long) <a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#bdi_stat\">bdi_stat</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#BDI_WRITEBACK\">BDI_WRITEBACK</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/>   (unsigned long) <a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#bdi_stat\">bdi_stat</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#BDI_RECLAIMABLE\">BDI_RECLAIMABLE</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#bdi_thresh\">bdi_thresh</a>), <a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#background_thresh\">background_thresh</a>), <a class=\"id\" href=\"#nr_dirty\">nr_dirty</a>, <a class=\"id\" href=\"#nr_io\">nr_io</a>, <a class=\"id\" href=\"#nr_more_io\">nr_more_io</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#bdi_list\">bdi_list</a>), <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#K\">K</a>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#bdi_debug_stats_open\">bdi_debug_stats_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#single_open\">single_open</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#bdi_debug_stats_show\">bdi_debug_stats_show</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#bdi_debug_stats_fops\">bdi_debug_stats_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#bdi_debug_stats_open\">bdi_debug_stats_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#single_release\">single_release</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#bdi_debug_register\">bdi_debug_register</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#debug_dir\">debug_dir</a> = <a class=\"id\" href=\"#debugfs_create_dir\">debugfs_create_dir</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#bdi_debug_root\">bdi_debug_root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#debug_stats\">debug_stats</a> = <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(\"stats\", 0444, <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#debug_dir\">debug_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bdi\">bdi</a>, &amp;<a class=\"id\" href=\"#bdi_debug_stats_fops\">bdi_debug_stats_fops</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#bdi_debug_unregister\">bdi_debug_unregister</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#debug_stats\">debug_stats</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#debug_dir\">debug_dir</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bdi_debug_init\">bdi_debug_init</a>(void)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bdi_debug_register\">bdi_debug_register</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#bdi_debug_unregister\">bdi_debug_unregister</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#read_ahead_kb_store\">read_ahead_kb_store</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#read_ahead_kb\">read_ahead_kb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_ahead_kb\">read_ahead_kb</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#end\">end</a>, 10);", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#buf\">buf</a> && (<a class=\"id\" href=\"#end\">end</a>[0] == '\\0' || (<a class=\"id\" href=\"#end\">end</a>[0] == '\\n' && <a class=\"id\" href=\"#end\">end</a>[1] == '\\0'))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#ra_pages\">ra_pages</a> = <a class=\"id\" href=\"#read_ahead_kb\">read_ahead_kb</a> >> (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 10);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#pages\">pages</a>) ((<a class=\"id\" href=\"#pages\">pages</a>) << (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 10))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BDI_SHOW\">BDI_SHOW</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#expr\">expr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#name\">name</a>##<a class=\"id\" href=\"#_show\">_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-1, \"%lld\\n\", (long long)<a class=\"id\" href=\"#expr\">expr</a>);<span class=\"ts\"/>\\", 
"}", 
"", 
"<a class=\"id\" href=\"#BDI_SHOW\">BDI_SHOW</a>(<a class=\"id\" href=\"#read_ahead_kb\">read_ahead_kb</a>, <a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#ra_pages\">ra_pages</a>))", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#min_ratio_store\">min_ratio_store</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ratio\">ratio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ratio\">ratio</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#end\">end</a>, 10);", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#buf\">buf</a> && (<a class=\"id\" href=\"#end\">end</a>[0] == '\\0' || (<a class=\"id\" href=\"#end\">end</a>[0] == '\\n' && <a class=\"id\" href=\"#end\">end</a>[1] == '\\0'))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#bdi_set_min_ratio\">bdi_set_min_ratio</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#ratio\">ratio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#BDI_SHOW\">BDI_SHOW</a>(<a class=\"id\" href=\"#min_ratio\">min_ratio</a>, <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#min_ratio\">min_ratio</a>)", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#max_ratio_store\">max_ratio_store</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ratio\">ratio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ratio\">ratio</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#end\">end</a>, 10);", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#buf\">buf</a> && (<a class=\"id\" href=\"#end\">end</a>[0] == '\\0' || (<a class=\"id\" href=\"#end\">end</a>[0] == '\\n' && <a class=\"id\" href=\"#end\">end</a>[1] == '\\0'))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#bdi_set_max_ratio\">bdi_set_max_ratio</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#ratio\">ratio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#BDI_SHOW\">BDI_SHOW</a>(<a class=\"id\" href=\"#max_ratio\">max_ratio</a>, <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#max_ratio\">max_ratio</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__ATTR_RW\">__ATTR_RW</a>(<a class=\"id\" href=\"#attr\">attr</a>) <a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#attr\">attr</a>, 0644, <a class=\"id\" href=\"#attr\">attr</a>##<a class=\"id\" href=\"#_show\">_show</a>, <a class=\"id\" href=\"#attr\">attr</a>##<a class=\"id\" href=\"#_store\">_store</a>)", 
"", 
"static struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> <a class=\"id\" href=\"#bdi_dev_attrs\">bdi_dev_attrs</a>[] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR_RW\">__ATTR_RW</a>(<a class=\"id\" href=\"#read_ahead_kb\">read_ahead_kb</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR_RW\">__ATTR_RW</a>(<a class=\"id\" href=\"#min_ratio\">min_ratio</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR_RW\">__ATTR_RW</a>(<a class=\"id\" href=\"#max_ratio\">max_ratio</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR_NULL\">__ATTR_NULL</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#bdi_class_init\">bdi_class_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_class\">bdi_class</a> = <a class=\"id\" href=\"#class_create\">class_create</a>(<a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>, \"bdi\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#bdi_class\">bdi_class</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#bdi_class\">bdi_class</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_class\">bdi_class</a>-><a class=\"id\" href=\"#dev_attrs\">dev_attrs</a> = <a class=\"id\" href=\"#bdi_dev_attrs\">bdi_dev_attrs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_debug_init\">bdi_debug_init</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#postcore_initcall\">postcore_initcall</a>(<a class=\"id\" href=\"#bdi_class_init\">bdi_class_init</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#default_bdi_init\">default_bdi_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_supers_tsk\">sync_supers_tsk</a> = <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#bdi_sync_supers\">bdi_sync_supers</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"sync_supers\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#sync_supers_tsk\">sync_supers_tsk</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_timer\">setup_timer</a>(&amp;<a class=\"id\" href=\"#sync_supers_timer\">sync_supers_timer</a>, <a class=\"id\" href=\"#sync_supers_timer_fn\">sync_supers_timer_fn</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_arm_supers_timer\">bdi_arm_supers_timer</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#bdi_init\">bdi_init</a>(&amp;<a class=\"id\" href=\"#default_backing_dev_info\">default_backing_dev_info</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_register\">bdi_register</a>(&amp;<a class=\"id\" href=\"#default_backing_dev_info\">default_backing_dev_info</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"default\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#bdi_init\">bdi_init</a>(&amp;<a class=\"id\" href=\"#noop_backing_dev_info\">noop_backing_dev_info</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#default_bdi_init\">default_bdi_init</a>);", 
"", 
"int <a class=\"id\" href=\"#bdi_has_dirty_io\">bdi_has_dirty_io</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wb_has_dirty_io\">wb_has_dirty_io</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#bdi_flush_io\">bdi_flush_io</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> <a class=\"id\" href=\"#wbc\">wbc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#older_than_this\">older_than_this</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_cyclic\">range_cyclic</a><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a><span class=\"ts\"/><span class=\"ts\"/>= 1024,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writeback_inodes_wb\">writeback_inodes_wb</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>, &amp;<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kupdated() used to do this. We cannot do it from the bdi_forker_thread()</span>", 
"<span class=\"comment\"> * or we risk deadlocking on -&gt;s_umount. The longer term solution would be</span>", 
"<span class=\"comment\"> * to implement sync_supers_bdi() or similar and simply do it from the</span>", 
"<span class=\"comment\"> * bdi writeback thread individually.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#bdi_sync_supers\">bdi_sync_supers</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_user_nice\">set_user_nice</a>(<a class=\"id\" href=\"#current\">current</a>, 0);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do this periodically, like kupdated() did before.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_supers\">sync_supers</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#bdi_arm_supers_timer\">bdi_arm_supers_timer</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dirty_writeback_interval\">dirty_writeback_interval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#dirty_writeback_interval\">dirty_writeback_interval</a> * 10) + <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#sync_supers_timer\">sync_supers_timer</a>, <a class=\"id\" href=\"#round_jiffies_up\">round_jiffies_up</a>(<a class=\"id\" href=\"#next\">next</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sync_supers_timer_fn\">sync_supers_timer_fn</a>(unsigned long <a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#sync_supers_tsk\">sync_supers_tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_arm_supers_timer\">bdi_arm_supers_timer</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#wakeup_timer_fn\">wakeup_timer_fn</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a> = (struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb_lock\">wb_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_writeback_wake_thread\">trace_writeback_wake_thread</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When bdi tasks are inactive for long time, they are killed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In this case we have to wake-up the forker thread which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * should create and run the bdi thread.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_writeback_wake_forker_thread\">trace_writeback_wake_forker_thread</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#default_backing_dev_info\">default_backing_dev_info</a>.<a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb_lock\">wb_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is used when the first inode for this bdi is marked dirty. It</span>", 
"<span class=\"comment\"> * wakes-up the corresponding bdi thread which should then take care of the</span>", 
"<span class=\"comment\"> * periodic background write-out of dirty inodes. Since the write-out would</span>", 
"<span class=\"comment\"> * starts only 'dirty_writeback_interval' centisecs from now anyway, we just</span>", 
"<span class=\"comment\"> * set up a timer which wakes the bdi thread up later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, we wouldn't bother setting up the timer, but this function is on the</span>", 
"<span class=\"comment\"> * fast-path (used by '__mark_inode_dirty()'), so we save few context switches</span>", 
"<span class=\"comment\"> * by delaying the wake-up.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#bdi_wakeup_thread_delayed\">bdi_wakeup_thread_delayed</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#dirty_writeback_interval\">dirty_writeback_interval</a> * 10);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#wakeup_timer\">wakeup_timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate the longest interval (jiffies) bdi threads are allowed to be</span>", 
"<span class=\"comment\"> * inactive.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#bdi_longest_inactive\">bdi_longest_inactive</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#interval\">interval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#interval\">interval</a> = <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#dirty_writeback_interval\">dirty_writeback_interval</a> * 10);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>(5UL * 60 * <a class=\"id\" href=\"#HZ\">HZ</a>, <a class=\"id\" href=\"#interval\">interval</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#bdi_forker_thread\">bdi_forker_thread</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#me\">me</a> = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_FLUSHER\">PF_FLUSHER</a> | <a class=\"id\" href=\"#PF_SWAPWRITE\">PF_SWAPWRITE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_freezable\">set_freezable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Our parent may run at a different priority, just set us to normal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_user_nice\">set_user_nice</a>(<a class=\"id\" href=\"#current\">current</a>, 0);", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>enum {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NO_ACTION\">NO_ACTION</a>,   <span class=\"comment\">/* Nothing to do */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FORK_THREAD\">FORK_THREAD</a>, <span class=\"comment\">/* Fork bdi thread */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#KILL_THREAD\">KILL_THREAD</a>, <span class=\"comment\">/* Kill inactive bdi thread */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#NO_ACTION\">NO_ACTION</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Temporary measure, we want to make sure we don't see</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * dirty data on the default backing_dev_info</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wb_has_dirty_io\">wb_has_dirty_io</a>(<a class=\"id\" href=\"#me\">me</a>) || !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#work_list\">work_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_timer\">del_timer</a>(&amp;<a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#wakeup_timer\">wakeup_timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wb_do_writeback\">wb_do_writeback</a>(<a class=\"id\" href=\"#me\">me</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#bdi_lock\">bdi_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, &amp;<a class=\"id\" href=\"#bdi_list\">bdi_list</a>, <a class=\"id\" href=\"#bdi_list\">bdi_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#have_dirty_io\">have_dirty_io</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdi_cap_writeback_dirty\">bdi_cap_writeback_dirty</a>(<a class=\"id\" href=\"#bdi\">bdi</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#bdi_cap_flush_forker\">bdi_cap_flush_forker</a>(<a class=\"id\" href=\"#bdi\">bdi</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BDI_registered\">BDI_registered</a>, &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#state\">state</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"bdi %p/%s is not registered!\\n\", <a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#have_dirty_io\">have_dirty_io</a> = !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#work_list\">work_list</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wb_has_dirty_io\">wb_has_dirty_io</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the bdi has work to do, but the thread does not</span>", 
];
xr_frag_insert('l/f1/a876cf72c24a22a8123eeae04443fecb42e0f5.xr', __xr_tmp);
