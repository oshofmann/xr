var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The \"user cache\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) Copyright 1991-2000 Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We have a per-user structure to keep track of how many</span>", 
"<span class=\"comment\"> * processes, files etc the user has claimed, in order to be</span>", 
"<span class=\"comment\"> * able to have per-user limits for system resources. </span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#user_namespace\">user_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#user_namespace\">user_namespace</a> <a class=\"id\" href=\"#init_user_ns\">init_user_ns</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#kref\">kref</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#refcount\">refcount</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(2),", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#creator\">creator</a> = &amp;<a class=\"id\" href=\"#root_user\">root_user</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#init_user_ns\">init_user_ns</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * UID task count cache, to get fast user lookup in \"alloc_uid\"</span>", 
"<span class=\"comment\"> * when changing user ID's (ie setuid() and friends).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UIDHASH_MASK\">UIDHASH_MASK</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#UIDHASH_SZ\">UIDHASH_SZ</a> - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__uidhashfn\">__uidhashfn</a>(<a class=\"id\" href=\"#uid\">uid</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#uid\">uid</a> >> <a class=\"id\" href=\"#UIDHASH_BITS\">UIDHASH_BITS</a>) + <a class=\"id\" href=\"#uid\">uid</a>) &amp; <a class=\"id\" href=\"#UIDHASH_MASK\">UIDHASH_MASK</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#uidhashentry\">uidhashentry</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#uid\">uid</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#ns\">ns</a>)-><a class=\"id\" href=\"#uidhash_table\">uidhash_table</a> + <a class=\"id\" href=\"#__uidhashfn\">__uidhashfn</a>((<a class=\"id\" href=\"#uid\">uid</a>)))", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#uid_cachep\">uid_cachep</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The uidhash_lock is mostly taken from process context, but it is</span>", 
"<span class=\"comment\"> * occasionally also taken from softirq/tasklet context, when</span>", 
"<span class=\"comment\"> * task-structs get RCU-freed. Hence all locking must be softirq-safe.</span>", 
"<span class=\"comment\"> * But free_uid() is also called with local interrupts disabled, and running</span>", 
"<span class=\"comment\"> * local_bh_enable() with local interrupts disabled is an error - we'll run</span>", 
"<span class=\"comment\"> * softirq callbacks, and they can unconditionally enable interrupts, and</span>", 
"<span class=\"comment\"> * the caller of free_uid() didn't expect that..</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#uidhash_lock\">uidhash_lock</a>);", 
"", 
"<span class=\"comment\">/* root_user.__count is 2, 1 for init task cred, 1 for init_user_ns-&gt;creator */</span>", 
"struct <a class=\"id\" href=\"#user_struct\">user_struct</a> <a class=\"id\" href=\"#root_user\">root_user</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#__count\">__count</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(2),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#processes\">processes</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(1),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#files\">files</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sigpending\">sigpending</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#locked_shm\">locked_shm</a>     = 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#user_ns\">user_ns</a><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#init_user_ns\">init_user_ns</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These routines must be called with the uidhash spinlock held!</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#uid_hash_insert\">uid_hash_insert</a>(struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#up\">up</a>, struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hashent\">hashent</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#uidhash_node\">uidhash_node</a>, <a class=\"id\" href=\"#hashent\">hashent</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#uid_hash_remove\">uid_hash_remove</a>(struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_init\">hlist_del_init</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#uidhash_node\">uidhash_node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_user_ns\">put_user_ns</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#user_ns\">user_ns</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#uid_hash_find\">uid_hash_find</a>(<a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a>, struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hashent\">hashent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#user\">user</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#hashent\">hashent</a>, <a class=\"id\" href=\"#uidhash_node\">uidhash_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#uid\">uid</a> == <a class=\"id\" href=\"#uid\">uid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#__count\">__count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#user\">user</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* IRQs are disabled and uidhash_lock is held upon function entry.</span>", 
"<span class=\"comment\"> * IRQ state (as stored in flags) is restored and uidhash_lock released</span>", 
"<span class=\"comment\"> * upon function exit.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_user\">free_user</a>(struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#up\">up</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_hash_remove\">uid_hash_remove</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#uidhash_lock\">uidhash_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#uid_keyring\">uid_keyring</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#session_keyring\">session_keyring</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#uid_cachep\">uid_cachep</a>, <a class=\"id\" href=\"#up\">up</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Locate the user_struct for the passed UID.  If found, take a ref on it.  The</span>", 
"<span class=\"comment\"> * caller must undo that ref with free_uid().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the user_struct could not be found, return NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#find_user\">find_user</a>(<a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_namespace\">user_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#current_user_ns\">current_user_ns</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#uidhash_lock\">uidhash_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#uid_hash_find\">uid_hash_find</a>(<a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#uidhashentry\">uidhashentry</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#uid\">uid</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#uidhash_lock\">uidhash_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_uid\">free_uid</a>(struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#up\">up</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_lock\">atomic_dec_and_lock</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#__count\">__count</a>, &amp;<a class=\"id\" href=\"#uidhash_lock\">uidhash_lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_user\">free_user</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#alloc_uid\">alloc_uid</a>(struct <a class=\"id\" href=\"#user_namespace\">user_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hashent\">hashent</a> = <a class=\"id\" href=\"#uidhashentry\">uidhashentry</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#uid\">uid</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#up\">up</a>, *<a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#uidhash_lock\">uidhash_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#uid_hash_find\">uid_hash_find</a>(<a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#hashent\">hashent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#uidhash_lock\">uidhash_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#up\">up</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#uid_cachep\">uid_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#__count\">__count</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#user_ns\">user_ns</a> = <a class=\"id\" href=\"#get_user_ns\">get_user_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Before adding this, check whether we raced</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * on adding the same user already..</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#uidhash_lock\">uidhash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#uid_hash_find\">uid_hash_find</a>(<a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#hashent\">hashent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#uid_keyring\">uid_keyring</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#session_keyring\">session_keyring</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#uid_cachep\">uid_cachep</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uid_hash_insert\">uid_hash_insert</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#hashent\">hashent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#uidhash_lock\">uidhash_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#up\">up</a>;", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#uid_cache_init\">uid_cache_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_cachep\">uid_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"uid_cache\", sizeof(struct <a class=\"id\" href=\"#user_struct\">user_struct</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#n\">n</a> = 0; <a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#UIDHASH_SZ\">UIDHASH_SZ</a>; ++<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(<a class=\"id\" href=\"#init_user_ns\">init_user_ns</a>.<a class=\"id\" href=\"#uidhash_table\">uidhash_table</a> + <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Insert the root user immediately (init already runs as root) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#uidhash_lock\">uidhash_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uid_hash_insert\">uid_hash_insert</a>(&amp;<a class=\"id\" href=\"#root_user\">root_user</a>, <a class=\"id\" href=\"#uidhashentry\">uidhashentry</a>(&amp;<a class=\"id\" href=\"#init_user_ns\">init_user_ns</a>, 0));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#uidhash_lock\">uidhash_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#uid_cache_init\">uid_cache_init</a>);", 
];
xr_frag_insert('l/f1/c4cd1c347d7f2ddc259d10bae0ed9f978daa31.xr', __xr_tmp);
