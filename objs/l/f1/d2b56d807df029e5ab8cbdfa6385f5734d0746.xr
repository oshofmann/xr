var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  pci_root.c - ACPI PCI Root Bridge Driver ($Revision: 40 $)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2001, 2002 Andy Grover &lt;andrew.grover@intel.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2001, 2002 Paul Diefenbaugh &lt;paul.s.diefenbaugh@intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2 of the License, or (at</span>", 
"<span class=\"comment\"> *  your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> *  WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\"> *  General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License along</span>", 
"<span class=\"comment\"> *  with this program; if not, write to the Free Software Foundation, Inc.,</span>", 
"<span class=\"comment\"> *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm\">pm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm_runtime\">pm_runtime</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>-<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi_bus\">acpi_bus</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi_drivers\">acpi_drivers</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"ACPI: \"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_PCI_COMPONENT\">ACPI_PCI_COMPONENT</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"pci_root\");", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_PCI_ROOT_CLASS\">ACPI_PCI_ROOT_CLASS</a><span class=\"ts\"/><span class=\"ts\"/>\"pci_bridge\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_PCI_ROOT_DEVICE_NAME\">ACPI_PCI_ROOT_DEVICE_NAME</a><span class=\"ts\"/>\"PCI Root Bridge\"", 
"static int <a class=\"id\" href=\"#acpi_pci_root_add\">acpi_pci_root_add</a>(struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#device\">device</a>);", 
"static int <a class=\"id\" href=\"#acpi_pci_root_remove\">acpi_pci_root_remove</a>(struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#device\">device</a>, int <a class=\"id\" href=\"#type\">type</a>);", 
"static int <a class=\"id\" href=\"#acpi_pci_root_start\">acpi_pci_root_start</a>(struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#device\">device</a>);", 
"", 
"static const struct <a class=\"id\" href=\"#acpi_device_id\">acpi_device_id</a> <a class=\"id\" href=\"#root_device_ids\">root_device_ids</a>[] = {", 
"<span class=\"ts\"/>{\"PNP0A03\", 0},", 
"<span class=\"ts\"/>{\"\", 0},", 
"};", 
"<a class=\"id\" href=\"#MODULE_DEVICE_TABLE\">MODULE_DEVICE_TABLE</a>(<a class=\"id\" href=\"#acpi\">acpi</a>, <a class=\"id\" href=\"#root_device_ids\">root_device_ids</a>);", 
"", 
"static struct <a class=\"id\" href=\"#acpi_driver\">acpi_driver</a> <a class=\"id\" href=\"#acpi_pci_root_driver\">acpi_pci_root_driver</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"pci_root\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#ACPI_PCI_ROOT_CLASS\">ACPI_PCI_ROOT_CLASS</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ids\">ids</a> = <a class=\"id\" href=\"#root_device_ids\">root_device_ids</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ops\">ops</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#add\">add</a> = <a class=\"id\" href=\"#acpi_pci_root_add\">acpi_pci_root_add</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#remove\">remove</a> = <a class=\"id\" href=\"#acpi_pci_root_remove\">acpi_pci_root_remove</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#acpi_pci_root_start\">acpi_pci_root_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"};", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#acpi_pci_roots\">acpi_pci_roots</a>);", 
"", 
"static struct <a class=\"id\" href=\"#acpi_pci_driver\">acpi_pci_driver</a> *<a class=\"id\" href=\"#sub_driver\">sub_driver</a>;", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#osc_lock\">osc_lock</a>);", 
"", 
"int <a class=\"id\" href=\"#acpi_pci_register_driver\">acpi_pci_register_driver</a>(struct <a class=\"id\" href=\"#acpi_pci_driver\">acpi_pci_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_pci_driver\">acpi_pci_driver</a> **<a class=\"id\" href=\"#pptr\">pptr</a> = &amp;<a class=\"id\" href=\"#sub_driver\">sub_driver</a>;", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#pptr\">pptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pptr\">pptr</a> = &amp;(*<a class=\"id\" href=\"#pptr\">pptr</a>)-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pptr\">pptr</a> = <a class=\"id\" href=\"#driver\">driver</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#add\">add</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#root\">root</a>, &amp;<a class=\"id\" href=\"#acpi_pci_roots\">acpi_pci_roots</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#add\">add</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_pci_register_driver\">acpi_pci_register_driver</a>);", 
"", 
"void <a class=\"id\" href=\"#acpi_pci_unregister_driver\">acpi_pci_unregister_driver</a>(struct <a class=\"id\" href=\"#acpi_pci_driver\">acpi_pci_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_pci_driver\">acpi_pci_driver</a> **<a class=\"id\" href=\"#pptr\">pptr</a> = &amp;<a class=\"id\" href=\"#sub_driver\">sub_driver</a>;", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#pptr\">pptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#pptr\">pptr</a> == <a class=\"id\" href=\"#driver\">driver</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pptr\">pptr</a> = &amp;(*<a class=\"id\" href=\"#pptr\">pptr</a>)-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!*<a class=\"id\" href=\"#pptr\">pptr</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pptr\">pptr</a> = (*<a class=\"id\" href=\"#pptr\">pptr</a>)-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#remove\">remove</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#root\">root</a>, &amp;<a class=\"id\" href=\"#acpi_pci_roots\">acpi_pci_roots</a>, <a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#remove\">remove</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_pci_unregister_driver\">acpi_pci_unregister_driver</a>);", 
"", 
"<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#acpi_get_pci_rootbridge_handle\">acpi_get_pci_rootbridge_handle</a>(unsigned int <a class=\"id\" href=\"#seg\">seg</a>, unsigned int <a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#root\">root</a>, &amp;<a class=\"id\" href=\"#acpi_pci_roots\">acpi_pci_roots</a>, <a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#segment\">segment</a> == (<a class=\"id\" href=\"#u16\">u16</a>) <a class=\"id\" href=\"#seg\">seg</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#secondary\">secondary</a>.<a class=\"id\" href=\"#start\">start</a> == (<a class=\"id\" href=\"#u16\">u16</a>) <a class=\"id\" href=\"#bus\">bus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"ts\"/>", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#acpi_get_pci_rootbridge_handle\">acpi_get_pci_rootbridge_handle</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_is_root_bridge - determine whether an ACPI CA node is a PCI root bridge</span>", 
"<span class=\"comment\"> * @handle - the ACPI CA node in question.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: we could make this API take a struct acpi_device * instead, but</span>", 
"<span class=\"comment\"> * for now, it's more convenient to operate on an acpi_handle.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#acpi_is_root_bridge\">acpi_is_root_bridge</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#device\">device</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#acpi_bus_get_device\">acpi_bus_get_device</a>(<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#acpi_match_device_ids\">acpi_match_device_ids</a>(<a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#root_device_ids\">root_device_ids</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#acpi_is_root_bridge\">acpi_is_root_bridge</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#get_root_bridge_busnr_callback\">get_root_bridge_busnr_callback</a>(struct <a class=\"id\" href=\"#acpi_resource\">acpi_resource</a> *<a class=\"id\" href=\"#resource\">resource</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_resource_address64\">acpi_resource_address64</a> <a class=\"id\" href=\"#address\">address</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#resource\">resource</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_RESOURCE_TYPE_ADDRESS16\">ACPI_RESOURCE_TYPE_ADDRESS16</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#resource\">resource</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_RESOURCE_TYPE_ADDRESS32\">ACPI_RESOURCE_TYPE_ADDRESS32</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#resource\">resource</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_RESOURCE_TYPE_ADDRESS64\">ACPI_RESOURCE_TYPE_ADDRESS64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_resource_to_address64\">acpi_resource_to_address64</a>(<a class=\"id\" href=\"#resource\">resource</a>, &amp;<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#address\">address</a>.<a class=\"id\" href=\"#address_length\">address_length</a> &gt; 0) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#address\">address</a>.<a class=\"id\" href=\"#resource_type\">resource_type</a> == <a class=\"id\" href=\"#ACPI_BUS_NUMBER_RANGE\">ACPI_BUS_NUMBER_RANGE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#address\">address</a>.<a class=\"id\" href=\"#minimum\">minimum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#address\">address</a>.<a class=\"id\" href=\"#minimum\">minimum</a> + <a class=\"id\" href=\"#address\">address</a>.<a class=\"id\" href=\"#address_length\">address_length</a> - 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#try_get_root_bridge_busnr\">try_get_root_bridge_busnr</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_walk_resources\">acpi_walk_resources</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#METHOD_NAME__CRS\">METHOD_NAME__CRS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_root_bridge_busnr_callback\">get_root_bridge_busnr_callback</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_ERROR\">AE_ERROR</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#acpi_pci_bridge_scan\">acpi_pci_bridge_scan</a>(struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bus_address\">bus_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#parent\">parent</a> && <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#ops\">ops</a>.<a class=\"id\" href=\"#bind\">bind</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#ops\">ops</a>.<a class=\"id\" href=\"#bind\">bind</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#status\">status</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#child\">child</a>, &amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#children\">children</a>, <a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_pci_bridge_scan\">acpi_pci_bridge_scan</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pci_osc_uuid_str\">pci_osc_uuid_str</a>[] = \"33DB4D5B-1FF7-401C-9657-7441C03DD766\";", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_pci_run_osc\">acpi_pci_run_osc</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#capbuf\">capbuf</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#retval\">retval</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_osc_context\">acpi_osc_context</a> <a class=\"id\" href=\"#context\">context</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#uuid_str\">uuid_str</a> = <a class=\"id\" href=\"#pci_osc_uuid_str\">pci_osc_uuid_str</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#rev\">rev</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#cap\">cap</a>.<a class=\"id\" href=\"#length\">length</a> = 12,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#cap\">cap</a>.<a class=\"id\" href=\"#pointer\">pointer</a> = (void *)<a class=\"id\" href=\"#capbuf\">capbuf</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_run_osc\">acpi_run_osc</a>(<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#context\">context</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#retval\">retval</a> = *((<a class=\"id\" href=\"#u32\">u32</a> *)(<a class=\"id\" href=\"#context\">context</a>.<a class=\"id\" href=\"#ret\">ret</a>.<a class=\"id\" href=\"#pointer\">pointer</a> + 8));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#context\">context</a>.<a class=\"id\" href=\"#ret\">ret</a>.<a class=\"id\" href=\"#pointer\">pointer</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_pci_query_osc\">acpi_pci_query_osc</a>(struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#support\">support</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#control\">control</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#capbuf\">capbuf</a>[3];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#support\">support</a> &= <a class=\"id\" href=\"#OSC_PCI_SUPPORT_MASKS\">OSC_PCI_SUPPORT_MASKS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#support\">support</a> |= <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#osc_support_set\">osc_support_set</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#capbuf\">capbuf</a>[<a class=\"id\" href=\"#OSC_QUERY_TYPE\">OSC_QUERY_TYPE</a>] = <a class=\"id\" href=\"#OSC_QUERY_ENABLE\">OSC_QUERY_ENABLE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#capbuf\">capbuf</a>[<a class=\"id\" href=\"#OSC_SUPPORT_TYPE\">OSC_SUPPORT_TYPE</a>] = <a class=\"id\" href=\"#support\">support</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#control\">control</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#control\">control</a> &= <a class=\"id\" href=\"#OSC_PCI_CONTROL_MASKS\">OSC_PCI_CONTROL_MASKS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#capbuf\">capbuf</a>[<a class=\"id\" href=\"#OSC_CONTROL_TYPE\">OSC_CONTROL_TYPE</a>] = *<a class=\"id\" href=\"#control\">control</a> | <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#osc_control_set\">osc_control_set</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Run _OSC query for all possible controls. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#capbuf\">capbuf</a>[<a class=\"id\" href=\"#OSC_CONTROL_TYPE\">OSC_CONTROL_TYPE</a>] = <a class=\"id\" href=\"#OSC_PCI_CONTROL_MASKS\">OSC_PCI_CONTROL_MASKS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_pci_run_osc\">acpi_pci_run_osc</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#capbuf\">capbuf</a>, &amp;<a class=\"id\" href=\"#result\">result</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#osc_support_set\">osc_support_set</a> = <a class=\"id\" href=\"#support\">support</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#control\">control</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#control\">control</a> = <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_pci_osc_support\">acpi_pci_osc_support</a>(struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a> *<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, \"_OSC\", &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#osc_lock\">osc_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_pci_query_osc\">acpi_pci_query_osc</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#osc_lock\">osc_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a> *<a class=\"id\" href=\"#acpi_pci_find_root\">acpi_pci_find_root</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#root\">root</a>, &amp;<a class=\"id\" href=\"#acpi_pci_roots\">acpi_pci_roots</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a> == <a class=\"id\" href=\"#handle\">handle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#acpi_pci_find_root\">acpi_pci_find_root</a>);", 
"", 
"struct <a class=\"id\" href=\"#acpi_handle_node\">acpi_handle_node</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_get_pci_dev - convert ACPI CA handle to struct pci_dev</span>", 
"<span class=\"comment\"> * @handle: the handle in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given an ACPI CA handle, the desired PCI device is located in the</span>", 
"<span class=\"comment\"> * list of PCI devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the device is found, its reference count is increased and this</span>", 
"<span class=\"comment\"> * function returns a pointer to its data structure.  The caller must</span>", 
"<span class=\"comment\"> * decrement the reference count by calling pci_dev_put().</span>", 
"<span class=\"comment\"> * If no device is found, %NULL is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#acpi_get_pci_dev\">acpi_get_pci_dev</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#fn\">fn</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#adr\">adr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#phandle\">phandle</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#pbus\">pbus</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_handle_node\">acpi_handle_node</a> *<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#device_list\">device_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Walk up the ACPI CA namespace until we reach a PCI root bridge.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phandle\">phandle</a> = <a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#acpi_is_root_bridge\">acpi_is_root_bridge</a>(<a class=\"id\" href=\"#phandle\">phandle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#acpi_handle_node\">acpi_handle_node</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#phandle\">phandle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#device_list\">device_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_get_parent\">acpi_get_parent</a>(<a class=\"id\" href=\"#phandle\">phandle</a>, &amp;<a class=\"id\" href=\"#phandle\">phandle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#acpi_pci_find_root\">acpi_pci_find_root</a>(<a class=\"id\" href=\"#phandle\">phandle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pbus\">pbus</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#bus\">bus</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now, walk back down the PCI device tree until we return to our</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * original handle. Assumes that everything between the PCI root</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bridge and the device we're looking for must be a P2P bridge.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#device_list\">device_list</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#hnd\">hnd</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_integer\">acpi_evaluate_integer</a>(<a class=\"id\" href=\"#hnd\">hnd</a>, \"_ADR\", <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#adr\">adr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = (<a class=\"id\" href=\"#adr\">adr</a> >> 16) &amp; 0xffff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>  = <a class=\"id\" href=\"#adr\">adr</a> &amp; 0xffff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#pci_get_slot\">pci_get_slot</a>(<a class=\"id\" href=\"#pbus\">pbus</a>, <a class=\"id\" href=\"#PCI_DEVFN\">PCI_DEVFN</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#fn\">fn</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pdev\">pdev</a> || <a class=\"id\" href=\"#hnd\">hnd</a> == <a class=\"id\" href=\"#handle\">handle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pbus\">pbus</a> = <a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This function may be called for a non-PCI device that has a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * PCI parent (eg. a disk under a PCI SATA controller).  In that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * case pdev-&gt;subordinate will be NULL for the parent.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pbus\">pbus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Not a PCI-to-PCI bridge\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#device_list\">device_list</a>, <a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pdev\">pdev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#acpi_get_pci_dev\">acpi_get_pci_dev</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_pci_osc_control_set - Request control of PCI root _OSC features.</span>", 
"<span class=\"comment\"> * @handle: ACPI handle of a PCI root bridge (or PCIe Root Complex).</span>", 
"<span class=\"comment\"> * @mask: Mask of _OSC bits to request control of, place to store control mask.</span>", 
"<span class=\"comment\"> * @req: Mask of _OSC bits the control of is essential to the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Run _OSC query for @mask and if that is successful, compare the returned</span>", 
"<span class=\"comment\"> * mask of control bits with @req.  If all of the @req bits are set in the</span>", 
"<span class=\"comment\"> * returned mask, run _OSC request for it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The variable at the @mask address may be modified regardless of whether or</span>", 
"<span class=\"comment\"> * not the function returns success.  On success it will contain the mask of</span>", 
"<span class=\"comment\"> * _OSC bits the BIOS has granted control of, but its contents are meaningless</span>", 
"<span class=\"comment\"> * on failure.</span>", 
"<span class=\"comment\"> **/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_pci_osc_control_set\">acpi_pci_osc_control_set</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ctrl\">ctrl</a>, <a class=\"id\" href=\"#capbuf\">capbuf</a>[3];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a> = *<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#OSC_PCI_CONTROL_MASKS\">OSC_PCI_CONTROL_MASKS</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ctrl\">ctrl</a> &amp; <a class=\"id\" href=\"#req\">req</a>) != <a class=\"id\" href=\"#req\">req</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_TYPE\">AE_TYPE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#acpi_pci_find_root\">acpi_pci_find_root</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_NOT_EXIST\">AE_NOT_EXIST</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>, \"_OSC\", &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#osc_lock\">osc_lock</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#ctrl\">ctrl</a> | <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#osc_control_set\">osc_control_set</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* No need to evaluate _OSC if the control was already granted. */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#osc_control_set\">osc_control_set</a> &amp; <a class=\"id\" href=\"#ctrl\">ctrl</a>) == <a class=\"id\" href=\"#ctrl\">ctrl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Need to check the available controls bits before requesting them. */</span>", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_pci_query_osc\">acpi_pci_query_osc</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#osc_support_set\">osc_support_set</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ctrl\">ctrl</a> == *<a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a> = *<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ctrl\">ctrl</a> &amp; <a class=\"id\" href=\"#req\">req</a>) != <a class=\"id\" href=\"#req\">req</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_SUPPORT\">AE_SUPPORT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#capbuf\">capbuf</a>[<a class=\"id\" href=\"#OSC_QUERY_TYPE\">OSC_QUERY_TYPE</a>] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#capbuf\">capbuf</a>[<a class=\"id\" href=\"#OSC_SUPPORT_TYPE\">OSC_SUPPORT_TYPE</a>] = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#osc_support_set\">osc_support_set</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#capbuf\">capbuf</a>[<a class=\"id\" href=\"#OSC_CONTROL_TYPE\">OSC_CONTROL_TYPE</a>] = <a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_pci_run_osc\">acpi_pci_run_osc</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#capbuf\">capbuf</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#osc_control_set\">osc_control_set</a> = *<a class=\"id\" href=\"#mask\">mask</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#osc_lock\">osc_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_pci_osc_control_set\">acpi_pci_osc_control_set</a>);", 
"", 
"static int <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#acpi_pci_root_add\">acpi_pci_root_add</a>(struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#segment\">segment</a>, <a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#base_flags\">base_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root\">root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#segment\">segment</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_integer\">acpi_evaluate_integer</a>(<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#METHOD_NAME__SEG\">METHOD_NAME__SEG</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#segment\">segment</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>) && <a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"can't evaluate _SEG\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check _CRS first, then _BBN.  If no _BBN, default to zero. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#secondary\">secondary</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#IORESOURCE_BUS\">IORESOURCE_BUS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#try_get_root_bridge_busnr\">try_get_root_bridge_busnr</a>(<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#secondary\">secondary</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We need both the start and end of the downstream bus range</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to interpret _CBA (MMCONFIG base address), so it really is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * supposed to be in _CRS.  If we don't find it there, all we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * can do is assume [_BBN-0xFF] or [0-0xFF].</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#secondary\">secondary</a>.<a class=\"id\" href=\"#end\">end</a> = 0xFF;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> <a class=\"id\" href=\"#FW_BUG\">FW_BUG</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"no secondary bus range in _CRS\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_integer\">acpi_evaluate_integer</a>(<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#METHOD_NAME__BBN\">METHOD_NAME__BBN</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#secondary\">secondary</a>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#secondary\">secondary</a>.<a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"can't evaluate _BBN\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#segment\">segment</a> = <a class=\"id\" href=\"#segment\">segment</a> &amp; 0xFFFF;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#acpi_device_name\">acpi_device_name</a>(<a class=\"id\" href=\"#device\">device</a>), <a class=\"id\" href=\"#ACPI_PCI_ROOT_DEVICE_NAME\">ACPI_PCI_ROOT_DEVICE_NAME</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#acpi_device_class\">acpi_device_class</a>(<a class=\"id\" href=\"#device\">device</a>), <a class=\"id\" href=\"#ACPI_PCI_ROOT_CLASS\">ACPI_PCI_ROOT_CLASS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a> = <a class=\"id\" href=\"#root\">root</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * All supported architectures that use ACPI have support for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PCI domains, so we indicate this in _OSC support capabilities.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#base_flags\">base_flags</a> = <a class=\"id\" href=\"#OSC_PCI_SEGMENT_GROUPS_SUPPORT\">OSC_PCI_SEGMENT_GROUPS_SUPPORT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_pci_osc_support\">acpi_pci_osc_support</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TBD: Need PCI interface for enumeration/configuration of roots.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* TBD: Locking */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#acpi_pci_roots\">acpi_pci_roots</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"%s [%s] (domain %04x %pR)\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#acpi_device_name\">acpi_device_name</a>(<a class=\"id\" href=\"#device\">device</a>), <a class=\"id\" href=\"#acpi_device_bid\">acpi_device_bid</a>(<a class=\"id\" href=\"#device\">device</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#segment\">segment</a>, &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#secondary\">secondary</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Scan the Root Bridge</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * --------------------</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must do this prior to any attempt to bind the root device, as the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PCI namespace does not get created until this call is made (and </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thus the root bridge's pci_dev does not exist).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#pci_acpi_scan_root\">pci_acpi_scan_root</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#bus\">bus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Bus %04x:%02x not present in PCI namespace\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#segment\">segment</a>, (unsigned int)<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#secondary\">secondary</a>.<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Attach ACPI-PCI Context</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -----------------------</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Thus binding the ACPI and PCI devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#acpi_pci_bind_root\">acpi_pci_bind_root</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PCI Routing Table</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -----------------</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Evaluate and parse _PRT, if exists.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#METHOD_NAME__PRT\">METHOD_NAME__PRT</a>, &amp;<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#acpi_pci_irq_add_prt\">acpi_pci_irq_add_prt</a>(<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#bus\">bus</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Scan and bind all _ADR-Based Devices</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#child\">child</a>, &amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#children\">children</a>, <a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_pci_bridge_scan\">acpi_pci_bridge_scan</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Indicate support for various _OSC capabilities. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_ext_cfg_avail\">pci_ext_cfg_avail</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#OSC_EXT_PCI_CONFIG_SUPPORT\">OSC_EXT_PCI_CONFIG_SUPPORT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_aspm_enabled\">pcie_aspm_enabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#OSC_ACTIVE_STATE_PWR_SUPPORT\">OSC_ACTIVE_STATE_PWR_SUPPORT</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#OSC_CLOCK_PWR_CAPABILITY_SUPPORT\">OSC_CLOCK_PWR_CAPABILITY_SUPPORT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_msi_enabled\">pci_msi_enabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#OSC_MSI_SUPPORT\">OSC_MSI_SUPPORT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> != <a class=\"id\" href=\"#base_flags\">base_flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_pci_osc_support\">acpi_pci_osc_support</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_acpi_add_bus_pm_notifier\">pci_acpi_add_bus_pm_notifier</a>(<a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#bus\">bus</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#wakeup\">wakeup</a>.<a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#run_wake\">run_wake</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_set_run_wake\">device_set_run_wake</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#end\">end</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_pci_root_start\">acpi_pci_root_start</a>(struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#acpi_driver_data\">acpi_driver_data</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_add_devices\">pci_bus_add_devices</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#bus\">bus</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_pci_root_remove\">acpi_pci_root_remove</a>(struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#device\">device</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_pci_root\">acpi_pci_root</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#acpi_driver_data\">acpi_driver_data</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_set_run_wake\">device_set_run_wake</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_acpi_remove_bus_pm_notifier\">pci_acpi_remove_bus_pm_notifier</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_pci_root_init\">acpi_pci_root_init</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_pci_disabled\">acpi_pci_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_acpi_crs_quirks\">pci_acpi_crs_quirks</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_bus_register_driver\">acpi_bus_register_driver</a>(&amp;<a class=\"id\" href=\"#acpi_pci_root_driver\">acpi_pci_root_driver</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#acpi_pci_root_init\">acpi_pci_root_init</a>);", 
];
xr_frag_insert('l/f1/d2b56d807df029e5ab8cbdfa6385f5734d0746.xr', __xr_tmp);
