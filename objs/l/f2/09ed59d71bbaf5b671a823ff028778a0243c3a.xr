var __xr_tmp = [
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: hwregs - Read/write access functions for the various ACPI</span>", 
"<span class=\"comment\"> *                       control and status registers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acevents.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_HARDWARE\">ACPI_HARDWARE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"hwregs\")", 
"", 
"<span class=\"comment\">/* Local Prototypes */</span>", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_hw_read_multiple\">acpi_hw_read_multiple</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#register_a\">register_a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#register_b\">register_b</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_hw_write_multiple\">acpi_hw_write_multiple</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#register_a\">register_a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#register_b\">register_b</a>);", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_validate_register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Reg                 - GAS register structure</span>", 
"<span class=\"comment\"> *              max_bit_width       - Max bit_width supported (32 or 64)</span>", 
"<span class=\"comment\"> *              Address             - Pointer to where the gas-&gt;address</span>", 
"<span class=\"comment\"> *                                    is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Validate the contents of a GAS register. Checks the GAS</span>", 
"<span class=\"comment\"> *              pointer, Address, space_id, bit_width, and bit_offset.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_hw_validate_register\">acpi_hw_validate_register</a>(struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#reg\">reg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#max_bit_width\">max_bit_width</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must have a valid pointer to a GAS structure */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#reg\">reg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Copy the target address. This handles possible alignment issues.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Address must not be null. A null address also indicates an optional</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ACPI register that is not supported, so no error message.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_64_TO_64\">ACPI_MOVE_64_TO_64</a>(<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!(*<a class=\"id\" href=\"#address\">address</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_ADDRESS\">AE_BAD_ADDRESS</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate the space_iD */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a> != <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_MEMORY\">ACPI_ADR_SPACE_SYSTEM_MEMORY</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a> != <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_IO\">ACPI_ADR_SPACE_SYSTEM_IO</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Unsupported address space: 0x%X\", <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_SUPPORT\">AE_SUPPORT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate the bit_width */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> != 8) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> != 16) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> != 32) && (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> != <a class=\"id\" href=\"#max_bit_width\">max_bit_width</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Unsupported register bit width: 0x%X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_SUPPORT\">AE_SUPPORT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate the bit_offset. Just a warning for now. */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_offset\">bit_offset</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"Unsupported register bit offset: 0x%X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_offset\">bit_offset</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_read</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Value               - Where the value is returned</span>", 
"<span class=\"comment\"> *              Reg                 - GAS register structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Read from either memory or IO space. This is a 32-bit max</span>", 
"<span class=\"comment\"> *              version of acpi_read, used internally since the overhead of</span>", 
"<span class=\"comment\"> *              64-bit values is not needed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LIMITATIONS: &lt;These limitations also apply to acpi_hw_write&gt;</span>", 
"<span class=\"comment\"> *      bit_width must be exactly 8, 16, or 32.</span>", 
"<span class=\"comment\"> *      space_iD must be system_memory or system_iO.</span>", 
"<span class=\"comment\"> *      bit_offset and access_width are currently ignored, as there has</span>", 
"<span class=\"comment\"> *          not been a need to implement these.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_hw_read\">acpi_hw_read</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#value\">value</a>, struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_NAME\">ACPI_FUNCTION_NAME</a>(<a class=\"id\" href=\"#hw_read\">hw_read</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate contents of the GAS register */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_validate_register\">acpi_hw_validate_register</a>(<a class=\"id\" href=\"#reg\">reg</a>, 32, &amp;<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize entire 32-bit return value to zero */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Two address spaces supported: Memory or IO. PCI_Config is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not supported here because the GAS structure is insufficient</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a> == <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_MEMORY\">ACPI_ADR_SPACE_SYSTEM_MEMORY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_read_memory\">acpi_os_read_memory</a>((<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"<span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ACPI_ADR_SPACE_SYSTEM_IO, validated earlier */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_read_port\">acpi_hw_read_port</a>((<a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_IO\">ACPI_DB_IO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Read:  %8.8X width %2d from %8.8X%8.8X (%s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>, <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#address\">address</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_region_name\">acpi_ut_get_region_name</a>(<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a>)));", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Value               - Value to be written</span>", 
"<span class=\"comment\"> *              Reg                 - GAS register structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Write to either memory or IO space. This is a 32-bit max</span>", 
"<span class=\"comment\"> *              version of acpi_write, used internally since the overhead of</span>", 
"<span class=\"comment\"> *              64-bit values is not needed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_hw_write\">acpi_hw_write</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>, struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_NAME\">ACPI_FUNCTION_NAME</a>(<a class=\"id\" href=\"#hw_write\">hw_write</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate contents of the GAS register */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_validate_register\">acpi_hw_validate_register</a>(<a class=\"id\" href=\"#reg\">reg</a>, 32, &amp;<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Two address spaces supported: Memory or IO. PCI_Config is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not supported here because the GAS structure is insufficient</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a> == <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_MEMORY\">ACPI_ADR_SPACE_SYSTEM_MEMORY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_write_memory\">acpi_os_write_memory</a>((<a class=\"id\" href=\"#acpi_physical_address\">acpi_physical_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"<span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ACPI_ADR_SPACE_SYSTEM_IO, validated earlier */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write_port\">acpi_hw_write_port</a>((<a class=\"id\" href=\"#acpi_io_address\">acpi_io_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_IO\">ACPI_DB_IO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Wrote: %8.8X width %2d   to %8.8X%8.8X (%s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>, <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#address\">address</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_region_name\">acpi_ut_get_region_name</a>(<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a>)));", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_clear_acpi_status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Clears all fixed and general purpose status bits</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_hw_clear_acpi_status\">acpi_hw_clear_acpi_status</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_cpu_flags\">acpi_cpu_flags</a> <a class=\"id\" href=\"#lock_flags\">lock_flags</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#hw_clear_acpi_status\">hw_clear_acpi_status</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_IO\">ACPI_DB_IO</a>, \"About to write %04X to %8.8X%8.8X\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_BITMASK_ALL_FIXED_STATUS\">ACPI_BITMASK_ALL_FIXED_STATUS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#acpi_gbl_xpm1a_status\">acpi_gbl_xpm1a_status</a>.<a class=\"id\" href=\"#address\">address</a>)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_flags\">lock_flags</a> = <a class=\"id\" href=\"#acpi_os_acquire_lock\">acpi_os_acquire_lock</a>(<a class=\"id\" href=\"#acpi_gbl_hardware_lock\">acpi_gbl_hardware_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the fixed events in PM1 A/B */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_register_write\">acpi_hw_register_write</a>(<a class=\"id\" href=\"#ACPI_REGISTER_PM1_STATUS\">ACPI_REGISTER_PM1_STATUS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_BITMASK_ALL_FIXED_STATUS\">ACPI_BITMASK_ALL_FIXED_STATUS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the GPE Bits in all GPE registers in all GPE blocks */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_walk_gpe_list\">acpi_ev_walk_gpe_list</a>(<a class=\"id\" href=\"#acpi_hw_clear_gpe_block\">acpi_hw_clear_gpe_block</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"      <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_release_lock\">acpi_os_release_lock</a>(<a class=\"id\" href=\"#acpi_gbl_hardware_lock\">acpi_gbl_hardware_lock</a>, <a class=\"id\" href=\"#lock_flags\">lock_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_get_register_bit_mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  register_id         - Index of ACPI Register to access</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      The bitmask to be used when accessing the register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Map register_id into a register bitmask.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"struct <a class=\"id\" href=\"#acpi_bit_register_info\">acpi_bit_register_info</a> *<a class=\"id\" href=\"#acpi_hw_get_bit_register_info\">acpi_hw_get_bit_register_info</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_id\">register_id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#register_id\">register_id</a> &gt; <a class=\"id\" href=\"#ACPI_BITREG_MAX\">ACPI_BITREG_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Invalid BitRegister ID: 0x%X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#register_id\">register_id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (&amp;<a class=\"id\" href=\"#acpi_gbl_bit_register_info\">acpi_gbl_bit_register_info</a>[<a class=\"id\" href=\"#register_id\">register_id</a>]);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_write_pm1_control</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  pm1a_control        - Value to be written to PM1A control</span>", 
"<span class=\"comment\"> *              pm1b_control        - Value to be written to PM1B control</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Write the PM1 A/B control registers. These registers are</span>", 
"<span class=\"comment\"> *              different than than the PM1 A/B status and enable registers</span>", 
"<span class=\"comment\"> *              in that different values can be written to the A/B registers.</span>", 
"<span class=\"comment\"> *              Most notably, the SLP_TYP bits can be different, as per the</span>", 
"<span class=\"comment\"> *              values returned from the _Sx predefined methods.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_hw_write_pm1_control\">acpi_hw_write_pm1_control</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pm1a_control\">pm1a_control</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pm1b_control\">pm1b_control</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#hw_write_pm1_control\">hw_write_pm1_control</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_write\">acpi_hw_write</a>(<a class=\"id\" href=\"#pm1a_control\">pm1a_control</a>, &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xpm1a_control_block\">xpm1a_control_block</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xpm1b_control_block\">xpm1b_control_block</a>.<a class=\"id\" href=\"#address\">address</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_write\">acpi_hw_write</a>(<a class=\"id\" href=\"#pm1b_control\">pm1b_control</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xpm1b_control_block\">xpm1b_control_block</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_register_read</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  register_id         - ACPI Register ID</span>", 
"<span class=\"comment\"> *              return_value        - Where the register value is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status and the value read.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Read from the specified ACPI register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_hw_register_read\">acpi_hw_register_read</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_id\">register_id</a>, <a class=\"id\" href=\"#u32\">u32</a> * <a class=\"id\" href=\"#return_value\">return_value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#hw_register_read\">hw_register_read</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#register_id\">register_id</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REGISTER_PM1_STATUS\">ACPI_REGISTER_PM1_STATUS</a>:<span class=\"ts\"/><span class=\"comment\">/* PM1 A/B: 16-bit access each */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_read_multiple\">acpi_hw_read_multiple</a>(&amp;<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#acpi_gbl_xpm1a_status\">acpi_gbl_xpm1a_status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#acpi_gbl_xpm1b_status\">acpi_gbl_xpm1b_status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REGISTER_PM1_ENABLE\">ACPI_REGISTER_PM1_ENABLE</a>:<span class=\"ts\"/><span class=\"comment\">/* PM1 A/B: 16-bit access each */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_read_multiple\">acpi_hw_read_multiple</a>(&amp;<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#acpi_gbl_xpm1a_enable\">acpi_gbl_xpm1a_enable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#acpi_gbl_xpm1b_enable\">acpi_gbl_xpm1b_enable</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REGISTER_PM1_CONTROL\">ACPI_REGISTER_PM1_CONTROL</a>:<span class=\"ts\"/><span class=\"comment\">/* PM1 A/B: 16-bit access each */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_read_multiple\">acpi_hw_read_multiple</a>(&amp;<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#xpm1a_control_block\">xpm1a_control_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#xpm1b_control_block\">xpm1b_control_block</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Zero the write-only bits. From the ACPI specification, \"Hardware</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Write-Only Bits\": \"Upon reads to registers with write-only bits,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * software masks out all write-only bits.\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> &= ~<a class=\"id\" href=\"#ACPI_PM1_CONTROL_WRITEONLY_BITS\">ACPI_PM1_CONTROL_WRITEONLY_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REGISTER_PM2_CONTROL\">ACPI_REGISTER_PM2_CONTROL</a>:<span class=\"ts\"/><span class=\"comment\">/* 8-bit access */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_read\">acpi_hw_read</a>(&amp;<a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xpm2_control_block\">xpm2_control_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REGISTER_PM_TIMER\">ACPI_REGISTER_PM_TIMER</a>:<span class=\"ts\"/><span class=\"comment\">/* 32-bit access */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_read\">acpi_hw_read</a>(&amp;<a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xpm_timer_block\">xpm_timer_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REGISTER_SMI_COMMAND_BLOCK\">ACPI_REGISTER_SMI_COMMAND_BLOCK</a>:<span class=\"ts\"/><span class=\"comment\">/* 8-bit access */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_read_port\">acpi_hw_read_port</a>(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#smi_command\">smi_command</a>, &amp;<a class=\"id\" href=\"#value\">value</a>, 8);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Unknown Register ID: 0x%X\", <a class=\"id\" href=\"#register_id\">register_id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#return_value\">return_value</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_register_write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  register_id         - ACPI Register ID</span>", 
"<span class=\"comment\"> *              Value               - The value to write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Write to the specified ACPI register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: In accordance with the ACPI specification, this function automatically</span>", 
"<span class=\"comment\"> * preserves the value of the following bits, meaning that these bits cannot be</span>", 
"<span class=\"comment\"> * changed via this interface:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PM1_CONTROL[0] = SCI_EN</span>", 
"<span class=\"comment\"> * PM1_CONTROL[9]</span>", 
"<span class=\"comment\"> * PM1_STATUS[11]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ACPI References:</span>", 
"<span class=\"comment\"> * 1) Hardware Ignored Bits: When software writes to a register with ignored</span>", 
"<span class=\"comment\"> *      bit fields, it preserves the ignored bit fields</span>", 
"<span class=\"comment\"> * 2) SCI_EN: OSPM always preserves this bit position</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_hw_register_write\">acpi_hw_register_write</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_id\">register_id</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#read_value\">read_value</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#hw_register_write\">hw_register_write</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#register_id\">register_id</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REGISTER_PM1_STATUS\">ACPI_REGISTER_PM1_STATUS</a>:<span class=\"ts\"/><span class=\"comment\">/* PM1 A/B: 16-bit access each */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Handle the \"ignored\" bit in PM1 Status. According to the ACPI</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * specification, ignored bits are to be preserved when writing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Normally, this would mean a read/modify/write sequence. However,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * preserving a bit in the status register is different. Writing a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * one clears the status, and writing a zero preserves the status.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Therefore, we must always write zero to the ignored bit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This behavior is clarified in the ACPI 4.0 specification.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> &= ~<a class=\"id\" href=\"#ACPI_PM1_STATUS_PRESERVED_BITS\">ACPI_PM1_STATUS_PRESERVED_BITS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write_multiple\">acpi_hw_write_multiple</a>(<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#acpi_gbl_xpm1a_status\">acpi_gbl_xpm1a_status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#acpi_gbl_xpm1b_status\">acpi_gbl_xpm1b_status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REGISTER_PM1_ENABLE\">ACPI_REGISTER_PM1_ENABLE</a>:<span class=\"ts\"/><span class=\"comment\">/* PM1 A/B: 16-bit access */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write_multiple\">acpi_hw_write_multiple</a>(<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#acpi_gbl_xpm1a_enable\">acpi_gbl_xpm1a_enable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#acpi_gbl_xpm1b_enable\">acpi_gbl_xpm1b_enable</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REGISTER_PM1_CONTROL\">ACPI_REGISTER_PM1_CONTROL</a>:<span class=\"ts\"/><span class=\"comment\">/* PM1 A/B: 16-bit access each */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Perform a read first to preserve certain bits (per ACPI spec)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note: This includes SCI_EN, we never want to change this bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_read_multiple\">acpi_hw_read_multiple</a>(&amp;<a class=\"id\" href=\"#read_value\">read_value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#xpm1a_control_block\">xpm1a_control_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#xpm1b_control_block\">xpm1b_control_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Insert the bits to be preserved */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_INSERT_BITS\">ACPI_INSERT_BITS</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#ACPI_PM1_CONTROL_PRESERVED_BITS\">ACPI_PM1_CONTROL_PRESERVED_BITS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#read_value\">read_value</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Now we can write the data */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write_multiple\">acpi_hw_write_multiple</a>(<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xpm1a_control_block\">xpm1a_control_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xpm1b_control_block\">xpm1b_control_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REGISTER_PM2_CONTROL\">ACPI_REGISTER_PM2_CONTROL</a>:<span class=\"ts\"/><span class=\"comment\">/* 8-bit access */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For control registers, all reserved bits must be preserved,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as per the ACPI spec.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_read\">acpi_hw_read</a>(&amp;<a class=\"id\" href=\"#read_value\">read_value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xpm2_control_block\">xpm2_control_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Insert the bits to be preserved */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_INSERT_BITS\">ACPI_INSERT_BITS</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#ACPI_PM2_CONTROL_PRESERVED_BITS\">ACPI_PM2_CONTROL_PRESERVED_BITS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#read_value\">read_value</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_write\">acpi_hw_write</a>(<a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xpm2_control_block\">xpm2_control_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REGISTER_PM_TIMER\">ACPI_REGISTER_PM_TIMER</a>:<span class=\"ts\"/><span class=\"comment\">/* 32-bit access */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write\">acpi_hw_write</a>(<a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#xpm_timer_block\">xpm_timer_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REGISTER_SMI_COMMAND_BLOCK\">ACPI_REGISTER_SMI_COMMAND_BLOCK</a>:<span class=\"ts\"/><span class=\"comment\">/* 8-bit access */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SMI_CMD is currently always in IO space */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_write_port\">acpi_hw_write_port</a>(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#smi_command\">smi_command</a>, <a class=\"id\" href=\"#value\">value</a>, 8);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Unknown Register ID: 0x%X\", <a class=\"id\" href=\"#register_id\">register_id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"      <a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_read_multiple</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Value               - Where the register value is returned</span>", 
"<span class=\"comment\"> *              register_a           - First ACPI register (required)</span>", 
"<span class=\"comment\"> *              register_b           - Second ACPI register (optional)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Read from the specified two-part ACPI register (such as PM1 A/B)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_hw_read_multiple\">acpi_hw_read_multiple</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#register_a\">register_a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#register_b\">register_b</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value_a\">value_a</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value_b\">value_b</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The first register is always required */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_read\">acpi_hw_read</a>(&amp;<a class=\"id\" href=\"#value_a\">value_a</a>, <a class=\"id\" href=\"#register_a\">register_a</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Second register is optional */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#register_b\">register_b</a>-><a class=\"id\" href=\"#address\">address</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_read\">acpi_hw_read</a>(&amp;<a class=\"id\" href=\"#value_b\">value_b</a>, <a class=\"id\" href=\"#register_b\">register_b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OR the two return values together. No shifting or masking is necessary,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because of how the PM1 registers are defined in the ACPI specification:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"Although the bits can be split between the two register blocks (each</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * register block has a unique pointer within the FADT), the bit positions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are maintained. The register block with unimplemented bits (that is,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * those implemented in the other register block) always returns zeros,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and writes have no side effects\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = (<a class=\"id\" href=\"#value_a\">value_a</a> | <a class=\"id\" href=\"#value_b\">value_b</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_hw_write_multiple</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Value               - The value to write</span>", 
"<span class=\"comment\"> *              register_a           - First ACPI register (required)</span>", 
"<span class=\"comment\"> *              register_b           - Second ACPI register (optional)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Write to the specified two-part ACPI register (such as PM1 A/B)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_hw_write_multiple\">acpi_hw_write_multiple</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#register_a\">register_a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#register_b\">register_b</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The first register is always required */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write\">acpi_hw_write</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#register_a\">register_a</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Second register is optional</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No bit shifting or clearing is necessary, because of how the PM1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * registers are defined in the ACPI specification:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"Although the bits can be split between the two register blocks (each</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * register block has a unique pointer within the FADT), the bit positions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are maintained. The register block with unimplemented bits (that is,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * those implemented in the other register block) always returns zeros,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and writes have no side effects\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#register_b\">register_b</a>-><a class=\"id\" href=\"#address\">address</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_write\">acpi_hw_write</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#register_b\">register_b</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
];
xr_frag_insert('l/f2/09ed59d71bbaf5b671a823ff028778a0243c3a.xr', __xr_tmp);
