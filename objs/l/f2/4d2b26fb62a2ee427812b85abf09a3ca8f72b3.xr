var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Expand the file descriptor table.</span>", 
"<span class=\"comment\"> * This function will allocate a new fdtable and both fd array and fdset, of</span>", 
"<span class=\"comment\"> * the given size.</span>", 
"<span class=\"comment\"> * Return &lt;0 error code on error; 1 on successful completion.</span>", 
"<span class=\"comment\"> * The files-&gt;file_lock should be held on entry, and will be held on exit.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#expand_fdtable\">expand_fdtable</a>(struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a>, int <a class=\"id\" href=\"#nr\">nr</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#new_fdt\">new_fdt</a>, *<a class=\"id\" href=\"#cur_fdt\">cur_fdt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fdt\">new_fdt</a> = <a class=\"id\" href=\"#alloc_fdtable\">alloc_fdtable</a>(<a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_fdt\">new_fdt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * extremely unlikely race - sysctl_nr_open decreased between the check in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * caller and alloc_fdtable().  Cheaper to catch it here...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> <= <a class=\"id\" href=\"#nr\">nr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_fdtable\">__free_fdtable</a>(<a class=\"id\" href=\"#new_fdt\">new_fdt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EMFILE\">EMFILE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check again since another task may have expanded the fd table while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we dropped the lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cur_fdt\">cur_fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> >= <a class=\"id\" href=\"#cur_fdt\">cur_fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Continue as planned */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_fdtable\">copy_fdtable</a>(<a class=\"id\" href=\"#new_fdt\">new_fdt</a>, <a class=\"id\" href=\"#cur_fdt\">cur_fdt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#fdt\">fdt</a>, <a class=\"id\" href=\"#new_fdt\">new_fdt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur_fdt\">cur_fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> &gt; <a class=\"id\" href=\"#NR_OPEN_DEFAULT\">NR_OPEN_DEFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_fdtable\">free_fdtable</a>(<a class=\"id\" href=\"#cur_fdt\">cur_fdt</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Somebody else expanded, so undo our attempt */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_fdtable\">__free_fdtable</a>(<a class=\"id\" href=\"#new_fdt\">new_fdt</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Expand files.</span>", 
"<span class=\"comment\"> * This function will expand the file structures, if the requested size exceeds</span>", 
"<span class=\"comment\"> * the current capacity and there is room for expansion.</span>", 
"<span class=\"comment\"> * Return &lt;0 error code on error; 0 when nothing done; 1 when files were</span>", 
"<span class=\"comment\"> * expanded and execution may have blocked.</span>", 
"<span class=\"comment\"> * The files-&gt;file_lock should be held on entry, and will be held on exit.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#expand_files\">expand_files</a>(struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a>, int <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#files\">files</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * N.B. For clone tasks sharing a files structure, this test</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will limit the total number of files that can be opened.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> >= <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_NOFILE\">RLIMIT_NOFILE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EMFILE\">EMFILE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do we need to expand? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> &lt; <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Can we expand? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> >= <a class=\"id\" href=\"#sysctl_nr_open\">sysctl_nr_open</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EMFILE\">EMFILE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All good, so we try */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#expand_fdtable\">expand_fdtable</a>(<a class=\"id\" href=\"#files\">files</a>, <a class=\"id\" href=\"#nr\">nr</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#count_open_files\">count_open_files</a>(struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the last open fd */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#size\">size</a>/(8*sizeof(long)); <a class=\"id\" href=\"#i\">i</a> &gt; 0; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>[--<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#i\">i</a>+1) * 8 * sizeof(long);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a new files structure and copy contents from the</span>", 
"<span class=\"comment\"> * passed in files structure.</span>", 
"<span class=\"comment\"> * errorp will be valid only when the returned files_struct is NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#dup_fd\">dup_fd</a>(struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#oldf\">oldf</a>, int *<a class=\"id\" href=\"#errorp\">errorp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#newf\">newf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> **<a class=\"id\" href=\"#old_fds\">old_fds</a>, **<a class=\"id\" href=\"#new_fds\">new_fds</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#open_files\">open_files</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#old_fdt\">old_fdt</a>, *<a class=\"id\" href=\"#new_fdt\">new_fdt</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errorp\">errorp</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newf\">newf</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#files_cachep\">files_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#newf\">newf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#newf\">newf</a>-><a class=\"id\" href=\"#count\">count</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#newf\">newf</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newf\">newf</a>-><a class=\"id\" href=\"#next_fd\">next_fd</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fdt\">new_fdt</a> = &amp;<a class=\"id\" href=\"#newf\">newf</a>-><a class=\"id\" href=\"#fdtab\">fdtab</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> = <a class=\"id\" href=\"#NR_OPEN_DEFAULT\">NR_OPEN_DEFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a> = (<a class=\"id\" href=\"#fd_set\">fd_set</a> *)&amp;<a class=\"id\" href=\"#newf\">newf</a>-><a class=\"id\" href=\"#close_on_exec_init\">close_on_exec_init</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a> = (<a class=\"id\" href=\"#fd_set\">fd_set</a> *)&amp;<a class=\"id\" href=\"#newf\">newf</a>-><a class=\"id\" href=\"#open_fds_init\">open_fds_init</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#fd\">fd</a> = &amp;<a class=\"id\" href=\"#newf\">newf</a>-><a class=\"id\" href=\"#fd_array\">fd_array</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#oldf\">oldf</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_fdt\">old_fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#oldf\">oldf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_files\">open_files</a> = <a class=\"id\" href=\"#count_open_files\">count_open_files</a>(<a class=\"id\" href=\"#old_fdt\">old_fdt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check whether we need to allocate a larger fd array and fd set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#open_files\">open_files</a> &gt; <a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#oldf\">oldf</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fdt\">new_fdt</a> != &amp;<a class=\"id\" href=\"#newf\">newf</a>-><a class=\"id\" href=\"#fdtab\">fdtab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_fdtable\">__free_fdtable</a>(<a class=\"id\" href=\"#new_fdt\">new_fdt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fdt\">new_fdt</a> = <a class=\"id\" href=\"#alloc_fdtable\">alloc_fdtable</a>(<a class=\"id\" href=\"#open_files\">open_files</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_fdt\">new_fdt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errorp\">errorp</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* beyond sysctl_nr_open; nothing to do */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> &lt; <a class=\"id\" href=\"#open_files\">open_files</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_fdtable\">__free_fdtable</a>(<a class=\"id\" href=\"#new_fdt\">new_fdt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errorp\">errorp</a> = -<a class=\"id\" href=\"#EMFILE\">EMFILE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Reacquire the oldf lock and a pointer to its fd table</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * who knows it may have a new bigger fd table. We need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the latest pointer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#oldf\">oldf</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_fdt\">old_fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#oldf\">oldf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#open_files\">open_files</a> = <a class=\"id\" href=\"#count_open_files\">count_open_files</a>(<a class=\"id\" href=\"#old_fdt\">old_fdt</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_fds\">old_fds</a> = <a class=\"id\" href=\"#old_fdt\">old_fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fds\">new_fds</a> = <a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_fdt\">old_fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>, <a class=\"id\" href=\"#open_files\">open_files</a>/8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_fdt\">old_fdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>, <a class=\"id\" href=\"#open_files\">open_files</a>/8);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#open_files\">open_files</a>; <a class=\"id\" href=\"#i\">i</a> != 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a> = *<a class=\"id\" href=\"#old_fds\">old_fds</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_file\">get_file</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The fd may be claimed in the fd bitmap but not yet</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * instantiated in the files array if a sibling thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is partway through open().  So make sure that this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * fd is available to the new process.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FD_CLR\">FD_CLR</a>(<a class=\"id\" href=\"#open_files\">open_files</a> - <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(*<a class=\"id\" href=\"#new_fds\">new_fds</a>++, <a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#oldf\">oldf</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* compute the remainder to be cleared */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = (<a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> - <a class=\"id\" href=\"#open_files\">open_files</a>) * sizeof(struct <a class=\"id\" href=\"#file\">file</a> *);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This is long word aligned thus could use a optimized version */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#new_fds\">new_fds</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> &gt; <a class=\"id\" href=\"#open_files\">open_files</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#left\">left</a> = (<a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>-<a class=\"id\" href=\"#open_files\">open_files</a>)/8;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#open_files\">open_files</a> / (8 * sizeof(unsigned long));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>[<a class=\"id\" href=\"#start\">start</a>], 0, <a class=\"id\" href=\"#left\">left</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#new_fdt\">new_fdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>[<a class=\"id\" href=\"#start\">start</a>], 0, <a class=\"id\" href=\"#left\">left</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#newf\">newf</a>-><a class=\"id\" href=\"#fdt\">fdt</a>, <a class=\"id\" href=\"#new_fdt\">new_fdt</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#newf\">newf</a>;", 
"", 
"<a class=\"id\" href=\"#out_release\">out_release</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#files_cachep\">files_cachep</a>, <a class=\"id\" href=\"#newf\">newf</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#fdtable_defer_list_init\">fdtable_defer_list_init</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable_defer\">fdtable_defer</a> *<a class=\"id\" href=\"#fddef\">fddef</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#fdtable_defer_list\">fdtable_defer_list</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#fddef\">fddef</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#fddef\">fddef</a>-><a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#free_fdtable_work\">free_fdtable_work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fddef\">fddef</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#files_defer_init\">files_defer_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fdtable_defer_list_init\">fdtable_defer_list_init</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_nr_open_max\">sysctl_nr_open_max</a> = <a class=\"id\" href=\"#min\">min</a>((<a class=\"id\" href=\"#size_t\">size_t</a>)<a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>, ~(<a class=\"id\" href=\"#size_t\">size_t</a>)0/sizeof(void *)) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     -<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#files_struct\">files_struct</a> <a class=\"id\" href=\"#init_files\">init_files</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#count\">count</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(1),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fdt\">fdt</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#init_files\">init_files</a>.<a class=\"id\" href=\"#fdtab\">fdtab</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fdtab\">fdtab</a><span class=\"ts\"/><span class=\"ts\"/>= {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#max_fds\">max_fds</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NR_OPEN_DEFAULT\">NR_OPEN_DEFAULT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#fd\">fd</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#init_files\">init_files</a>.<a class=\"id\" href=\"#fd_array\">fd_array</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#close_on_exec\">close_on_exec</a><span class=\"ts\"/>= (<a class=\"id\" href=\"#fd_set\">fd_set</a> *)&amp;<a class=\"id\" href=\"#init_files\">init_files</a>.<a class=\"id\" href=\"#close_on_exec_init\">close_on_exec_init</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#open_fds\">open_fds</a><span class=\"ts\"/>= (<a class=\"id\" href=\"#fd_set\">fd_set</a> *)&amp;<a class=\"id\" href=\"#init_files\">init_files</a>.<a class=\"id\" href=\"#open_fds_init\">open_fds_init</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#file_lock\">file_lock</a><span class=\"ts\"/>= <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(<a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#file_lock\">file_lock</a>),", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * allocate a file descriptor, mark it busy.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#alloc_fd\">alloc_fd</a>(unsigned <a class=\"id\" href=\"#start\">start</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#fd\">fd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fd\">fd</a> &lt; <a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#next_fd\">next_fd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#next_fd\">next_fd</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fd\">fd</a> &lt; <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>, <a class=\"id\" href=\"#fd\">fd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#expand_files\">expand_files</a>(<a class=\"id\" href=\"#files\">files</a>, <a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we needed to expand the fs array we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might have blocked - try again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> <= <a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#next_fd\">next_fd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#next_fd\">next_fd</a> = <a class=\"id\" href=\"#fd\">fd</a> + 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FD_SET\">FD_SET</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#O_CLOEXEC\">O_CLOEXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FD_SET\">FD_SET</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FD_CLR\">FD_CLR</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#fd\">fd</a>;", 
"#if 1", 
"<span class=\"ts\"/><span class=\"comment\">/* Sanity check */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>[<a class=\"id\" href=\"#fd\">fd</a>]) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"alloc_fd: slot %d not NULL!\\n\", <a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>[<a class=\"id\" href=\"#fd\">fd</a>], <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#get_unused_fd\">get_unused_fd</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_fd\">alloc_fd</a>(0, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_unused_fd\">get_unused_fd</a>);", 
];
xr_frag_insert('l/f2/4d2b26fb62a2ee427812b85abf09a3ca8f72b3.xr', __xr_tmp);
