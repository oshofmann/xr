var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> -= <a class=\"id\" href=\"#SWP_SCANNING\">SWP_SCANNING</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#lowest_alloc\">lowest_alloc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only set when SWP_DISCARDABLE, and there's a scan</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for a free cluster in progress or just completed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#found_free_cluster\">found_free_cluster</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * To optimize wear-levelling, discard the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * old data of the cluster, taking care not to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * discard any of its pages that have already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * been allocated by racing tasks (offset has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * already stepped over any at the beginning).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#highest_alloc\">highest_alloc</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#lowest_alloc\">lowest_alloc</a> <= <a class=\"id\" href=\"#last_in_cluster\">last_in_cluster</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_in_cluster\">last_in_cluster</a> = <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#lowest_alloc\">lowest_alloc</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SWP_DISCARDING\">SWP_DISCARDING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#last_in_cluster\">last_in_cluster</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#discard_swap_cluster\">discard_swap_cluster</a>(<a class=\"id\" href=\"#si\">si</a>, <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_in_cluster\">last_in_cluster</a> - <a class=\"id\" href=\"#offset\">offset</a> + 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#lowest_alloc\">lowest_alloc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#SWP_DISCARDING\">SWP_DISCARDING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();<span class=\"ts\"/><span class=\"comment\">/* wake_up_bit advises this */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_bit\">wake_up_bit</a>(&amp;<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#SWP_DISCARDING\">SWP_DISCARDING</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_DISCARDING\">SWP_DISCARDING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Delay using pages allocated by racing tasks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * until the whole discard has been issued. We</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * could defer that delay until swap_writepage,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * but it's easier to keep this self-contained.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_bit\">wait_on_bit</a>(&amp;<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#SWP_DISCARDING\">SWP_DISCARDING</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_discard\">wait_for_discard</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Note pages allocated by racing tasks while</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * scan for a free cluster is in progress, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * that its final discard can exclude them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#lowest_alloc\">lowest_alloc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#lowest_alloc\">lowest_alloc</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &gt; <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#highest_alloc\">highest_alloc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#highest_alloc\">highest_alloc</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<a class=\"id\" href=\"#scan\">scan</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>while (++<a class=\"id\" href=\"#offset\">offset</a> <= <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#highest_bit\">highest_bit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#offset\">offset</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#checks\">checks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_swap_full\">vm_swap_full</a>() && <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#offset\">offset</a>] == <a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#checks\">checks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(--<a class=\"id\" href=\"#latency_ration\">latency_ration</a> &lt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latency_ration\">latency_ration</a> = <a class=\"id\" href=\"#LATENCY_LIMIT\">LATENCY_LIMIT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#lowest_bit\">lowest_bit</a>;", 
"<span class=\"ts\"/>while (++<a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#scan_base\">scan_base</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#offset\">offset</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#checks\">checks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_swap_full\">vm_swap_full</a>() && <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#offset\">offset</a>] == <a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#checks\">checks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(--<a class=\"id\" href=\"#latency_ration\">latency_ration</a> &lt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#latency_ration\">latency_ration</a> = <a class=\"id\" href=\"#LATENCY_LIMIT\">LATENCY_LIMIT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"", 
"<a class=\"id\" href=\"#no_page\">no_page</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> -= <a class=\"id\" href=\"#SWP_SCANNING\">SWP_SCANNING</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#get_swap_page\">get_swap_page</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#wrapped\">wrapped</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#noswap\">noswap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a>--;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#type\">type</a> >= 0 && <a class=\"id\" href=\"#wrapped\">wrapped</a> &lt; 2; <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> &lt; 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#wrapped\">wrapped</a> && <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#prio\">prio</a> != <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#next\">next</a>]-><a class=\"id\" href=\"#prio\">prio</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrapped\">wrapped</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#highest_bit\">highest_bit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_WRITEOK\">SWP_WRITEOK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is called for allocating swap entry for cache */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#scan_swap_map\">scan_swap_map</a>(<a class=\"id\" href=\"#si\">si</a>, <a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#swp_entry\">swp_entry</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a>++;", 
"<a class=\"id\" href=\"#noswap\">noswap</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a>) {0};", 
"}", 
"", 
"<span class=\"comment\">/* The only caller of this function is now susupend routine */</span>", 
"<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#get_swap_page_of_type\">get_swap_page_of_type</a>(int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#si\">si</a> && (<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_WRITEOK\">SWP_WRITEOK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is called for allocating swap entry, not cache */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#scan_swap_map\">scan_swap_map</a>(<a class=\"id\" href=\"#si\">si</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#swp_entry\">swp_entry</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a>) {0};", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#swap_info_get\">swap_info_get</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#swp_type\">swp_type</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> >= <a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_nofile\">bad_nofile</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_USED\">SWP_USED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_device\">bad_device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#swp_offset\">swp_offset</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_offset\">bad_offset</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#offset\">offset</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_free\">bad_free</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<a class=\"id\" href=\"#bad_free\">bad_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"swap_free: %s%08lx\\n\", <a class=\"id\" href=\"#Unused_offset\">Unused_offset</a>, <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<a class=\"id\" href=\"#bad_offset\">bad_offset</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"swap_free: %s%08lx\\n\", <a class=\"id\" href=\"#Bad_offset\">Bad_offset</a>, <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<a class=\"id\" href=\"#bad_device\">bad_device</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"swap_free: %s%08lx\\n\", <a class=\"id\" href=\"#Unused_file\">Unused_file</a>, <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<a class=\"id\" href=\"#bad_nofile\">bad_nofile</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"swap_free: %s%08lx\\n\", <a class=\"id\" href=\"#Bad_file\">Bad_file</a>, <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static unsigned char <a class=\"id\" href=\"#swap_entry_free\">swap_entry_free</a>(struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, unsigned char <a class=\"id\" href=\"#usage\">usage</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#swp_offset\">swp_offset</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#has_cache\">has_cache</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#offset\">offset</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#has_cache\">has_cache</a> = <a class=\"id\" href=\"#count\">count</a> &amp; <a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> &= ~<a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#usage\">usage</a> == <a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#has_cache\">has_cache</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#has_cache\">has_cache</a> = 0;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#count\">count</a> == <a class=\"id\" href=\"#SWAP_MAP_SHMEM\">SWAP_MAP_SHMEM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Or we could insist on shmem.c using a special</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * swap_shmem_free() and free_shmem_swap_and_cache()...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#count\">count</a> &amp; ~<a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>) <= <a class=\"id\" href=\"#SWAP_MAP_MAX\">SWAP_MAP_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_count_continued\">swap_count_continued</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#SWAP_MAP_MAX\">SWAP_MAP_MAX</a> | <a class=\"id\" href=\"#COUNT_CONTINUED\">COUNT_CONTINUED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#SWAP_MAP_MAX\">SWAP_MAP_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_swap\">mem_cgroup_uncharge_swap</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usage\">usage</a> = <a class=\"id\" href=\"#count\">count</a> | <a class=\"id\" href=\"#has_cache\">has_cache</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#offset\">offset</a>] = <a class=\"id\" href=\"#usage\">usage</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* free if no reference */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#usage\">usage</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#lowest_bit\">lowest_bit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#lowest_bit\">lowest_bit</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &gt; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#highest_bit\">highest_bit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#highest_bit\">highest_bit</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#next\">next</a> >= 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> &gt; <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#next\">next</a>]-><a class=\"id\" href=\"#prio\">prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_list\">swap_list</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_swap_pages\">nr_swap_pages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inuse_pages\">inuse_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_BLKDEV\">SWP_BLKDEV</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#fops\">fops</a>-><a class=\"id\" href=\"#swap_slot_free_notify\">swap_slot_free_notify</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#fops\">fops</a>-><a class=\"id\" href=\"#swap_slot_free_notify\">swap_slot_free_notify</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#usage\">usage</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Caller has made sure that the swapdevice corresponding to entry</span>", 
"<span class=\"comment\"> * is still around or has not been recycled.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#swap_free\">swap_free</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#swap_info_get\">swap_info_get</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_entry_free\">swap_entry_free</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#entry\">entry</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called after dropping swapcache to decrease refcnt to swap entries.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#swapcache_free\">swapcache_free</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#swap_info_get\">swap_info_get</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#swap_entry_free\">swap_entry_free</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_swapcache\">mem_cgroup_uncharge_swapcache</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#count\">count</a> != 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * How many references to page are currently swapped out?</span>", 
"<span class=\"comment\"> * This does not give an exact answer when swap count is continued,</span>", 
"<span class=\"comment\"> * but does include the high COUNT_CONTINUED flag to allow for that.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_swapcount\">page_swapcount</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
];
xr_frag_insert('l/f2/bb4ac47de1b2d756ff8a64a02b6cdd024fa328.xr', __xr_tmp);
