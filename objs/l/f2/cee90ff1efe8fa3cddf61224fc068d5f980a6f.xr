var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__NET_NETLINK_H\">__NET_NETLINK_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__NET_NETLINK_H\">__NET_NETLINK_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netlink\">netlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* ========================================================================</span>", 
"<span class=\"comment\"> *         Netlink Messages and Attributes Interface (As Seen On TV)</span>", 
"<span class=\"comment\"> * ------------------------------------------------------------------------</span>", 
"<span class=\"comment\"> *                          Messages Interface</span>", 
"<span class=\"comment\"> * ------------------------------------------------------------------------</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Message Format:</span>", 
"<span class=\"comment\"> *    &lt;--- nlmsg_total_size(payload)  ---&gt;</span>", 
"<span class=\"comment\"> *    &lt;-- nlmsg_msg_size(payload) -&gt;</span>", 
"<span class=\"comment\"> *   +----------+- - -+-------------+- - -+-------- - -</span>", 
"<span class=\"comment\"> *   | nlmsghdr | Pad |   Payload   | Pad | nlmsghdr</span>", 
"<span class=\"comment\"> *   +----------+- - -+-------------+- - -+-------- - -</span>", 
"<span class=\"comment\"> *   nlmsg_data(nlh)---^                   ^</span>", 
"<span class=\"comment\"> *   nlmsg_next(nlh)-----------------------+</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Payload Format:</span>", 
"<span class=\"comment\"> *    &lt;---------------------- nlmsg_len(nlh) ---------------------&gt;</span>", 
"<span class=\"comment\"> *    &lt;------ hdrlen ------&gt;       &lt;- nlmsg_attrlen(nlh, hdrlen) -&gt;</span>", 
"<span class=\"comment\"> *   +----------------------+- - -+--------------------------------+</span>", 
"<span class=\"comment\"> *   |     Family Header    | Pad |           Attributes           |</span>", 
"<span class=\"comment\"> *   +----------------------+- - -+--------------------------------+</span>", 
"<span class=\"comment\"> *   nlmsg_attrdata(nlh, hdrlen)---^</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Data Structures:</span>", 
"<span class=\"comment\"> *   struct nlmsghdr<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>netlink message header</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Message Construction:</span>", 
"<span class=\"comment\"> *   nlmsg_new()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>create a new netlink message</span>", 
"<span class=\"comment\"> *   nlmsg_put()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>add a netlink message to an skb</span>", 
"<span class=\"comment\"> *   nlmsg_put_answer()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>callback based nlmsg_put()</span>", 
"<span class=\"comment\"> *   nlmsg_end()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>finalize netlink message</span>", 
"<span class=\"comment\"> *   nlmsg_get_pos()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return current position in message</span>", 
"<span class=\"comment\"> *   nlmsg_trim()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>trim part of message</span>", 
"<span class=\"comment\"> *   nlmsg_cancel()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>cancel message construction</span>", 
"<span class=\"comment\"> *   nlmsg_free()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>free a netlink message</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Message Sending:</span>", 
"<span class=\"comment\"> *   nlmsg_multicast()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>multicast message to several groups</span>", 
"<span class=\"comment\"> *   nlmsg_unicast()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unicast a message to a single socket</span>", 
"<span class=\"comment\"> *   nlmsg_notify()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>send notification message</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Message Length Calculations:</span>", 
"<span class=\"comment\"> *   nlmsg_msg_size(payload)<span class=\"ts\"/><span class=\"ts\"/>length of message w/o padding</span>", 
"<span class=\"comment\"> *   nlmsg_total_size(payload)<span class=\"ts\"/><span class=\"ts\"/>length of message w/ padding</span>", 
"<span class=\"comment\"> *   nlmsg_padlen(payload)<span class=\"ts\"/><span class=\"ts\"/>length of padding at tail</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Message Payload Access:</span>", 
"<span class=\"comment\"> *   nlmsg_data(nlh)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>head of message payload</span>", 
"<span class=\"comment\"> *   nlmsg_len(nlh)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>length of message payload</span>", 
"<span class=\"comment\"> *   nlmsg_attrdata(nlh, hdrlen)<span class=\"ts\"/>head of attributes data</span>", 
"<span class=\"comment\"> *   nlmsg_attrlen(nlh, hdrlen)<span class=\"ts\"/><span class=\"ts\"/>length of attributes data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Message Parsing:</span>", 
"<span class=\"comment\"> *   nlmsg_ok(nlh, remaining)<span class=\"ts\"/><span class=\"ts\"/>does nlh fit into remaining bytes?</span>", 
"<span class=\"comment\"> *   nlmsg_next(nlh, remaining)<span class=\"ts\"/><span class=\"ts\"/>get next netlink message</span>", 
"<span class=\"comment\"> *   nlmsg_parse()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>parse attributes of a message</span>", 
"<span class=\"comment\"> *   nlmsg_find_attr()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>find an attribute in a message</span>", 
"<span class=\"comment\"> *   nlmsg_for_each_msg()<span class=\"ts\"/><span class=\"ts\"/>loop over all messages</span>", 
"<span class=\"comment\"> *   nlmsg_validate()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>validate netlink message incl. attrs</span>", 
"<span class=\"comment\"> *   nlmsg_for_each_attr()<span class=\"ts\"/><span class=\"ts\"/>loop over all attributes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Misc:</span>", 
"<span class=\"comment\"> *   nlmsg_report()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>report back to application?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ------------------------------------------------------------------------</span>", 
"<span class=\"comment\"> *                          Attributes Interface</span>", 
"<span class=\"comment\"> * ------------------------------------------------------------------------</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attribute Format:</span>", 
"<span class=\"comment\"> *    &lt;------- nla_total_size(payload) -------&gt;</span>", 
"<span class=\"comment\"> *    &lt;---- nla_attr_size(payload) -----&gt;</span>", 
"<span class=\"comment\"> *   +----------+- - -+- - - - - - - - - +- - -+-------- - -</span>", 
"<span class=\"comment\"> *   |  Header  | Pad |     Payload      | Pad |  Header</span>", 
"<span class=\"comment\"> *   +----------+- - -+- - - - - - - - - +- - -+-------- - -</span>", 
"<span class=\"comment\"> *                     &lt;- nla_len(nla) -&gt;      ^</span>", 
"<span class=\"comment\"> *   nla_data(nla)----^                        |</span>", 
"<span class=\"comment\"> *   nla_next(nla)-----------------------------'</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Data Structures:</span>", 
"<span class=\"comment\"> *   struct nlattr<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>netlink attribute header</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attribute Construction:</span>", 
"<span class=\"comment\"> *   nla_reserve(skb, type, len)<span class=\"ts\"/>reserve room for an attribute</span>", 
"<span class=\"comment\"> *   nla_reserve_nohdr(skb, len)<span class=\"ts\"/>reserve room for an attribute w/o hdr</span>", 
"<span class=\"comment\"> *   nla_put(skb, type, len, data)<span class=\"ts\"/>add attribute to skb</span>", 
"<span class=\"comment\"> *   nla_put_nohdr(skb, len, data)<span class=\"ts\"/>add attribute w/o hdr</span>", 
"<span class=\"comment\"> *   nla_append(skb, len, data)<span class=\"ts\"/><span class=\"ts\"/>append data to skb</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attribute Construction for Basic Types:</span>", 
"<span class=\"comment\"> *   nla_put_u8(skb, type, value)<span class=\"ts\"/>add u8 attribute to skb</span>", 
"<span class=\"comment\"> *   nla_put_u16(skb, type, value)<span class=\"ts\"/>add u16 attribute to skb</span>", 
"<span class=\"comment\"> *   nla_put_u32(skb, type, value)<span class=\"ts\"/>add u32 attribute to skb</span>", 
"<span class=\"comment\"> *   nla_put_u64(skb, type, value)<span class=\"ts\"/>add u64 attribute to skb</span>", 
"<span class=\"comment\"> *   nla_put_string(skb, type, str)<span class=\"ts\"/>add string attribute to skb</span>", 
"<span class=\"comment\"> *   nla_put_flag(skb, type)<span class=\"ts\"/><span class=\"ts\"/>add flag attribute to skb</span>", 
"<span class=\"comment\"> *   nla_put_msecs(skb, type, jiffies)<span class=\"ts\"/>add msecs attribute to skb</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Exceptions Based Attribute Construction:</span>", 
"<span class=\"comment\"> *   NLA_PUT(skb, type, len, data)<span class=\"ts\"/>add attribute to skb</span>", 
"<span class=\"comment\"> *   NLA_PUT_U8(skb, type, value)<span class=\"ts\"/>add u8 attribute to skb</span>", 
"<span class=\"comment\"> *   NLA_PUT_U16(skb, type, value)<span class=\"ts\"/>add u16 attribute to skb</span>", 
"<span class=\"comment\"> *   NLA_PUT_U32(skb, type, value)<span class=\"ts\"/>add u32 attribute to skb</span>", 
"<span class=\"comment\"> *   NLA_PUT_U64(skb, type, value)<span class=\"ts\"/>add u64 attribute to skb</span>", 
"<span class=\"comment\"> *   NLA_PUT_STRING(skb, type, str)<span class=\"ts\"/>add string attribute to skb</span>", 
"<span class=\"comment\"> *   NLA_PUT_FLAG(skb, type)<span class=\"ts\"/><span class=\"ts\"/>add flag attribute to skb</span>", 
"<span class=\"comment\"> *   NLA_PUT_MSECS(skb, type, jiffies)<span class=\"ts\"/>add msecs attribute to skb</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   The meaning of these functions is equal to their lower case</span>", 
"<span class=\"comment\"> *   variants but they jump to the label nla_put_failure in case</span>", 
"<span class=\"comment\"> *   of a failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Nested Attributes Construction:</span>", 
"<span class=\"comment\"> *   nla_nest_start(skb, type)<span class=\"ts\"/><span class=\"ts\"/>start a nested attribute</span>", 
"<span class=\"comment\"> *   nla_nest_end(skb, nla)<span class=\"ts\"/><span class=\"ts\"/>finalize a nested attribute</span>", 
"<span class=\"comment\"> *   nla_nest_cancel(skb, nla)<span class=\"ts\"/><span class=\"ts\"/>cancel nested attribute construction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attribute Length Calculations:</span>", 
"<span class=\"comment\"> *   nla_attr_size(payload)<span class=\"ts\"/><span class=\"ts\"/>length of attribute w/o padding</span>", 
"<span class=\"comment\"> *   nla_total_size(payload)<span class=\"ts\"/><span class=\"ts\"/>length of attribute w/ padding</span>", 
"<span class=\"comment\"> *   nla_padlen(payload)<span class=\"ts\"/><span class=\"ts\"/>length of padding</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attribute Payload Access:</span>", 
"<span class=\"comment\"> *   nla_data(nla)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>head of attribute payload</span>", 
"<span class=\"comment\"> *   nla_len(nla)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>length of attribute payload</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attribute Payload Access for Basic Types:</span>", 
"<span class=\"comment\"> *   nla_get_u8(nla)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>get payload for a u8 attribute</span>", 
"<span class=\"comment\"> *   nla_get_u16(nla)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>get payload for a u16 attribute</span>", 
"<span class=\"comment\"> *   nla_get_u32(nla)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>get payload for a u32 attribute</span>", 
"<span class=\"comment\"> *   nla_get_u64(nla)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>get payload for a u64 attribute</span>", 
"<span class=\"comment\"> *   nla_get_flag(nla)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1 if flag is true</span>", 
"<span class=\"comment\"> *   nla_get_msecs(nla)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>get payload for a msecs attribute</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attribute Misc:</span>", 
"<span class=\"comment\"> *   nla_memcpy(dest, nla, count)<span class=\"ts\"/>copy attribute into memory</span>", 
"<span class=\"comment\"> *   nla_memcmp(nla, data, size)<span class=\"ts\"/>compare attribute with memory area</span>", 
"<span class=\"comment\"> *   nla_strlcpy(dst, nla, size)<span class=\"ts\"/>copy attribute to a sized string</span>", 
"<span class=\"comment\"> *   nla_strcmp(nla, str)<span class=\"ts\"/><span class=\"ts\"/>compare attribute with string</span>", 
"<span class=\"comment\"> *</span>", 
];
xr_frag_insert('l/f2/cee90ff1efe8fa3cddf61224fc068d5f980a6f.xr', __xr_tmp);
