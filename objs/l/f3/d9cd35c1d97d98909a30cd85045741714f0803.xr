var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#DECOMPRESS_GENERIC_H\">DECOMPRESS_GENERIC_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECOMPRESS_GENERIC_H\">DECOMPRESS_GENERIC_H</a>", 
"", 
"typedef int (*<a class=\"id\" href=\"#decompress_fn\">decompress_fn</a>) (unsigned char *<a class=\"id\" href=\"#inbuf\">inbuf</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int(*<a class=\"id\" href=\"#fill\">fill</a>)(void*, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int(*<a class=\"id\" href=\"#flush\">flush</a>)(void*, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned char *<a class=\"id\" href=\"#outbuf\">outbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int *<a class=\"id\" href=\"#posp\">posp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void(*<a class=\"id\" href=\"#error\">error</a>)(char *<a class=\"id\" href=\"#x\">x</a>));", 
"", 
"<span class=\"comment\">/* inbuf   - input buffer</span>", 
"<span class=\"comment\"> *len     - len of pre-read data in inbuf</span>", 
"<span class=\"comment\"> *fill    - function to fill inbuf when empty</span>", 
"<span class=\"comment\"> *flush   - function to write out outbuf</span>", 
"<span class=\"comment\"> *outbuf  - output buffer</span>", 
"<span class=\"comment\"> *posp    - if non-null, input position (number of bytes read) will be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  returned here</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *If len != 0, inbuf should contain all the necessary input data, and fill</span>", 
"<span class=\"comment\"> *should be NULL</span>", 
"<span class=\"comment\"> *If len = 0, inbuf can be NULL, in which case the decompressor will allocate</span>", 
"<span class=\"comment\"> *the input buffer.  If inbuf != NULL it must be at least XXX_IOBUF_SIZE bytes.</span>", 
"<span class=\"comment\"> *fill will be called (repeatedly...) to read data, at most XXX_IOBUF_SIZE</span>", 
"<span class=\"comment\"> *bytes should be read per call.  Replace XXX with the appropriate decompressor</span>", 
"<span class=\"comment\"> *name, i.e. LZMA_IOBUF_SIZE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *If flush = NULL, outbuf must be large enough to buffer all the expected</span>", 
"<span class=\"comment\"> *output.  If flush != NULL, the output buffer will be allocated by the</span>", 
"<span class=\"comment\"> *decompressor (outbuf = NULL), and the flush function will be called to</span>", 
"<span class=\"comment\"> *flush the output buffer at the appropriate time (decompressor and stream</span>", 
"<span class=\"comment\"> *dependent).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"<span class=\"comment\">/* Utility routine to detect the decompression method */</span>", 
"<a class=\"id\" href=\"#decompress_fn\">decompress_fn</a> <a class=\"id\" href=\"#decompress_method\">decompress_method</a>(const unsigned char *<a class=\"id\" href=\"#inbuf\">inbuf</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char **<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/f3/d9cd35c1d97d98909a30cd85045741714f0803.xr', __xr_tmp);
