var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#test_spinlock_irq\">test_spinlock_irq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#test_spinlock_irq\">test_spinlock_irq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#test_spinlock\">test_spinlock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#test_mutex\">test_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#test_mutex\">test_mutex</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#event_test_thread\">event_test_thread</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#test_malloc\">test_malloc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#test_malloc\">test_malloc</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(1234, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_malloc\">test_malloc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"failed to kmalloc\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_on_each_cpu\">schedule_on_each_cpu</a>(<a class=\"id\" href=\"#test_work\">test_work</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#test_malloc\">test_malloc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do various things that may trigger events.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#event_test_stuff\">event_test_stuff</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#test_thread\">test_thread</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#test_thread\">test_thread</a> = <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#event_test_thread\">event_test_thread</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"test-events\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(<a class=\"id\" href=\"#test_thread\">test_thread</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For every trace event defined, we will test each trace point separately,</span>", 
"<span class=\"comment\"> * and then by groups, and finally all trace points.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#event_trace_self_tests\">event_trace_self_tests</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#event_subsystem\">event_subsystem</a> *<a class=\"id\" href=\"#system\">system</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Running tests on trace events:\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#call\">call</a>, &amp;<a class=\"id\" href=\"#ftrace_events\">ftrace_events</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Only test those that have a probe */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#class\">class</a> || !<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#probe\">probe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Testing syscall events here is pretty useless, but</span>", 
"<span class=\"comment\"> * we still do it if configured. But this is time consuming.</span>", 
"<span class=\"comment\"> * What we really need is a user thread to perform the</span>", 
"<span class=\"comment\"> * syscalls as we test.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_EVENT_TRACE_TEST_SYSCALLS\">CONFIG_EVENT_TRACE_TEST_SYSCALLS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#system\">system</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#system\">system</a>, \"syscalls\") == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Testing event %s: \", <a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If an event is already enabled, someone is using</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it and the self test should not be on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_EVENT_FL_ENABLED\">TRACE_EVENT_FL_ENABLED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Enabled event during self test!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_event_enable_disable\">ftrace_event_enable_disable</a>(<a class=\"id\" href=\"#call\">call</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_test_stuff\">event_test_stuff</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_event_enable_disable\">ftrace_event_enable_disable</a>(<a class=\"id\" href=\"#call\">call</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_cont\">pr_cont</a>(\"OK\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now test at the sub system level */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Running tests on trace event systems:\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#system\">system</a>, &amp;<a class=\"id\" href=\"#event_subsystems\">event_subsystems</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the ftrace system is special, skip it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#system\">system</a>-><a class=\"id\" href=\"#name\">name</a>, \"ftrace\") == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Testing event system %s: \", <a class=\"id\" href=\"#system\">system</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__ftrace_set_clr_event\">__ftrace_set_clr_event</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#system\">system</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"error enabling system %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#system\">system</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_test_stuff\">event_test_stuff</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__ftrace_set_clr_event\">__ftrace_set_clr_event</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#system\">system</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"error disabling system %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#system\">system</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_cont\">pr_cont</a>(\"OK\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Test with all events enabled */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Running tests on all trace events:\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Testing all events: \");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__ftrace_set_clr_event\">__ftrace_set_clr_event</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"error enabling all events\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_test_stuff\">event_test_stuff</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* reset sysname */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__ftrace_set_clr_event\">__ftrace_set_clr_event</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"error disabling all events\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_cont\">pr_cont</a>(\"OK\\n\");", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUNCTION_TRACER\">CONFIG_FUNCTION_TRACER</a>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a>, <a class=\"id\" href=\"#ftrace_test_event_disable\">ftrace_test_event_disable</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#function_test_events_call\">function_test_events_call</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_entry\">ftrace_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#disabled\">disabled</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable_notrace\">preempt_disable_notrace</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disabled\">disabled</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#ftrace_test_event_disable\">ftrace_test_event_disable</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disabled\">disabled</a> != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_save_flags\">local_save_flags</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#trace_current_buffer_lock_reserve\">trace_current_buffer_lock_reserve</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#TRACE_FN\">TRACE_FN</a>, sizeof(*<a class=\"id\" href=\"#entry\">entry</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ip\">ip</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#parent_ip\">parent_ip</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#parent_ip\">parent_ip</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_nowake_buffer_unlock_commit\">trace_nowake_buffer_unlock_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#ftrace_test_event_disable\">ftrace_test_event_disable</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_notrace\">preempt_enable_notrace</a>();", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> <a class=\"id\" href=\"#trace_ops\">trace_ops</a> <a class=\"id\" href=\"#__initdata\">__initdata</a>  =", 
"{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#function_test_events_call\">function_test_events_call</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#event_trace_self_test_with_function\">event_trace_self_test_with_function</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_ftrace_function\">register_ftrace_function</a>(&amp;<a class=\"id\" href=\"#trace_ops\">trace_ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Running tests again, along with the function tracer\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_trace_self_tests\">event_trace_self_tests</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_ftrace_function\">unregister_ftrace_function</a>(&amp;<a class=\"id\" href=\"#trace_ops\">trace_ops</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#event_trace_self_test_with_function\">event_trace_self_test_with_function</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#event_trace_self_tests_init\">event_trace_self_tests_init</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tracing_selftest_disabled\">tracing_selftest_disabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_trace_self_tests\">event_trace_self_tests</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_trace_self_test_with_function\">event_trace_self_test_with_function</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#event_trace_self_tests_init\">event_trace_self_tests_init</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/f3/f1e07bbe5c90f0021fd282c63088f45f789318.xr', __xr_tmp);
