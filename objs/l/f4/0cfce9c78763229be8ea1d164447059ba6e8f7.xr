var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * OF helpers for the GPIO API</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2007-2008  MontaVista Software, Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Anton Vorontsov &lt;avorontsov@ru.mvista.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_OF_GPIO_H\">__LINUX_OF_GPIO_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_OF_GPIO_H\">__LINUX_OF_GPIO_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gpio\">gpio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#device_node\">device_node</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is Linux-specific flags. By default controllers' and Linux' mapping</span>", 
"<span class=\"comment\"> * match, but GPIO controllers are free to translate their own flags to</span>", 
"<span class=\"comment\"> * Linux-specific in their .xlate callback. Though, 1:1 mapping is recommended.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#of_gpio_flags\">of_gpio_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#OF_GPIO_ACTIVE_LOW\">OF_GPIO_ACTIVE_LOW</a> = 0x1,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_OF_GPIO\">CONFIG_OF_GPIO</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * OF GPIO chip for memory mapped banks</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#of_mm_gpio_chip\">of_mm_gpio_chip</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> <a class=\"id\" href=\"#gc\">gc</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#save_regs\">save_regs</a>)(struct <a class=\"id\" href=\"#of_mm_gpio_chip\">of_mm_gpio_chip</a> *<a class=\"id\" href=\"#mm_gc\">mm_gc</a>);", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#regs\">regs</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#of_mm_gpio_chip\">of_mm_gpio_chip</a> *<a class=\"id\" href=\"#to_of_mm_gpio_chip\">to_of_mm_gpio_chip</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#gc\">gc</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#gc\">gc</a>, struct <a class=\"id\" href=\"#of_mm_gpio_chip\">of_mm_gpio_chip</a>, <a class=\"id\" href=\"#gc\">gc</a>);", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#of_get_gpio_flags\">of_get_gpio_flags</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#np\">np</a>, int <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     enum <a class=\"id\" href=\"#of_gpio_flags\">of_gpio_flags</a> *<a class=\"id\" href=\"#flags\">flags</a>);", 
"extern unsigned int <a class=\"id\" href=\"#of_gpio_count\">of_gpio_count</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#np\">np</a>);", 
"", 
"extern int <a class=\"id\" href=\"#of_mm_gpiochip_add\">of_mm_gpiochip_add</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#np\">np</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#of_mm_gpio_chip\">of_mm_gpio_chip</a> *<a class=\"id\" href=\"#mm_gc\">mm_gc</a>);", 
"", 
"extern void <a class=\"id\" href=\"#of_gpiochip_add\">of_gpiochip_add</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#gc\">gc</a>);", 
"extern void <a class=\"id\" href=\"#of_gpiochip_remove\">of_gpiochip_remove</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#gc\">gc</a>);", 
"extern struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#of_node_to_gpiochip\">of_node_to_gpiochip</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#np\">np</a>);", 
"", 
"#else <span class=\"comment\">/* CONFIG_OF_GPIO */</span>", 
"", 
"<span class=\"comment\">/* Drivers may not strictly depend on the GPIO support, so let them link. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#of_get_gpio_flags\">of_get_gpio_flags</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#np\">np</a>, int <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    enum <a class=\"id\" href=\"#of_gpio_flags\">of_gpio_flags</a> *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#of_gpio_count\">of_gpio_count</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#np\">np</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#of_gpiochip_add\">of_gpiochip_add</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#gc\">gc</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#of_gpiochip_remove\">of_gpiochip_remove</a>(struct <a class=\"id\" href=\"#gpio_chip\">gpio_chip</a> *<a class=\"id\" href=\"#gc\">gc</a>) { }", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_OF_GPIO */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * of_get_gpio - Get a GPIO number to use with GPIO API</span>", 
"<span class=\"comment\"> * @np:<span class=\"ts\"/><span class=\"ts\"/>device node to get GPIO from</span>", 
"<span class=\"comment\"> * @index:<span class=\"ts\"/>index of the GPIO</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns GPIO number to use with Linux generic GPIO API, or one of the errno</span>", 
"<span class=\"comment\"> * value on the error condition.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#of_get_gpio\">of_get_gpio</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#np\">np</a>, int <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#of_get_gpio_flags\">of_get_gpio_flags</a>(<a class=\"id\" href=\"#np\">np</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_OF_GPIO_H */</span>", 
];
xr_frag_insert('l/f4/0cfce9c78763229be8ea1d164447059ba6e8f7.xr', __xr_tmp);
