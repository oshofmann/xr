var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fs/sysfs/file.c - sysfs regular (text) file implementation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2001-3 Patrick Mochel</span>", 
"<span class=\"comment\"> * Copyright (c) 2007 SUSE Linux Products GmbH</span>", 
"<span class=\"comment\"> * Copyright (c) 2007 Tejun Heo &lt;teheo@suse.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Please see Documentation/filesystems/sysfs.txt for more information.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kobject\">kobject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify\">fsnotify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"sysfs.h\"", 
"", 
"<span class=\"comment\">/* used in crash dumps to help with debugging */</span>", 
"static char <a class=\"id\" href=\"#last_sysfs_file\">last_sysfs_file</a>[<a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>];", 
"void <a class=\"id\" href=\"#sysfs_printk_last_file\">sysfs_printk_last_file</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"last sysfs file: %s\\n\", <a class=\"id\" href=\"#last_sysfs_file\">last_sysfs_file</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * There's one sysfs_buffer for each open file and one</span>", 
"<span class=\"comment\"> * sysfs_open_dirent for each sysfs_dirent with one or more open</span>", 
"<span class=\"comment\"> * files.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * filp-&gt;private_data points to sysfs_buffer and</span>", 
"<span class=\"comment\"> * sysfs_dirent-&gt;s_attr.open points to sysfs_open_dirent.  s_attr.open</span>", 
"<span class=\"comment\"> * is protected by sysfs_open_dirent_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#sysfs_open_dirent_lock\">sysfs_open_dirent_lock</a>);", 
"", 
"struct <a class=\"id\" href=\"#sysfs_open_dirent\">sysfs_open_dirent</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refcnt\">refcnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a><span class=\"ts\"/><a class=\"id\" href=\"#poll\">poll</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#buffers\">buffers</a>; <span class=\"comment\">/* goes through sysfs_buffer.list */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#sysfs_buffer\">sysfs_buffer</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>* <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sysfs_ops\">sysfs_ops</a><span class=\"ts\"/>* <a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex\">mutex</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needs_read_fill\">needs_read_fill</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>fill_read_buffer - allocate and fill buffer from object.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry:<span class=\"ts\"/>dentry pointer.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buffer:<span class=\"ts\"/>data buffer for file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate @buffer-&gt;page, if it hasn't been already, then call the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kobject's show() method to fill the buffer with this attribute's </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>data. </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is called only once, on the file's first read unless an error</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#fill_read_buffer\">fill_read_buffer</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#sysfs_buffer\">sysfs_buffer</a> * <a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#attr_sd\">attr_sd</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#attr_sd\">attr_sd</a>-><a class=\"id\" href=\"#s_parent\">s_parent</a>-><a class=\"id\" href=\"#s_dir\">s_dir</a>.<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sysfs_ops\">sysfs_ops</a> * <a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page\">page</a> = (char *) <a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need attr_sd for attr and ops, its parent for kobj */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sysfs_get_active\">sysfs_get_active</a>(<a class=\"id\" href=\"#attr_sd\">attr_sd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#attr_sd\">attr_sd</a>-><a class=\"id\" href=\"#s_attr\">s_attr</a>.<a class=\"id\" href=\"#open\">open</a>-><a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#show\">show</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#attr_sd\">attr_sd</a>-><a class=\"id\" href=\"#s_attr\">s_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_put_active\">sysfs_put_active</a>(<a class=\"id\" href=\"#attr_sd\">attr_sd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The code works fine with PAGE_SIZE return but it's likely to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * indicate truncated result or overflow in normal use cases.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> >= (<a class=\"id\" href=\"#ssize_t\">ssize_t</a>)<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_symbol\">print_symbol</a>(\"fill_read_buffer: %s returned bad count\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#show\">show</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try to struggle along */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#needs_read_fill\">needs_read_fill</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_read_file - read an attribute. </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file:<span class=\"ts\"/>file pointer.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf:<span class=\"ts\"/>buffer to fill.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@count:<span class=\"ts\"/>number of bytes to read.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ppos:<span class=\"ts\"/>starting offset in file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Userspace wants to read an attribute file. The attribute descriptor</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is in the file's -&gt;d_fsdata. The target object is in the directory's</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>-&gt;d_fsdata.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We call fill_read_buffer() to allocate and fill the buffer from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>object's show() method exactly once (if the read is happening from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the beginning of the file). That should fill the entire buffer with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>all the data the object has to offer for that attribute.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We then call flush_read_buffer() to copy the buffer to userspace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in the increments specified.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#sysfs_read_file\">sysfs_read_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_buffer\">sysfs_buffer</a> * <a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#needs_read_fill\">needs_read_fill</a> || *<a class=\"id\" href=\"#ppos\">ppos</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#fill_read_buffer\">fill_read_buffer</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>,<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: count = %zd, ppos = %lld, buf = %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#count\">count</a>, *<a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>fill_write_buffer - copy buffer from userspace.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buffer:<span class=\"ts\"/>data buffer for file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf:<span class=\"ts\"/><span class=\"ts\"/>data from user.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@count:<span class=\"ts\"/><span class=\"ts\"/>number of bytes in @userbuf.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate @buffer-&gt;page if it hasn't been already, then</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>copy the user-supplied buffer into it.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int ", 
"<a class=\"id\" href=\"#fill_write_buffer\">fill_write_buffer</a>(struct <a class=\"id\" href=\"#sysfs_buffer\">sysfs_buffer</a> * <a class=\"id\" href=\"#buffer\">buffer</a>, const char <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page\">page</a> = (char *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> >= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page\">page</a>,<a class=\"id\" href=\"#buf\">buf</a>,<a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#needs_read_fill\">needs_read_fill</a> = 1;", 
"<span class=\"ts\"/><span class=\"comment\">/* if buf is assumed to contain a string, terminate it by \\0,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   so e.g. sscanf() can scan the string easily */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page\">page</a>[<a class=\"id\" href=\"#count\">count</a>] = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a> ? -<a class=\"id\" href=\"#EFAULT\">EFAULT</a> : <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>flush_write_buffer - push buffer to kobject.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry:<span class=\"ts\"/>dentry to the attribute</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buffer:<span class=\"ts\"/>data buffer for file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@count:<span class=\"ts\"/><span class=\"ts\"/>number of bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Get the correct pointers for the kobject and the attribute we're</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dealing with, then call the store() method for the attribute, </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>passing the buffer that we acquired in fill_write_buffer().</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int", 
"<a class=\"id\" href=\"#flush_write_buffer\">flush_write_buffer</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#sysfs_buffer\">sysfs_buffer</a> * <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sysfs_dirent\">sysfs_dirent</a> *<a class=\"id\" href=\"#attr_sd\">attr_sd</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#attr_sd\">attr_sd</a>-><a class=\"id\" href=\"#s_parent\">s_parent</a>-><a class=\"id\" href=\"#s_dir\">s_dir</a>.<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#sysfs_ops\">sysfs_ops</a> * <a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* need attr_sd for attr and ops, its parent for kobj */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sysfs_get_active\">sysfs_get_active</a>(<a class=\"id\" href=\"#attr_sd\">attr_sd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#store\">store</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#attr_sd\">attr_sd</a>-><a class=\"id\" href=\"#s_attr\">s_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_put_active\">sysfs_put_active</a>(<a class=\"id\" href=\"#attr_sd\">attr_sd</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sysfs_write_file - write an attribute.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file:<span class=\"ts\"/>file pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf:<span class=\"ts\"/>data to write</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@count:<span class=\"ts\"/>number of bytes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ppos:<span class=\"ts\"/>starting offset</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Similar to sysfs_read_file(), though working in the opposite direction.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We allocate and fill the data from the user in fill_write_buffer(),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>then push it to the kobject in flush_write_buffer().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>There is no easy way for us to know if userspace is only doing a partial</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>write, so we don't support them. We expect the entire buffer to come</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on the first write. </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Hint: if you're writing a value, first read the file, modify only the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the value you're changing, then write entire buffer back. </span>", 
];
xr_frag_insert('l/f4/7db46daa8db64adf7bc0b2de72f926d990c3dd.xr', __xr_tmp);
