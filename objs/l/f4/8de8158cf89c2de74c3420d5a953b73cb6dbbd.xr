var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__RES_COUNTER_H__\">__RES_COUNTER_H__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__RES_COUNTER_H__\">__RES_COUNTER_H__</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Resource Counters</span>", 
"<span class=\"comment\"> * Contain common data types and routines for resource accounting</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 2007 OpenVZ SWsoft Inc</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Pavel Emelianov &lt;xemul@openvz.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See Documentation/cgroups/resource_counter.txt for more</span>", 
"<span class=\"comment\"> * info about what this counter is.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroup\">cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The core object. the cgroup that wishes to account for some</span>", 
"<span class=\"comment\"> * resource may include this counter into its structures and use</span>", 
"<span class=\"comment\"> * the helpers described beyond</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#res_counter\">res_counter</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the current resource consumption level</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#usage\">usage</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the maximal value of the usage from the counter creation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#max_usage\">max_usage</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the limit that usage cannot exceed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the limit that usage can be exceed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#soft_limit\">soft_limit</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the number of unsuccessful attempts to consume the resource</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#failcnt\">failcnt</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the lock to protect all of the above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the routines below consider this to be IRQ-safe</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Parent counter, used for hierarchial resource accounting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RESOURCE_MAX\">RESOURCE_MAX</a> (unsigned long long)<a class=\"id\" href=\"#LLONG_MAX\">LLONG_MAX</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Helpers to interact with userspace</span>", 
"<span class=\"comment\"> * res_counter_read_u64() - returns the value of the specified member.</span>", 
"<span class=\"comment\"> * res_counter_read/_write - put/get the specified fields from the</span>", 
"<span class=\"comment\"> * res_counter struct to/from the user</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @counter:     the counter in question</span>", 
"<span class=\"comment\"> * @member:  the field to work with (see RES_xxx below)</span>", 
"<span class=\"comment\"> * @buf:     the buffer to opeate on,...</span>", 
"<span class=\"comment\"> * @nbytes:  its size...</span>", 
"<span class=\"comment\"> * @pos:     and the offset.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#res_counter_read_u64\">res_counter_read_u64</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#counter\">counter</a>, int <a class=\"id\" href=\"#member\">member</a>);", 
"", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#res_counter_read\">res_counter_read</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#counter\">counter</a>, int <a class=\"id\" href=\"#member\">member</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#read_strategy\">read_strategy</a>)(unsigned long long <a class=\"id\" href=\"#val\">val</a>, char *<a class=\"id\" href=\"#s\">s</a>));", 
"", 
"typedef int (*<a class=\"id\" href=\"#write_strategy_fn\">write_strategy_fn</a>)(const char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long long *<a class=\"id\" href=\"#val\">val</a>);", 
"", 
"int <a class=\"id\" href=\"#res_counter_memparse_write_strategy\">res_counter_memparse_write_strategy</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long *<a class=\"id\" href=\"#res\">res</a>);", 
"", 
"int <a class=\"id\" href=\"#res_counter_write\">res_counter_write</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#counter\">counter</a>, int <a class=\"id\" href=\"#member\">member</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#write_strategy_fn\">write_strategy_fn</a> <a class=\"id\" href=\"#write_strategy\">write_strategy</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * the field descriptors. one for each member of res_counter</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RES_USAGE\">RES_USAGE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RES_MAX_USAGE\">RES_MAX_USAGE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RES_LIMIT\">RES_LIMIT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RES_FAILCNT\">RES_FAILCNT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RES_SOFT_LIMIT\">RES_SOFT_LIMIT</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * helpers for accounting</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#res_counter_init\">res_counter_init</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#counter\">counter</a>, struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * charge - try to consume more resource.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @counter: the counter</span>", 
"<span class=\"comment\"> * @val: the amount of the resource. each controller defines its own</span>", 
"<span class=\"comment\"> *       units, e.g. numbers, bytes, Kbytes, etc</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns 0 on success and &lt;0 if the counter-&gt;usage will exceed the</span>", 
"<span class=\"comment\"> * counter-&gt;limit _locked call expects the counter-&gt;lock to be taken</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#res_counter_charge_locked\">res_counter_charge_locked</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#counter\">counter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>);", 
"int <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#res_counter_charge\">res_counter_charge</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#counter\">counter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>, struct <a class=\"id\" href=\"#res_counter\">res_counter</a> **<a class=\"id\" href=\"#limit_fail_at\">limit_fail_at</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * uncharge - tell that some portion of the resource is released</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @counter: the counter</span>", 
"<span class=\"comment\"> * @val: the amount of the resource</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * these calls check for usage underflow and show a warning on the console</span>", 
"<span class=\"comment\"> * _locked call expects the counter-&gt;lock to be taken</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#res_counter_uncharge_locked\">res_counter_uncharge_locked</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#counter\">counter</a>, unsigned long <a class=\"id\" href=\"#val\">val</a>);", 
"void <a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#counter\">counter</a>, unsigned long <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#res_counter_limit_check_locked\">res_counter_limit_check_locked</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#usage\">usage</a> &lt; <a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#limit\">limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#res_counter_soft_limit_check_locked\">res_counter_soft_limit_check_locked</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#usage\">usage</a> &lt; <a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#soft_limit\">soft_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Get the difference between the usage and the soft limit</span>", 
"<span class=\"comment\"> * @cnt: The counter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if usage is less than or equal to soft limit</span>", 
"<span class=\"comment\"> * The difference between usage and soft limit, otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long long", 
"<a class=\"id\" href=\"#res_counter_soft_limit_excess\">res_counter_soft_limit_excess</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#excess\">excess</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#usage\">usage</a> <= <a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#soft_limit\">soft_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#excess\">excess</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#excess\">excess</a> = <a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#usage\">usage</a> - <a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#soft_limit\">soft_limit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#excess\">excess</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper function to detect if the cgroup is within it's limit or</span>", 
"<span class=\"comment\"> * not. It's currently called from cgroup_rss_prepare()</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#res_counter_check_under_limit\">res_counter_check_under_limit</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#res_counter_limit_check_locked\">res_counter_limit_check_locked</a>(<a class=\"id\" href=\"#cnt\">cnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#res_counter_check_under_soft_limit\">res_counter_check_under_soft_limit</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#res_counter_soft_limit_check_locked\">res_counter_soft_limit_check_locked</a>(<a class=\"id\" href=\"#cnt\">cnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#res_counter_reset_max\">res_counter_reset_max</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#max_usage\">max_usage</a> = <a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#usage\">usage</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#res_counter_reset_failcnt\">res_counter_reset_failcnt</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#failcnt\">failcnt</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#res_counter_set_limit\">res_counter_set_limit</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#cnt\">cnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#usage\">usage</a> <= <a class=\"id\" href=\"#limit\">limit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#res_counter_set_soft_limit\">res_counter_set_soft_limit</a>(struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#cnt\">cnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#soft_limit\">soft_limit</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#soft_limit\">soft_limit</a> = <a class=\"id\" href=\"#soft_limit\">soft_limit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cnt\">cnt</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/f4/8de8158cf89c2de74c3420d5a953b73cb6dbbd.xr', __xr_tmp);
