var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008       SuSE Linux Products GmbH</span>", 
"<span class=\"comment\"> *                           Thomas Renninger &lt;trenn@suse.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  May be copied or modified under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * video_detect.c:</span>", 
"<span class=\"comment\"> * Provides acpi_is_video_device() for early scanning of ACPI devices in scan.c</span>", 
"<span class=\"comment\"> * There a Linux specific (Spec does not provide a HID for video devices) is</span>", 
"<span class=\"comment\"> * assigned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After PCI devices are glued with ACPI devices</span>", 
"<span class=\"comment\"> * acpi_get_pci_dev() can be called to identify ACPI graphics</span>", 
"<span class=\"comment\"> * devices for which a real graphics card is plugged in</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Now acpi_video_get_capabilities() can be called to check which</span>", 
"<span class=\"comment\"> * capabilities the graphics cards plugged in support. The check for general</span>", 
"<span class=\"comment\"> * video capabilities will be triggered by the first caller of</span>", 
"<span class=\"comment\"> * acpi_video_get_capabilities(NULL); which will happen when the first</span>", 
"<span class=\"comment\"> * backlight (or display output) switching supporting driver calls:</span>", 
"<span class=\"comment\"> * acpi_video_backlight_support();</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Depending on whether ACPI graphics extensions (cmp. ACPI spec Appendix B)</span>", 
"<span class=\"comment\"> * are available, video.ko should be used to handle the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Otherwise vendor specific drivers like thinkpad_acpi, asus_acpi,</span>", 
"<span class=\"comment\"> * sony_acpi,... can take care about backlight brightness and display output</span>", 
"<span class=\"comment\"> * switching.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If CONFIG_ACPI_VIDEO is neither set as \"compiled in\" (y) nor as a module (m)</span>", 
"<span class=\"comment\"> * this file will not be compiled, acpi_video_get_capabilities() and</span>", 
"<span class=\"comment\"> * acpi_video_backlight_support() will always return 0 and vendor specific</span>", 
"<span class=\"comment\"> * drivers always can handle backlight.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"ACPI: \"", 
"", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"video\");", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_VIDEO_COMPONENT\">ACPI_VIDEO_COMPONENT</a>", 
"", 
"static long <a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a>;", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#acpi_video_caps_checked\">acpi_video_caps_checked</a>;", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_backlight_cap_match\">acpi_backlight_cap_match</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#level\">level</a>, void *<a class=\"id\" href=\"#context\">context</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void **<a class=\"id\" href=\"#retyurn_value\">retyurn_value</a>)", 
"{", 
"<span class=\"ts\"/>long *<a class=\"id\" href=\"#cap\">cap</a> = <a class=\"id\" href=\"#context\">context</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#h_dummy\">h_dummy</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>, \"_BCM\", &amp;<a class=\"id\" href=\"#h_dummy\">h_dummy</a>)) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>, \"_BCL\", &amp;<a class=\"id\" href=\"#h_dummy\">h_dummy</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>, \"Found generic backlight \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"support\\n\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cap\">cap</a> |= <a class=\"id\" href=\"#ACPI_VIDEO_BACKLIGHT\">ACPI_VIDEO_BACKLIGHT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>, \"_BQC\", &amp;<a class=\"id\" href=\"#h_dummy\">h_dummy</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> <a class=\"id\" href=\"#FW_BUG\">FW_BUG</a> <a class=\"id\" href=\"#PREFIX\">PREFIX</a> \"No _BQC method, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"cannot determine initial brightness\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have backlight support, no need to scan further */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_CTRL_TERMINATE\">AE_CTRL_TERMINATE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Returns true if the device is a video device which can be handled by</span>", 
"<span class=\"comment\"> * video.ko.</span>", 
"<span class=\"comment\"> * The device will get a Linux specific CID added in scan.c to</span>", 
"<span class=\"comment\"> * identify the device as an ACPI graphics device</span>", 
"<span class=\"comment\"> * Be aware that the graphics device may not be physically present</span>", 
"<span class=\"comment\"> * Use acpi_video_get_capabilities() to detect general ACPI video</span>", 
"<span class=\"comment\"> * capabilities of present cards</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#acpi_is_video_device\">acpi_is_video_device</a>(struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#h_dummy\">h_dummy</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#video_caps\">video_caps</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#device\">device</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is this device able to support video switching ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, \"_DOD\", &amp;<a class=\"id\" href=\"#h_dummy\">h_dummy</a>)) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, \"_DOS\", &amp;<a class=\"id\" href=\"#h_dummy\">h_dummy</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#video_caps\">video_caps</a> |= <a class=\"id\" href=\"#ACPI_VIDEO_OUTPUT_SWITCHING\">ACPI_VIDEO_OUTPUT_SWITCHING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is this device able to retrieve a video ROM ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, \"_ROM\", &amp;<a class=\"id\" href=\"#h_dummy\">h_dummy</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#video_caps\">video_caps</a> |= <a class=\"id\" href=\"#ACPI_VIDEO_ROM_AVAILABLE\">ACPI_VIDEO_ROM_AVAILABLE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is this device able to configure which video head to be POSTed ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, \"_VPO\", &amp;<a class=\"id\" href=\"#h_dummy\">h_dummy</a>)) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, \"_GPD\", &amp;<a class=\"id\" href=\"#h_dummy\">h_dummy</a>)) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>, \"_SPD\", &amp;<a class=\"id\" href=\"#h_dummy\">h_dummy</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#video_caps\">video_caps</a> |= <a class=\"id\" href=\"#ACPI_VIDEO_DEVICE_POSTING\">ACPI_VIDEO_DEVICE_POSTING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only check for backlight functionality if one of the above hit. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#video_caps\">video_caps</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_walk_namespace\">acpi_walk_namespace</a>(<a class=\"id\" href=\"#ACPI_TYPE_DEVICE\">ACPI_TYPE_DEVICE</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a>, <a class=\"id\" href=\"#acpi_backlight_cap_match\">acpi_backlight_cap_match</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#video_caps\">video_caps</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#video_caps\">video_caps</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_is_video_device\">acpi_is_video_device</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#find_video\">find_video</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#lvl\">lvl</a>, void *<a class=\"id\" href=\"#context\">context</a>, void **<a class=\"id\" href=\"#rv\">rv</a>)", 
"{", 
"<span class=\"ts\"/>long *<a class=\"id\" href=\"#cap\">cap</a> = <a class=\"id\" href=\"#context\">context</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#acpi_dev\">acpi_dev</a>;", 
"", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#acpi_device_id\">acpi_device_id</a> <a class=\"id\" href=\"#video_ids\">video_ids</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>{<a class=\"id\" href=\"#ACPI_VIDEO_HID\">ACPI_VIDEO_HID</a>, 0},", 
"<span class=\"ts\"/><span class=\"ts\"/>{\"\", 0},", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_bus_get_device\">acpi_bus_get_device</a>(<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#acpi_dev\">acpi_dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_match_device_ids\">acpi_match_device_ids</a>(<a class=\"id\" href=\"#acpi_dev\">acpi_dev</a>, <a class=\"id\" href=\"#video_ids\">video_ids</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#acpi_get_pci_dev\">acpi_get_pci_dev</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cap\">cap</a> |= <a class=\"id\" href=\"#acpi_is_video_device\">acpi_is_video_device</a>(<a class=\"id\" href=\"#acpi_dev\">acpi_dev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns the video capabilities of a specific ACPI graphics device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * if NULL is passed as argument all ACPI devices are enumerated and</span>", 
"<span class=\"comment\"> * all graphics capabilities of physically present devices are</span>", 
"<span class=\"comment\"> * summarized and returned. This is cached and done only once.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#acpi_video_get_capabilities\">acpi_video_get_capabilities</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#graphics_handle\">graphics_handle</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#caps\">caps</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_device\">acpi_device</a> *<a class=\"id\" href=\"#tmp_dev\">tmp_dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_video_caps_checked\">acpi_video_caps_checked</a> && <a class=\"id\" href=\"#graphics_handle\">graphics_handle</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#graphics_handle\">graphics_handle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Only do the global walk through all graphics devices once */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_walk_namespace\">acpi_walk_namespace</a>(<a class=\"id\" href=\"#ACPI_TYPE_DEVICE\">ACPI_TYPE_DEVICE</a>, <a class=\"id\" href=\"#ACPI_ROOT_OBJECT\">ACPI_ROOT_OBJECT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a>, <a class=\"id\" href=\"#find_video\">find_video</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#caps\">caps</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There might be boot param flags set already... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> |= <a class=\"id\" href=\"#caps\">caps</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_video_caps_checked\">acpi_video_caps_checked</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Add blacklists here. Be careful to use the right *DMI* bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to still be able to override logic via boot params, e.g.:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *   if (dmi_name_in_vendors(\"XY\")) {</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>acpi_video_support |=</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>ACPI_VIDEO_OUTPUT_SWITCHING_DMI_VENDOR;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>acpi_video_support |=</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>ACPI_VIDEO_BACKLIGHT_DMI_VENDOR;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *}</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_bus_get_device\">acpi_bus_get_device</a>(<a class=\"id\" href=\"#graphics_handle\">graphics_handle</a>, &amp;<a class=\"id\" href=\"#tmp_dev\">tmp_dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>, \"Invalid device\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_walk_namespace\">acpi_walk_namespace</a>(<a class=\"id\" href=\"#ACPI_TYPE_DEVICE\">ACPI_TYPE_DEVICE</a>, <a class=\"id\" href=\"#graphics_handle\">graphics_handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a>, <a class=\"id\" href=\"#find_video\">find_video</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#caps\">caps</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>, \"We have 0x%lX video support %s %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#graphics_handle\">graphics_handle</a> ? <a class=\"id\" href=\"#caps\">caps</a> : <a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#graphics_handle\">graphics_handle</a> ? \"on device \" : \"in general\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#graphics_handle\">graphics_handle</a> ? <a class=\"id\" href=\"#acpi_device_bid\">acpi_device_bid</a>(<a class=\"id\" href=\"#tmp_dev\">tmp_dev</a>) : \"\"));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#caps\">caps</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_video_get_capabilities\">acpi_video_get_capabilities</a>);", 
"", 
"<span class=\"comment\">/* Returns true if video.ko can do backlight switching */</span>", 
"int <a class=\"id\" href=\"#acpi_video_backlight_support\">acpi_video_backlight_support</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must check whether the ACPI graphics device is physically plugged</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in. Therefore this must be called after binding PCI and ACPI devices</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_video_caps_checked\">acpi_video_caps_checked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_video_get_capabilities\">acpi_video_get_capabilities</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First check for boot param -&gt; highest prio */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> &amp; <a class=\"id\" href=\"#ACPI_VIDEO_BACKLIGHT_FORCE_VENDOR\">ACPI_VIDEO_BACKLIGHT_FORCE_VENDOR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> &amp; <a class=\"id\" href=\"#ACPI_VIDEO_BACKLIGHT_FORCE_VIDEO\">ACPI_VIDEO_BACKLIGHT_FORCE_VIDEO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Then check for DMI blacklist -&gt; second highest prio */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> &amp; <a class=\"id\" href=\"#ACPI_VIDEO_BACKLIGHT_DMI_VENDOR\">ACPI_VIDEO_BACKLIGHT_DMI_VENDOR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> &amp; <a class=\"id\" href=\"#ACPI_VIDEO_BACKLIGHT_DMI_VIDEO\">ACPI_VIDEO_BACKLIGHT_DMI_VIDEO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Then go the default way */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> &amp; <a class=\"id\" href=\"#ACPI_VIDEO_BACKLIGHT\">ACPI_VIDEO_BACKLIGHT</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_video_backlight_support\">acpi_video_backlight_support</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns true if video.ko can do display output switching.</span>", 
"<span class=\"comment\"> * This does not work well/at all with binary graphics drivers</span>", 
"<span class=\"comment\"> * which disable system io ranges and do it on their own.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#acpi_video_display_switch_support\">acpi_video_display_switch_support</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_video_caps_checked\">acpi_video_caps_checked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_video_get_capabilities\">acpi_video_get_capabilities</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> &amp; <a class=\"id\" href=\"#ACPI_VIDEO_OUTPUT_SWITCHING_FORCE_VENDOR\">ACPI_VIDEO_OUTPUT_SWITCHING_FORCE_VENDOR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> &amp; <a class=\"id\" href=\"#ACPI_VIDEO_OUTPUT_SWITCHING_FORCE_VIDEO\">ACPI_VIDEO_OUTPUT_SWITCHING_FORCE_VIDEO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> &amp; <a class=\"id\" href=\"#ACPI_VIDEO_OUTPUT_SWITCHING_DMI_VENDOR\">ACPI_VIDEO_OUTPUT_SWITCHING_DMI_VENDOR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> &amp; <a class=\"id\" href=\"#ACPI_VIDEO_OUTPUT_SWITCHING_DMI_VIDEO\">ACPI_VIDEO_OUTPUT_SWITCHING_DMI_VIDEO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> &amp; <a class=\"id\" href=\"#ACPI_VIDEO_OUTPUT_SWITCHING\">ACPI_VIDEO_OUTPUT_SWITCHING</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_video_display_switch_support\">acpi_video_display_switch_support</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Use acpi_display_output=vendor/video or acpi_backlight=vendor/video</span>", 
"<span class=\"comment\"> * To force that backlight or display output switching is processed by vendor</span>", 
"<span class=\"comment\"> * specific acpi drivers or video.ko driver.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_backlight\">acpi_backlight</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || *<a class=\"id\" href=\"#str\">str</a> == '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(\"vendor\", <a class=\"id\" href=\"#str\">str</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> |=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_VIDEO_BACKLIGHT_FORCE_VENDOR\">ACPI_VIDEO_BACKLIGHT_FORCE_VENDOR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(\"video\", <a class=\"id\" href=\"#str\">str</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> |=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_VIDEO_BACKLIGHT_FORCE_VIDEO\">ACPI_VIDEO_BACKLIGHT_FORCE_VIDEO</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"acpi_backlight=\", <a class=\"id\" href=\"#acpi_backlight\">acpi_backlight</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_display_output\">acpi_display_output</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || *<a class=\"id\" href=\"#str\">str</a> == '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(\"vendor\", <a class=\"id\" href=\"#str\">str</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> |=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_VIDEO_OUTPUT_SWITCHING_FORCE_VENDOR\">ACPI_VIDEO_OUTPUT_SWITCHING_FORCE_VENDOR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(\"video\", <a class=\"id\" href=\"#str\">str</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_video_support\">acpi_video_support</a> |=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_VIDEO_OUTPUT_SWITCHING_FORCE_VIDEO\">ACPI_VIDEO_OUTPUT_SWITCHING_FORCE_VIDEO</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"acpi_display_output=\", <a class=\"id\" href=\"#acpi_display_output\">acpi_display_output</a>);", 
];
xr_frag_insert('l/f4/f1084aa86125ee0a10bb6cb6997bb8b7b680ce.xr', __xr_tmp);
