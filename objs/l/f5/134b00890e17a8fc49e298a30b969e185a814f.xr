var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cn_proc.c - process events connector</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) Matt Helsley, IBM Corp. 2005</span>", 
"<span class=\"comment\"> * Based on cn_fork.c by Guillaume Thouvenin &lt;guillaume.thouvenin@bull.net&gt;</span>", 
"<span class=\"comment\"> * Original copyright notice follows:</span>", 
"<span class=\"comment\"> * Copyright (C) 2005 BULL SA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ktime\">ktime</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#connector\">connector</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unaligned\">unaligned</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cn_proc\">cn_proc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CN_PROC_MSG_SIZE\">CN_PROC_MSG_SIZE</a> (sizeof(struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a>) + sizeof(struct <a class=\"id\" href=\"#proc_event\">proc_event</a>))", 
"", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#proc_event_num_listeners\">proc_event_num_listeners</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"static struct <a class=\"id\" href=\"#cb_id\">cb_id</a> <a class=\"id\" href=\"#cn_proc_event_id\">cn_proc_event_id</a> = { <a class=\"id\" href=\"#CN_IDX_PROC\">CN_IDX_PROC</a>, <a class=\"id\" href=\"#CN_VAL_PROC\">CN_VAL_PROC</a> };", 
"", 
"<span class=\"comment\">/* proc_event_counts is used as the sequence number of the netlink message */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#__u32\">__u32</a>, <a class=\"id\" href=\"#proc_event_counts\">proc_event_counts</a>) = { 0 };", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#get_seq\">get_seq</a>(<a class=\"id\" href=\"#__u32\">__u32</a> *<a class=\"id\" href=\"#ts\">ts</a>, int *<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ts\">ts</a> = <a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#proc_event_counts\">proc_event_counts</a>)++;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#proc_event_counts\">proc_event_counts</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#proc_fork_connector\">proc_fork_connector</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_event\">proc_event</a> *<a class=\"id\" href=\"#ev\">ev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#CN_PROC_MSG_SIZE\">CN_PROC_MSG_SIZE</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#proc_event_num_listeners\">proc_event_num_listeners</a>) &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = (struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a>*)<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a> = (struct <a class=\"id\" href=\"#proc_event\">proc_event</a>*)<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_seq\">get_seq</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#seq\">seq</a>, &amp;<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_get_ts\">ktime_get_ts</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>); <span class=\"comment\">/* get high res monotonic timestamp */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unaligned\">put_unaligned</a>(<a class=\"id\" href=\"#timespec_to_ns\">timespec_to_ns</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>), (<a class=\"id\" href=\"#__u64\">__u64</a> *)&amp;<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#timestamp_ns\">timestamp_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#what\">what</a> = <a class=\"id\" href=\"#PROC_EVENT_FORK\">PROC_EVENT_FORK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#fork\">fork</a>.<a class=\"id\" href=\"#parent_pid\">parent_pid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#fork\">fork</a>.<a class=\"id\" href=\"#parent_tgid\">parent_tgid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#fork\">fork</a>.<a class=\"id\" href=\"#child_pid\">child_pid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#fork\">fork</a>.<a class=\"id\" href=\"#child_tgid\">child_tgid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#id\">id</a>, &amp;<a class=\"id\" href=\"#cn_proc_event_id\">cn_proc_event_id</a>, sizeof(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#id\">id</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#ack\">ack</a> = 0; <span class=\"comment\">/* not used */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a> = sizeof(*<a class=\"id\" href=\"#ev\">ev</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*  If cn_netlink_send() failed, the data is not sent */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cn_netlink_send\">cn_netlink_send</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#CN_IDX_PROC\">CN_IDX_PROC</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#proc_exec_connector\">proc_exec_connector</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_event\">proc_event</a> *<a class=\"id\" href=\"#ev\">ev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#CN_PROC_MSG_SIZE\">CN_PROC_MSG_SIZE</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#proc_event_num_listeners\">proc_event_num_listeners</a>) &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = (struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a>*)<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a> = (struct <a class=\"id\" href=\"#proc_event\">proc_event</a>*)<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_seq\">get_seq</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#seq\">seq</a>, &amp;<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_get_ts\">ktime_get_ts</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>); <span class=\"comment\">/* get high res monotonic timestamp */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unaligned\">put_unaligned</a>(<a class=\"id\" href=\"#timespec_to_ns\">timespec_to_ns</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>), (<a class=\"id\" href=\"#__u64\">__u64</a> *)&amp;<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#timestamp_ns\">timestamp_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#what\">what</a> = <a class=\"id\" href=\"#PROC_EVENT_EXEC\">PROC_EVENT_EXEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#exec\">exec</a>.<a class=\"id\" href=\"#process_pid\">process_pid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#exec\">exec</a>.<a class=\"id\" href=\"#process_tgid\">process_tgid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#id\">id</a>, &amp;<a class=\"id\" href=\"#cn_proc_event_id\">cn_proc_event_id</a>, sizeof(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#id\">id</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#ack\">ack</a> = 0; <span class=\"comment\">/* not used */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a> = sizeof(*<a class=\"id\" href=\"#ev\">ev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cn_netlink_send\">cn_netlink_send</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#CN_IDX_PROC\">CN_IDX_PROC</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#proc_id_connector\">proc_id_connector</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, int <a class=\"id\" href=\"#which_id\">which_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_event\">proc_event</a> *<a class=\"id\" href=\"#ev\">ev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#CN_PROC_MSG_SIZE\">CN_PROC_MSG_SIZE</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#proc_event_num_listeners\">proc_event_num_listeners</a>) &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = (struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a>*)<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a> = (struct <a class=\"id\" href=\"#proc_event\">proc_event</a>*)<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#what\">what</a> = <a class=\"id\" href=\"#which_id\">which_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#process_pid\">process_pid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#process_tgid\">process_tgid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#which_id\">which_id</a> == <a class=\"id\" href=\"#PROC_EVENT_UID\">PROC_EVENT_UID</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#r\">r</a>.<a class=\"id\" href=\"#ruid\">ruid</a> = <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#euid\">euid</a> = <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#which_id\">which_id</a> == <a class=\"id\" href=\"#PROC_EVENT_GID\">PROC_EVENT_GID</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#r\">r</a>.<a class=\"id\" href=\"#rgid\">rgid</a> = <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#gid\">gid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#egid\">egid</a> = <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#egid\">egid</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>     <span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_seq\">get_seq</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#seq\">seq</a>, &amp;<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_get_ts\">ktime_get_ts</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>); <span class=\"comment\">/* get high res monotonic timestamp */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unaligned\">put_unaligned</a>(<a class=\"id\" href=\"#timespec_to_ns\">timespec_to_ns</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>), (<a class=\"id\" href=\"#__u64\">__u64</a> *)&amp;<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#timestamp_ns\">timestamp_ns</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#id\">id</a>, &amp;<a class=\"id\" href=\"#cn_proc_event_id\">cn_proc_event_id</a>, sizeof(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#id\">id</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#ack\">ack</a> = 0; <span class=\"comment\">/* not used */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a> = sizeof(*<a class=\"id\" href=\"#ev\">ev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cn_netlink_send\">cn_netlink_send</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#CN_IDX_PROC\">CN_IDX_PROC</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#proc_sid_connector\">proc_sid_connector</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_event\">proc_event</a> *<a class=\"id\" href=\"#ev\">ev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#CN_PROC_MSG_SIZE\">CN_PROC_MSG_SIZE</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#proc_event_num_listeners\">proc_event_num_listeners</a>) &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = (struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a> *)<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a> = (struct <a class=\"id\" href=\"#proc_event\">proc_event</a> *)<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_seq\">get_seq</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#seq\">seq</a>, &amp;<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_get_ts\">ktime_get_ts</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>); <span class=\"comment\">/* get high res monotonic timestamp */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unaligned\">put_unaligned</a>(<a class=\"id\" href=\"#timespec_to_ns\">timespec_to_ns</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>), (<a class=\"id\" href=\"#__u64\">__u64</a> *)&amp;<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#timestamp_ns\">timestamp_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#what\">what</a> = <a class=\"id\" href=\"#PROC_EVENT_SID\">PROC_EVENT_SID</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#sid\">sid</a>.<a class=\"id\" href=\"#process_pid\">process_pid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#sid\">sid</a>.<a class=\"id\" href=\"#process_tgid\">process_tgid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#id\">id</a>, &amp;<a class=\"id\" href=\"#cn_proc_event_id\">cn_proc_event_id</a>, sizeof(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#id\">id</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#ack\">ack</a> = 0; <span class=\"comment\">/* not used */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a> = sizeof(*<a class=\"id\" href=\"#ev\">ev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cn_netlink_send\">cn_netlink_send</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#CN_IDX_PROC\">CN_IDX_PROC</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#proc_exit_connector\">proc_exit_connector</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_event\">proc_event</a> *<a class=\"id\" href=\"#ev\">ev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#CN_PROC_MSG_SIZE\">CN_PROC_MSG_SIZE</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#proc_event_num_listeners\">proc_event_num_listeners</a>) &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = (struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a>*)<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a> = (struct <a class=\"id\" href=\"#proc_event\">proc_event</a>*)<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_seq\">get_seq</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#seq\">seq</a>, &amp;<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_get_ts\">ktime_get_ts</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>); <span class=\"comment\">/* get high res monotonic timestamp */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unaligned\">put_unaligned</a>(<a class=\"id\" href=\"#timespec_to_ns\">timespec_to_ns</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>), (<a class=\"id\" href=\"#__u64\">__u64</a> *)&amp;<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#timestamp_ns\">timestamp_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#what\">what</a> = <a class=\"id\" href=\"#PROC_EVENT_EXIT\">PROC_EVENT_EXIT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#exit\">exit</a>.<a class=\"id\" href=\"#process_pid\">process_pid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#exit\">exit</a>.<a class=\"id\" href=\"#process_tgid\">process_tgid</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#tgid\">tgid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#exit\">exit</a>.<a class=\"id\" href=\"#exit_code\">exit_code</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#exit_code\">exit_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#exit\">exit</a>.<a class=\"id\" href=\"#exit_signal\">exit_signal</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#id\">id</a>, &amp;<a class=\"id\" href=\"#cn_proc_event_id\">cn_proc_event_id</a>, sizeof(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#id\">id</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#ack\">ack</a> = 0; <span class=\"comment\">/* not used */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a> = sizeof(*<a class=\"id\" href=\"#ev\">ev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cn_netlink_send\">cn_netlink_send</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#CN_IDX_PROC\">CN_IDX_PROC</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Send an acknowledgement message to userspace</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use 0 for success, EFOO otherwise.</span>", 
"<span class=\"comment\"> * Note: this is the negative of conventional kernel error</span>", 
"<span class=\"comment\"> * values because it's not being returned via syscall return</span>", 
"<span class=\"comment\"> * mechanisms.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cn_proc_ack\">cn_proc_ack</a>(int <a class=\"id\" href=\"#err\">err</a>, int <a class=\"id\" href=\"#rcvd_seq\">rcvd_seq</a>, int <a class=\"id\" href=\"#rcvd_ack\">rcvd_ack</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_event\">proc_event</a> *<a class=\"id\" href=\"#ev\">ev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#CN_PROC_MSG_SIZE\">CN_PROC_MSG_SIZE</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#proc_event_num_listeners\">proc_event_num_listeners</a>) &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = (struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a>*)<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a> = (struct <a class=\"id\" href=\"#proc_event\">proc_event</a>*)<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#rcvd_seq\">rcvd_seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_get_ts\">ktime_get_ts</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>); <span class=\"comment\">/* get high res monotonic timestamp */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unaligned\">put_unaligned</a>(<a class=\"id\" href=\"#timespec_to_ns\">timespec_to_ns</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>), (<a class=\"id\" href=\"#__u64\">__u64</a> *)&amp;<a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#timestamp_ns\">timestamp_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#what\">what</a> = <a class=\"id\" href=\"#PROC_EVENT_NONE\">PROC_EVENT_NONE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ev\">ev</a>-><a class=\"id\" href=\"#event_data\">event_data</a>.<a class=\"id\" href=\"#ack\">ack</a>.<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#id\">id</a>, &amp;<a class=\"id\" href=\"#cn_proc_event_id\">cn_proc_event_id</a>, sizeof(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#id\">id</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#ack\">ack</a> = <a class=\"id\" href=\"#rcvd_ack\">rcvd_ack</a> + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a> = sizeof(*<a class=\"id\" href=\"#ev\">ev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cn_netlink_send\">cn_netlink_send</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#CN_IDX_PROC\">CN_IDX_PROC</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cn_proc_mcast_ctl</span>", 
"<span class=\"comment\"> * @data: message sent from userspace via the connector</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cn_proc_mcast_ctl\">cn_proc_mcast_ctl</a>(struct <a class=\"id\" href=\"#cn_msg\">cn_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#netlink_skb_parms\">netlink_skb_parms</a> *<a class=\"id\" href=\"#nsp\">nsp</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#proc_cn_mcast_op\">proc_cn_mcast_op</a> *<a class=\"id\" href=\"#mc_op\">mc_op</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#len\">len</a> != sizeof(*<a class=\"id\" href=\"#mc_op\">mc_op</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mc_op\">mc_op</a> = (enum <a class=\"id\" href=\"#proc_cn_mcast_op\">proc_cn_mcast_op</a>*)<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>switch (*<a class=\"id\" href=\"#mc_op\">mc_op</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PROC_CN_MCAST_LISTEN\">PROC_CN_MCAST_LISTEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#proc_event_num_listeners\">proc_event_num_listeners</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PROC_CN_MCAST_IGNORE\">PROC_CN_MCAST_IGNORE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#proc_event_num_listeners\">proc_event_num_listeners</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cn_proc_ack\">cn_proc_ack</a>(<a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#ack\">ack</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cn_proc_init - initialization entry point</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Adds the connector callback to the connector driver.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cn_proc_init\">cn_proc_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cn_add_callback\">cn_add_callback</a>(&amp;<a class=\"id\" href=\"#cn_proc_event_id\">cn_proc_event_id</a>, \"cn_proc\",", 
"<span class=\"ts\"/> <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#cn_proc_mcast_ctl\">cn_proc_mcast_ctl</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"cn_proc failed to register\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#cn_proc_init\">cn_proc_init</a>);", 
];
xr_frag_insert('l/f5/134b00890e17a8fc49e298a30b969e185a814f.xr', __xr_tmp);
