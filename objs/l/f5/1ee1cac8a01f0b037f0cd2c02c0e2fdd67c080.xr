var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * INET<span class=\"ts\"/><span class=\"ts\"/>An implementation of the TCP/IP protocol suite for the LINUX</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>operating system.  NET  is implemented using the  BSD Socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>interface as the means of communication with the user level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Definitions for the Ethernet handlers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Version:<span class=\"ts\"/>@(#)eth.h<span class=\"ts\"/>1.0.4<span class=\"ts\"/>05/13/93</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Ross Biro</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Relocated to include/linux where it belongs by Alan Cox </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&lt;gw4pts@gw4pts.ampr.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>WARNING: This move may well be temporary. This file will get merged with others RSN.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_ETHERDEVICE_H\">_LINUX_ETHERDEVICE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_ETHERDEVICE_H\">_LINUX_ETHERDEVICE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_ether\">if_ether</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unaligned\">unaligned</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"extern <a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eth_type_trans\">eth_type_trans</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"extern const struct <a class=\"id\" href=\"#header_ops\">header_ops</a> <a class=\"id\" href=\"#eth_header_ops\">eth_header_ops</a>;", 
"", 
"extern int <a class=\"id\" href=\"#eth_header\">eth_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned short <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const void *<a class=\"id\" href=\"#daddr\">daddr</a>, const void *<a class=\"id\" href=\"#saddr\">saddr</a>, unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"extern int <a class=\"id\" href=\"#eth_rebuild_header\">eth_rebuild_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern int <a class=\"id\" href=\"#eth_header_parse\">eth_header_parse</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned char *<a class=\"id\" href=\"#haddr\">haddr</a>);", 
"extern int <a class=\"id\" href=\"#eth_header_cache\">eth_header_cache</a>(const struct <a class=\"id\" href=\"#neighbour\">neighbour</a> *<a class=\"id\" href=\"#neigh\">neigh</a>, struct <a class=\"id\" href=\"#hh_cache\">hh_cache</a> *<a class=\"id\" href=\"#hh\">hh</a>);", 
"extern void <a class=\"id\" href=\"#eth_header_cache_update\">eth_header_cache_update</a>(struct <a class=\"id\" href=\"#hh_cache\">hh_cache</a> *<a class=\"id\" href=\"#hh\">hh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const unsigned char *<a class=\"id\" href=\"#haddr\">haddr</a>);", 
"extern int <a class=\"id\" href=\"#eth_mac_addr\">eth_mac_addr</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#p\">p</a>);", 
"extern int <a class=\"id\" href=\"#eth_change_mtu\">eth_change_mtu</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#new_mtu\">new_mtu</a>);", 
"extern int <a class=\"id\" href=\"#eth_validate_addr\">eth_validate_addr</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"", 
"", 
"extern struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#alloc_etherdev_mq\">alloc_etherdev_mq</a>(int <a class=\"id\" href=\"#sizeof_priv\">sizeof_priv</a>, unsigned int <a class=\"id\" href=\"#queue_count\">queue_count</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alloc_etherdev\">alloc_etherdev</a>(<a class=\"id\" href=\"#sizeof_priv\">sizeof_priv</a>) <a class=\"id\" href=\"#alloc_etherdev_mq\">alloc_etherdev_mq</a>(<a class=\"id\" href=\"#sizeof_priv\">sizeof_priv</a>, 1)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_zero_ether_addr - Determine if give Ethernet address is all zeros.</span>", 
"<span class=\"comment\"> * @addr: Pointer to a six-byte array containing the Ethernet address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return true if the address is all zeroes.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_zero_ether_addr\">is_zero_ether_addr</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return !(<a class=\"id\" href=\"#addr\">addr</a>[0] | <a class=\"id\" href=\"#addr\">addr</a>[1] | <a class=\"id\" href=\"#addr\">addr</a>[2] | <a class=\"id\" href=\"#addr\">addr</a>[3] | <a class=\"id\" href=\"#addr\">addr</a>[4] | <a class=\"id\" href=\"#addr\">addr</a>[5]);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_multicast_ether_addr - Determine if the Ethernet address is a multicast.</span>", 
"<span class=\"comment\"> * @addr: Pointer to a six-byte array containing the Ethernet address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return true if the address is a multicast address.</span>", 
"<span class=\"comment\"> * By definition the broadcast address is also a multicast address.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_multicast_ether_addr\">is_multicast_ether_addr</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return (0x01 &amp; <a class=\"id\" href=\"#addr\">addr</a>[0]);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_local_ether_addr - Determine if the Ethernet address is locally-assigned one (IEEE 802).</span>", 
"<span class=\"comment\"> * @addr: Pointer to a six-byte array containing the Ethernet address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return true if the address is a local address.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_local_ether_addr\">is_local_ether_addr</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return (0x02 &amp; <a class=\"id\" href=\"#addr\">addr</a>[0]);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_broadcast_ether_addr - Determine if the Ethernet address is broadcast</span>", 
"<span class=\"comment\"> * @addr: Pointer to a six-byte array containing the Ethernet address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return true if the address is the broadcast address.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_broadcast_ether_addr\">is_broadcast_ether_addr</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#addr\">addr</a>[0] &amp; <a class=\"id\" href=\"#addr\">addr</a>[1] &amp; <a class=\"id\" href=\"#addr\">addr</a>[2] &amp; <a class=\"id\" href=\"#addr\">addr</a>[3] &amp; <a class=\"id\" href=\"#addr\">addr</a>[4] &amp; <a class=\"id\" href=\"#addr\">addr</a>[5]) == 0xff;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_valid_ether_addr - Determine if the given Ethernet address is valid</span>", 
"<span class=\"comment\"> * @addr: Pointer to a six-byte array containing the Ethernet address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check that the Ethernet address (MAC) is not 00:00:00:00:00:00, is not</span>", 
"<span class=\"comment\"> * a multicast address, and is not FF:FF:FF:FF:FF:FF.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return true if the address is valid.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_valid_ether_addr\">is_valid_ether_addr</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* FF:FF:FF:FF:FF:FF is a multicast address so we don't need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * explicitly check for it here. */</span>", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#is_multicast_ether_addr\">is_multicast_ether_addr</a>(<a class=\"id\" href=\"#addr\">addr</a>) && !<a class=\"id\" href=\"#is_zero_ether_addr\">is_zero_ether_addr</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * random_ether_addr - Generate software assigned random Ethernet address</span>", 
"<span class=\"comment\"> * @addr: Pointer to a six-byte array containing the Ethernet address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Generate a random Ethernet address (MAC) that is not multicast</span>", 
"<span class=\"comment\"> * and has the local assigned bit set.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#random_ether_addr\">random_ether_addr</a>(<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a> (<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> [0] &= 0xfe;<span class=\"ts\"/><span class=\"comment\">/* clear multicast bit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> [0] |= 0x02;<span class=\"ts\"/><span class=\"comment\">/* set local assignment bit (IEEE802) */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dev_hw_addr_random - Create random MAC and set device flag</span>", 
"<span class=\"comment\"> * @dev: pointer to net_device structure</span>", 
"<span class=\"comment\"> * @hwaddr: Pointer to a six-byte array containing the Ethernet address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Generate random MAC to be used by a device and set addr_assign_type</span>", 
"<span class=\"comment\"> * so the state can be read by sysfs and be used by udev.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dev_hw_addr_random\">dev_hw_addr_random</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#hwaddr\">hwaddr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_assign_type\">addr_assign_type</a> |= <a class=\"id\" href=\"#NET_ADDR_RANDOM\">NET_ADDR_RANDOM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#random_ether_addr\">random_ether_addr</a>(<a class=\"id\" href=\"#hwaddr\">hwaddr</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * compare_ether_addr - Compare two Ethernet addresses</span>", 
"<span class=\"comment\"> * @addr1: Pointer to a six-byte array containing the Ethernet address</span>", 
"<span class=\"comment\"> * @addr2: Pointer other six-byte array containing the Ethernet address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Compare two ethernet addresses, returns 0 if equal</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#compare_ether_addr\">compare_ether_addr</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr1\">addr1</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr2\">addr2</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#a\">a</a> = (const <a class=\"id\" href=\"#u16\">u16</a> *) <a class=\"id\" href=\"#addr1\">addr1</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#b\">b</a> = (const <a class=\"id\" href=\"#u16\">u16</a> *) <a class=\"id\" href=\"#addr2\">addr2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a> != 6);", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#a\">a</a>[0] ^ <a class=\"id\" href=\"#b\">b</a>[0]) | (<a class=\"id\" href=\"#a\">a</a>[1] ^ <a class=\"id\" href=\"#b\">b</a>[1]) | (<a class=\"id\" href=\"#a\">a</a>[2] ^ <a class=\"id\" href=\"#b\">b</a>[2])) != 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#zap_last_2bytes\">zap_last_2bytes</a>(unsigned long <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__BIG_ENDIAN\">__BIG_ENDIAN</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#value\">value</a> >> 16;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#value\">value</a> << 16;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * compare_ether_addr_64bits - Compare two Ethernet addresses</span>", 
"<span class=\"comment\"> * @addr1: Pointer to an array of 8 bytes</span>", 
"<span class=\"comment\"> * @addr2: Pointer to an other array of 8 bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Compare two ethernet addresses, returns 0 if equal.</span>", 
"<span class=\"comment\"> * Same result than \"memcmp(addr1, addr2, ETH_ALEN)\" but without conditional</span>", 
"<span class=\"comment\"> * branches, and possibly long word memory accesses on CPU allowing cheap</span>", 
"<span class=\"comment\"> * unaligned memory reads.</span>", 
"<span class=\"comment\"> * arrays = { byte1, byte2, byte3, byte4, byte6, byte7, pad1, pad2}</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Please note that alignment of addr1 &amp; addr2 is only guaranted to be 16 bits.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#compare_ether_addr_64bits\">compare_ether_addr_64bits</a>(const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#addr1\">addr1</a>[6+2],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#addr2\">addr2</a>[6+2])", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS\">CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#fold\">fold</a> = ((*(unsigned long *)<a class=\"id\" href=\"#addr1\">addr1</a>) ^", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (*(unsigned long *)<a class=\"id\" href=\"#addr2\">addr2</a>));", 
"", 
"<span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#fold\">fold</a>) == 8)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#zap_last_2bytes\">zap_last_2bytes</a>(<a class=\"id\" href=\"#fold\">fold</a>) != 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fold\">fold</a> |= <a class=\"id\" href=\"#zap_last_2bytes\">zap_last_2bytes</a>((*(unsigned long *)(<a class=\"id\" href=\"#addr1\">addr1</a> + 4)) ^", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*(unsigned long *)(<a class=\"id\" href=\"#addr2\">addr2</a> + 4)));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fold\">fold</a> != 0;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#compare_ether_addr\">compare_ether_addr</a>(<a class=\"id\" href=\"#addr1\">addr1</a>, <a class=\"id\" href=\"#addr2\">addr2</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_etherdev_addr - Tell if given Ethernet address belongs to the device.</span>", 
"<span class=\"comment\"> * @dev: Pointer to a device structure</span>", 
"<span class=\"comment\"> * @addr: Pointer to a six-byte array containing the Ethernet address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Compare passed address with all addresses of the device. Return true if the</span>", 
"<span class=\"comment\"> * address if one of the device addresses.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this function calls compare_ether_addr_64bits() so take care of</span>", 
"<span class=\"comment\"> * the right padding.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_etherdev_addr\">is_etherdev_addr</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#addr\">addr</a>[6 + 2])", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> *<a class=\"id\" href=\"#ha\">ha</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_dev_addr\">for_each_dev_addr</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ha\">ha</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#compare_ether_addr_64bits\">compare_ether_addr_64bits</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * compare_ether_header - Compare two Ethernet headers</span>", 
"<span class=\"comment\"> * @a: Pointer to Ethernet header</span>", 
"<span class=\"comment\"> * @b: Pointer to Ethernet header</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Compare two ethernet headers, returns 0 if equal.</span>", 
"<span class=\"comment\"> * This assumes that the network header (i.e., IP header) is 4-byte</span>", 
"<span class=\"comment\"> * aligned OR the platform can handle unaligned access.  This is the</span>", 
"<span class=\"comment\"> * case for all packets coming into netif_receive_skb or similar</span>", 
"<span class=\"comment\"> * entry points.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#compare_ether_header\">compare_ether_header</a>(const void *<a class=\"id\" href=\"#a\">a</a>, const void *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#a32\">a32</a> = (<a class=\"id\" href=\"#u32\">u32</a> *)((<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#a\">a</a> + 2);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#b32\">b32</a> = (<a class=\"id\" href=\"#u32\">u32</a> *)((<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#b\">b</a> + 2);", 
"", 
"<span class=\"ts\"/>return (*(<a class=\"id\" href=\"#u16\">u16</a> *)<a class=\"id\" href=\"#a\">a</a> ^ *(<a class=\"id\" href=\"#u16\">u16</a> *)<a class=\"id\" href=\"#b\">b</a>) | (<a class=\"id\" href=\"#a32\">a32</a>[0] ^ <a class=\"id\" href=\"#b32\">b32</a>[0]) |", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#a32\">a32</a>[1] ^ <a class=\"id\" href=\"#b32\">b32</a>[1]) | (<a class=\"id\" href=\"#a32\">a32</a>[2] ^ <a class=\"id\" href=\"#b32\">b32</a>[2]);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _LINUX_ETHERDEVICE_H */</span>", 
];
xr_frag_insert('l/f5/1ee1cac8a01f0b037f0cd2c02c0e2fdd67c080.xr', __xr_tmp);
