var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/> * so they all fit in a cache line.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> <a class=\"id\" href=\"#d_hash\">d_hash</a>;<span class=\"ts\"/><span class=\"comment\">/* lookup hash list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_parent\">d_parent</a>;<span class=\"ts\"/><span class=\"comment\">/* parent directory */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> <a class=\"id\" href=\"#d_name\">d_name</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#d_lru\">d_lru</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* LRU list */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * d_child and d_rcu can share memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#d_child\">d_child</a>;<span class=\"ts\"/><span class=\"comment\">/* child of parent list */</span>", 
"<span class=\"ts\"/> <span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#d_rcu\">d_rcu</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#d_u\">d_u</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>;<span class=\"ts\"/><span class=\"comment\">/* our children */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#d_alias\">d_alias</a>;<span class=\"ts\"/><span class=\"comment\">/* inode alias list */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#d_time\">d_time</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* used by d_revalidate */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dentry_operations\">dentry_operations</a> *<a class=\"id\" href=\"#d_op\">d_op</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#d_sb\">d_sb</a>;<span class=\"ts\"/><span class=\"comment\">/* The root of the dentry tree */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#d_fsdata\">d_fsdata</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fs-specific data */</span>", 
"", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#d_iname\">d_iname</a>[<a class=\"id\" href=\"#DNAME_INLINE_LEN_MIN\">DNAME_INLINE_LEN_MIN</a>];<span class=\"ts\"/><span class=\"comment\">/* small names */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dentry-&gt;d_lock spinlock nesting subclasses:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 0: normal</span>", 
"<span class=\"comment\"> * 1: nested</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#dentry_d_lock_class\">dentry_d_lock_class</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DENTRY_D_LOCK_NORMAL\">DENTRY_D_LOCK_NORMAL</a>, <span class=\"comment\">/* implicitly used by plain spin_lock() APIs. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DENTRY_D_LOCK_NESTED\">DENTRY_D_LOCK_NESTED</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dentry_operations\">dentry_operations</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#d_revalidate\">d_revalidate</a>)(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#d_hash\">d_hash</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#qstr\">qstr</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#d_compare\">d_compare</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#qstr\">qstr</a> *, struct <a class=\"id\" href=\"#qstr\">qstr</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#d_delete\">d_delete</a>)(struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#d_release\">d_release</a>)(struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#d_iput\">d_iput</a>)(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"<span class=\"ts\"/>char *(*<a class=\"id\" href=\"#d_dname\">d_dname</a>)(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, char *, int);", 
"};", 
"", 
"<span class=\"comment\">/* the dentry parameter passed to d_hash and d_compare is the parent</span>", 
"<span class=\"comment\"> * directory of the entries to be compared. It is used in case these</span>", 
"<span class=\"comment\"> * functions need any directory specific information for determining</span>", 
"<span class=\"comment\"> * equivalency classes.  Using the dentry itself might not work, as it</span>", 
"<span class=\"comment\"> * might be a negative dentry which has no information associated with</span>", 
"<span class=\"comment\"> * it */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">locking rules:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>big lock<span class=\"ts\"/>dcache_lock<span class=\"ts\"/>d_lock   may block</span>", 
"<span class=\"comment\">d_revalidate:<span class=\"ts\"/>no<span class=\"ts\"/><span class=\"ts\"/>no<span class=\"ts\"/><span class=\"ts\"/>no       yes</span>", 
"<span class=\"comment\">d_hash<span class=\"ts\"/><span class=\"ts\"/>no<span class=\"ts\"/><span class=\"ts\"/>no<span class=\"ts\"/><span class=\"ts\"/>no       yes</span>", 
"<span class=\"comment\">d_compare:<span class=\"ts\"/>no<span class=\"ts\"/><span class=\"ts\"/>yes<span class=\"ts\"/><span class=\"ts\"/>yes      no</span>", 
"<span class=\"comment\">d_delete:<span class=\"ts\"/>no<span class=\"ts\"/><span class=\"ts\"/>yes<span class=\"ts\"/><span class=\"ts\"/>no       no</span>", 
"<span class=\"comment\">d_release:<span class=\"ts\"/>no<span class=\"ts\"/><span class=\"ts\"/>no<span class=\"ts\"/><span class=\"ts\"/>no       yes</span>", 
"<span class=\"comment\">d_iput:<span class=\"ts\"/><span class=\"ts\"/>no<span class=\"ts\"/><span class=\"ts\"/>no<span class=\"ts\"/><span class=\"ts\"/>no       yes</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* d_flags entries */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DCACHE_AUTOFS_PENDING\">DCACHE_AUTOFS_PENDING</a> 0x0001    <span class=\"comment\">/* autofs: \"under construction\" */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DCACHE_NFSFS_RENAMED\">DCACHE_NFSFS_RENAMED</a>  0x0002    <span class=\"comment\">/* this dentry has been \"silly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * renamed\" and has to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * deleted on the last dput()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#DCACHE_DISCONNECTED\">DCACHE_DISCONNECTED</a> 0x0004", 
"     <span class=\"comment\">/* This dentry is possibly not currently connected to the dcache tree,</span>", 
"<span class=\"comment\">      * in which case its parent will either be itself, or will have this</span>", 
"<span class=\"comment\">      * flag as well.  nfsd will not use a dentry with this bit set, but will</span>", 
"<span class=\"comment\">      * first endeavour to clear the bit either by discovering that it is</span>", 
"<span class=\"comment\">      * connected, or by performing lookup operations.   Any filesystem which</span>", 
"<span class=\"comment\">      * supports nfsd_operations MUST have a lookup function which, if it finds</span>", 
"<span class=\"comment\">      * a directory inode with a DCACHE_DISCONNECTED dentry, will d_move</span>", 
"<span class=\"comment\">      * that dentry into place and return that dentry rather than the passed one,</span>", 
"<span class=\"comment\">      * typically using d_splice_alias.</span>", 
"<span class=\"comment\">      */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DCACHE_REFERENCED\">DCACHE_REFERENCED</a><span class=\"ts\"/>0x0008  <span class=\"comment\">/* Recently used, don't discard. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DCACHE_UNHASHED\">DCACHE_UNHASHED</a><span class=\"ts\"/><span class=\"ts\"/>0x0010<span class=\"ts\"/>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DCACHE_INOTIFY_PARENT_WATCHED\">DCACHE_INOTIFY_PARENT_WATCHED</a><span class=\"ts\"/>0x0020 <span class=\"comment\">/* Parent inode is watched by inotify */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DCACHE_COOKIE\">DCACHE_COOKIE</a><span class=\"ts\"/><span class=\"ts\"/>0x0040<span class=\"ts\"/><span class=\"comment\">/* For use by dcookie subsystem */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DCACHE_FSNOTIFY_PARENT_WATCHED\">DCACHE_FSNOTIFY_PARENT_WATCHED</a><span class=\"ts\"/>0x0080 <span class=\"comment\">/* Parent inode is watched by some fsnotify listener */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DCACHE_CANT_MOUNT\">DCACHE_CANT_MOUNT</a><span class=\"ts\"/>0x0100", 
"", 
"extern <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>;", 
"extern <a class=\"id\" href=\"#seqlock_t\">seqlock_t</a> <a class=\"id\" href=\"#rename_lock\">rename_lock</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_drop - drop a dentry</span>", 
"<span class=\"comment\"> * @dentry: dentry to drop</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * d_drop() unhashes the entry from the parent dentry hashes, so that it won't</span>", 
"<span class=\"comment\"> * be found through a VFS lookup any more. Note that this is different from</span>", 
"<span class=\"comment\"> * deleting the dentry - d_delete will try to mark the dentry negative if</span>", 
"<span class=\"comment\"> * possible, giving a successful _negative_ lookup, while d_drop will</span>", 
"<span class=\"comment\"> * just make the cache lookup fail.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * d_drop() is used mainly for stuff that wants to invalidate a dentry for some</span>", 
"<span class=\"comment\"> * reason (NFS timeouts or autofs deletes).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __d_drop requires dentry-&gt;d_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__d_drop\">__d_drop</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> &amp; <a class=\"id\" href=\"#DCACHE_UNHASHED\">DCACHE_UNHASHED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> |= <a class=\"id\" href=\"#DCACHE_UNHASHED\">DCACHE_UNHASHED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_hash\">d_hash</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#d_drop\">d_drop</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
" <span class=\"ts\"/><a class=\"id\" href=\"#__d_drop\">__d_drop</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#dname_external\">dname_external</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a> != <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_iname\">d_iname</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are the low-level FS interfaces to the dcache..</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#d_instantiate\">d_instantiate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#d_instantiate_unique\">d_instantiate_unique</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#d_materialise_unique\">d_materialise_unique</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern void <a class=\"id\" href=\"#d_delete\">d_delete</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"", 
"<span class=\"comment\">/* allocate/de-allocate */</span>", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#d_alloc\">d_alloc</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, const struct <a class=\"id\" href=\"#qstr\">qstr</a> *);", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#d_splice_alias\">d_splice_alias</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#d_add_ci\">d_add_ci</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#qstr\">qstr</a> *);", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#d_obtain_alias\">d_obtain_alias</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern void <a class=\"id\" href=\"#shrink_dcache_sb\">shrink_dcache_sb</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"extern void <a class=\"id\" href=\"#shrink_dcache_parent\">shrink_dcache_parent</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern void <a class=\"id\" href=\"#shrink_dcache_for_umount\">shrink_dcache_for_umount</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"extern int <a class=\"id\" href=\"#d_invalidate\">d_invalidate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"", 
"<span class=\"comment\">/* only used at mount-time */</span>", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#d_alloc_root\">d_alloc_root</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"", 
"<span class=\"comment\">/* &lt;clickety&gt;-&lt;click&gt; the ramfs-type tree */</span>", 
"extern void <a class=\"id\" href=\"#d_genocide\">d_genocide</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_find_alias\">d_find_alias</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"extern void <a class=\"id\" href=\"#d_prune_aliases\">d_prune_aliases</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *);", 
"", 
"<span class=\"comment\">/* test whether we have any submounts in a subdir tree */</span>", 
"extern int <a class=\"id\" href=\"#have_submounts\">have_submounts</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This adds the entry to the hash queues.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#d_rehash\">d_rehash</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_add - add dentry to hash queues</span>", 
"<span class=\"comment\"> * @entry: dentry to add</span>", 
"<span class=\"comment\"> * @inode: The inode to attach to this dentry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This adds the entry to the hash queues and initializes @inode.</span>", 
"<span class=\"comment\"> * The entry was actually filled in earlier during d_alloc().</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#d_add\">d_add</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_instantiate\">d_instantiate</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_rehash\">d_rehash</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_add_unique - add dentry to hash queues without aliasing</span>", 
"<span class=\"comment\"> * @entry: dentry to add</span>", 
"<span class=\"comment\"> * @inode: The inode to attach to this dentry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This adds the entry to the hash queues and initializes @inode.</span>", 
"<span class=\"comment\"> * The entry was actually filled in earlier during d_alloc().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_add_unique\">d_add_unique</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#d_instantiate_unique\">d_instantiate_unique</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_rehash\">d_rehash</a>(<a class=\"id\" href=\"#res\">res</a> != <a class=\"id\" href=\"#NULL\">NULL</a> ? <a class=\"id\" href=\"#res\">res</a> : <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/* used for rename() and baskets */</span>", 
"extern void <a class=\"id\" href=\"#d_move\">d_move</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_ancestor\">d_ancestor</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"", 
"<span class=\"comment\">/* appendix may either be NULL or be used for transname suffixes */</span>", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#d_lookup\">d_lookup</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#qstr\">qstr</a> *);", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#__d_lookup\">__d_lookup</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#qstr\">qstr</a> *);", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#d_hash_and_lookup\">d_hash_and_lookup</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#qstr\">qstr</a> *);", 
"", 
"<span class=\"comment\">/* validate \"insecure\" dentry pointer */</span>", 
"extern int <a class=\"id\" href=\"#d_validate\">d_validate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * helper function for dentry_operations.d_dname() members</span>", 
"<span class=\"comment\"> */</span>", 
"extern char *<a class=\"id\" href=\"#dynamic_dname\">dynamic_dname</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, char *, int, const char *, ...);", 
"", 
"extern char *<a class=\"id\" href=\"#__d_path\">__d_path</a>(const struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#root\">root</a>, char *, int);", 
"extern char *<a class=\"id\" href=\"#d_path\">d_path</a>(const struct <a class=\"id\" href=\"#path\">path</a> *, char *, int);", 
"extern char *<a class=\"id\" href=\"#d_path_with_unreachable\">d_path_with_unreachable</a>(const struct <a class=\"id\" href=\"#path\">path</a> *, char *, int);", 
"extern char *<a class=\"id\" href=\"#__dentry_path\">__dentry_path</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, char *, int);", 
"extern char *<a class=\"id\" href=\"#dentry_path\">dentry_path</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *, char *, int);", 
"", 
"<span class=\"comment\">/* Allocation counts.. */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dget, dget_locked<span class=\"ts\"/>-<span class=\"ts\"/>get a reference to a dentry</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry: dentry to get a reference to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Given a dentry or %NULL pointer increment the reference count</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if appropriate and return the dentry. A dentry will not be </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>destroyed when it has references. dget() should never be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called for dentries with zero reference counter. For these cases</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(preferably none, functions in dcache.c are sufficient for normal</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>needs and they take necessary precautions) you should hold dcache_lock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and call dget_locked() instead of dget().</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dget\">dget</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_count\">d_count</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_count\">d_count</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#dget_locked\">dget_locked</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>d_unhashed -<span class=\"ts\"/>is dentry hashed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry: entry to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns true if the dentry passed is not currently hashed.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#d_unhashed\">d_unhashed</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> &amp; <a class=\"id\" href=\"#DCACHE_UNHASHED\">DCACHE_UNHASHED</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#d_unlinked\">d_unlinked</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d_unhashed\">d_unhashed</a>(<a class=\"id\" href=\"#dentry\">dentry</a>) && !<a class=\"id\" href=\"#IS_ROOT\">IS_ROOT</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cant_mount\">cant_mount</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> &amp; <a class=\"id\" href=\"#DCACHE_CANT_MOUNT\">DCACHE_CANT_MOUNT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dont_mount\">dont_mount</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> |= <a class=\"id\" href=\"#DCACHE_CANT_MOUNT\">DCACHE_CANT_MOUNT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dget_parent\">dget_parent</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#dput\">dput</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#d_mountpoint\">d_mountpoint</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_mounted\">d_mounted</a>;", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#lookup_mnt\">lookup_mnt</a>(struct <a class=\"id\" href=\"#path\">path</a> *);", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#lookup_create\">lookup_create</a>(struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>, int <a class=\"id\" href=\"#is_dir\">is_dir</a>);", 
"", 
"extern int <a class=\"id\" href=\"#sysctl_vfs_cache_pressure\">sysctl_vfs_cache_pressure</a>;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* __LINUX_DCACHE_H */</span>", 
];
xr_frag_insert('l/f5/4cf4f894da0537b1b3f5a21a4acaf234f8016f.xr', __xr_tmp);
