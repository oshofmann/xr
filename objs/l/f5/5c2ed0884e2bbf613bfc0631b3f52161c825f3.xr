var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kvm_para\">kvm_para</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm_types\">mm_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#paravirt\">paravirt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ink_para\">ink_para</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* A pointer to the mmu ops implemented by the inktag module */</span>", 
"struct <a class=\"id\" href=\"#inktag_mmu_ops\">inktag_mmu_ops</a> *<a class=\"id\" href=\"#inktag_mmu\">inktag_mmu</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inktag_mmu\">inktag_mmu</a>);", 
"", 
"struct <a class=\"id\" href=\"#ink_mmu_queue\">ink_mmu_queue</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#queue\">queue</a>[(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - sizeof(<a class=\"id\" href=\"#uint64_t\">uint64_t</a>))];", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU_PAGE_ALIGNED\">DEFINE_PER_CPU_PAGE_ALIGNED</a>(struct <a class=\"id\" href=\"#ink_mmu_queue\">ink_mmu_queue</a>, <a class=\"id\" href=\"#mmu_queue\">mmu_queue</a>);", 
"", 
"static struct <a class=\"id\" href=\"#ink_mmu_queue\">ink_mmu_queue</a> *<a class=\"id\" href=\"#ink_get_queue\">ink_get_queue</a>(void)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#mmu_queue\">mmu_queue</a>, <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ink_flush_mmu\">ink_flush_mmu</a>(struct <a class=\"id\" href=\"#ink_mmu_queue\">ink_mmu_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inktag_mmu\">inktag_mmu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inktag_mmu\">inktag_mmu</a>-><a class=\"id\" href=\"#run_mmu_buffer\">run_mmu_buffer</a>((struct <a class=\"id\" href=\"#ink_mmu_call\">ink_mmu_call</a>*)<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue\">queue</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#len\">len</a> = 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#ink_mmu_op\">ink_mmu_op</a>(struct <a class=\"id\" href=\"#ink_mmu_call\">ink_mmu_call</a> *<a class=\"id\" href=\"#call\">call</a>, int <a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ink_mmu_queue\">ink_mmu_queue</a> *<a class=\"id\" href=\"#mmu_q\">mmu_q</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#paravirt_get_lazy_mode\">paravirt_get_lazy_mode</a>() != <a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inktag_mmu\">inktag_mmu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inktag_mmu\">inktag_mmu</a>-><a class=\"id\" href=\"#run_mmu_single\">run_mmu_single</a>(<a class=\"id\" href=\"#call\">call</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_q\">mmu_q</a> = <a class=\"id\" href=\"#ink_get_queue\">ink_get_queue</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#hdr\">hdr</a>) + (<a class=\"id\" href=\"#args\">args</a>*sizeof(<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#args\">args</a>[0]));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mmu_q\">mmu_q</a>-><a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#size\">size</a> &gt; sizeof(<a class=\"id\" href=\"#mmu_q\">mmu_q</a>-><a class=\"id\" href=\"#queue\">queue</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ink_flush_mmu\">ink_flush_mmu</a>(<a class=\"id\" href=\"#mmu_q\">mmu_q</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#mmu_q\">mmu_q</a>-><a class=\"id\" href=\"#queue\">queue</a> + <a class=\"id\" href=\"#mmu_q\">mmu_q</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#call\">call</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_q\">mmu_q</a>-><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ink_mmu_op\">ink_mmu_op</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAKE_CHECK_INKTAG\">MAKE_CHECK_INKTAG</a>(<a class=\"id\" href=\"#type\">type</a>) \\", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#type\">type</a>##<a class=\"id\" href=\"#_inktag\">_inktag</a>(<a class=\"id\" href=\"#type\">type</a>##<a class=\"id\" href=\"#_t\">_t</a> *<a class=\"id\" href=\"#p\">p</a>) { \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#p\">p</a>); \\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PageInktag\">PageInktag</a>(<a class=\"id\" href=\"#pg\">pg</a>); \\", 
"}", 
"", 
"<a class=\"id\" href=\"#MAKE_CHECK_INKTAG\">MAKE_CHECK_INKTAG</a>(<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"<a class=\"id\" href=\"#MAKE_CHECK_INKTAG\">MAKE_CHECK_INKTAG</a>(<a class=\"id\" href=\"#pud\">pud</a>)", 
"<a class=\"id\" href=\"#MAKE_CHECK_INKTAG\">MAKE_CHECK_INKTAG</a>(<a class=\"id\" href=\"#pmd\">pmd</a>)", 
"<a class=\"id\" href=\"#MAKE_CHECK_INKTAG\">MAKE_CHECK_INKTAG</a>(<a class=\"id\" href=\"#pte\">pte</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_inktag_set_child\">page_inktag_set_child</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#page_inktag\">page_inktag</a> = <a class=\"id\" href=\"#PageInktag\">PageInktag</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_inktag\">page_inktag</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageInktag\">SetPageInktag</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#ink_priv_ctx\">ink_priv_ctx</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#ink_priv_ctx\">ink_priv_ctx</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_inktag\">page_inktag</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_inktag_clear\">page_inktag_clear</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pg\">pg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#page_inktag\">page_inktag</a> = <a class=\"id\" href=\"#PageInktag\">PageInktag</a>(<a class=\"id\" href=\"#pg\">pg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_inktag\">page_inktag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageInktag\">ClearPageInktag</a>(<a class=\"id\" href=\"#pg\">pg</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_inktag\">page_inktag</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ink_pgd_free\">ink_pgd_free</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ink_mmu_call\">ink_mmu_call</a> <a class=\"id\" href=\"#call\">call</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#pgd_inktag\">pgd_inktag</a>(<a class=\"id\" href=\"#pgd\">pgd</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#FREE_PGD\">FREE_PGD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#free\">free</a>.<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#pgd\">pgd</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ink_mmu_op\">ink_mmu_op</a>(&amp;<a class=\"id\" href=\"#call\">call</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">static void ink_alloc_##type(unsigned long pfn) { \\</span>", 
"<span class=\"comment\"><span class=\"ts\"/>struct ink_mmu_call call; \\</span>", 
"<span class=\"comment\"><span class=\"ts\"/>if (pfn_inktag_set(pfn)) \\</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>return; \\</span>", 
"<span class=\"comment\"><span class=\"ts\"/>call.hdr.op = ALLOC_##TYPE; \\</span>", 
"<span class=\"comment\"><span class=\"ts\"/>call.alloc.pgd = __pa(mm-&gt;pgd); \\</span>", 
"<span class=\"comment\"><span class=\"ts\"/>call.alloc.pfn = pfn; \\</span>", 
"<span class=\"comment\"><span class=\"ts\"/>ink_mmu_op(&amp;call, 2); \\</span>", 
"<span class=\"comment\">} \\</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAKE_ALLOC_FREE\">MAKE_ALLOC_FREE</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#TYPE\">TYPE</a>) \\", 
"static void <a class=\"id\" href=\"#ink_free_\">ink_free_</a>##<a class=\"id\" href=\"#type\">type</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>) { \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ink_mmu_call\">ink_mmu_call</a> <a class=\"id\" href=\"#call\">call</a>; \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>); \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#page_inktag_clear\">page_inktag_clear</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>return; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#FREE_\">FREE_</a>##<a class=\"id\" href=\"#TYPE\">TYPE</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#ink_priv_shadow\">ink_priv_shadow</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#free\">free</a>.<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pfn\">pfn</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ink_mmu_op\">ink_mmu_op</a>(&amp;<a class=\"id\" href=\"#call\">call</a>, 1); \\", 
"}", 
"", 
"<a class=\"id\" href=\"#MAKE_ALLOC_FREE\">MAKE_ALLOC_FREE</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#PUD\">PUD</a>)", 
"<a class=\"id\" href=\"#MAKE_ALLOC_FREE\">MAKE_ALLOC_FREE</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#PMD\">PMD</a>)", 
"<a class=\"id\" href=\"#MAKE_ALLOC_FREE\">MAKE_ALLOC_FREE</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#PTE\">PTE</a>)", 
"", 
"static void <a class=\"id\" href=\"#ink_set_pgd\">ink_set_pgd</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ink_mmu_call\">ink_mmu_call</a> <a class=\"id\" href=\"#call\">call</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pgd_index\">pgd_index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pgd_page\">pgd_page</a>, *<a class=\"id\" href=\"#pud_page\">pud_page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_set_pgd\">native_set_pgd</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_page\">pgd_page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#PageInktag\">PageInktag</a>(<a class=\"id\" href=\"#pgd_page\">pgd_page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For pgds we would like to filter out kernel addresses */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_index\">pgd_index</a> = ((unsigned long)<a class=\"id\" href=\"#ptr\">ptr</a> &amp; (~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)) / sizeof(<a class=\"id\" href=\"#pgd_t\">pgd_t</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pgd_index\">pgd_index</a> << <a class=\"id\" href=\"#PGDIR_SHIFT\">PGDIR_SHIFT</a>) >= <a class=\"id\" href=\"#TASK_SIZE_MAX\">TASK_SIZE_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_page\">pud_page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>((<a class=\"id\" href=\"#val\">val</a>.<a class=\"id\" href=\"#pgd\">pgd</a> &amp; <a class=\"id\" href=\"#PTE_PFN_MASK\">PTE_PFN_MASK</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_inktag_set_child\">page_inktag_set_child</a>(<a class=\"id\" href=\"#pgd_page\">pgd_page</a>, <a class=\"id\" href=\"#pud_page\">pud_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#SET_PGD_ALLOC_PUD\">SET_PGD_ALLOC_PUD</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#SET_PGD\">SET_PGD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#tag\">tag</a> = (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#pud_page\">pud_page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#set\">set</a>.<a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#set\">set</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ink_mmu_op\">ink_mmu_op</a>(&amp;<a class=\"id\" href=\"#call\">call</a>, 2);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAKE_SET\">MAKE_SET</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#TYPE\">TYPE</a>, <a class=\"id\" href=\"#CHILD_TYPE\">CHILD_TYPE</a>) \\", 
"static void <a class=\"id\" href=\"#ink_set_\">ink_set_</a>##<a class=\"id\" href=\"#type\">type</a>(<a class=\"id\" href=\"#type\">type</a>##<a class=\"id\" href=\"#_t\">_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#type\">type</a>##<a class=\"id\" href=\"#_t\">_t</a> <a class=\"id\" href=\"#val\">val</a>) { \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ink_mmu_call\">ink_mmu_call</a> <a class=\"id\" href=\"#call\">call</a>;  \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#parent_page\">parent_page</a>, *<a class=\"id\" href=\"#child_page\">child_page</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_set_\">native_set_</a>##<a class=\"id\" href=\"#type\">type</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#val\">val</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent_page\">parent_page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#ptr\">ptr</a>); \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#PageInktag\">PageInktag</a>(<a class=\"id\" href=\"#parent_page\">parent_page</a>))) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>return; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child_page\">child_page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>((<a class=\"id\" href=\"#val\">val</a>.<a class=\"id\" href=\"#type\">type</a> &amp; <a class=\"id\" href=\"#PTE_PFN_MASK\">PTE_PFN_MASK</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>); \\", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_inktag_set_child\">page_inktag_set_child</a>(<a class=\"id\" href=\"#parent_page\">parent_page</a>, <a class=\"id\" href=\"#child_page\">child_page</a>)) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#SET_\">SET_</a>##<a class=\"id\" href=\"#TYPE\">TYPE</a>##<a class=\"id\" href=\"#_ALLOC_\">_ALLOC_</a>##<a class=\"id\" href=\"#CHILD_TYPE\">CHILD_TYPE</a>; \\", 
"<span class=\"ts\"/>else \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#SET_\">SET_</a>##<a class=\"id\" href=\"#TYPE\">TYPE</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#tag\">tag</a> = (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#child_page\">child_page</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#set\">set</a>.<a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#ptr\">ptr</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#set\">set</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#type\">type</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ink_mmu_op\">ink_mmu_op</a>(&amp;<a class=\"id\" href=\"#call\">call</a>, 2); \\", 
"}", 
"", 
"<a class=\"id\" href=\"#MAKE_SET\">MAKE_SET</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#PUD\">PUD</a>, <a class=\"id\" href=\"#PMD\">PMD</a>)", 
"<a class=\"id\" href=\"#MAKE_SET\">MAKE_SET</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#PMD\">PMD</a>, <a class=\"id\" href=\"#PTE\">PTE</a>)", 
"", 
"static void <a class=\"id\" href=\"#ink_set_pte\">ink_set_pte</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ink_mmu_call\">ink_mmu_call</a> <a class=\"id\" href=\"#call\">call</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_set_pte\">native_set_pte</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#pte_inktag\">pte_inktag</a>(<a class=\"id\" href=\"#ptr\">ptr</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#SET_PTE\">SET_PTE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#set\">set</a>.<a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#set\">set</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ink_mmu_op\">ink_mmu_op</a>(&amp;<a class=\"id\" href=\"#call\">call</a>, 2);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ink_pte_update\">ink_pte_update</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ink_mmu_call\">ink_mmu_call</a> <a class=\"id\" href=\"#call\">call</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#pte_inktag\">pte_inktag</a>(<a class=\"id\" href=\"#ptep\">ptep</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#SET_PTE\">SET_PTE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#set\">set</a>.<a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#set\">set</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#ptep\">ptep</a>-><a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ink_mmu_op\">ink_mmu_op</a>(&amp;<a class=\"id\" href=\"#call\">call</a>, 2);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ink_set_pte_at\">ink_set_pte_at</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pteval\">pteval</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ink_set_pte\">ink_set_pte</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pteval\">pteval</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ink_leave_lazy\">ink_leave_lazy</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ink_mmu_queue\">ink_mmu_queue</a> *<a class=\"id\" href=\"#mmu_q\">mmu_q</a> = <a class=\"id\" href=\"#ink_get_queue\">ink_get_queue</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mmu_q\">mmu_q</a>-><a class=\"id\" href=\"#len\">len</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ink_flush_mmu\">ink_flush_mmu</a>(<a class=\"id\" href=\"#mmu_q\">mmu_q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#paravirt_leave_lazy_mmu\">paravirt_leave_lazy_mmu</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#inktag_para_init\">inktag_para_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_info\">pv_info</a>.<a class=\"id\" href=\"#name\">name</a> = \"InkTAG\";", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_info\">pv_info</a>.<a class=\"id\" href=\"#paravirt_enabled\">paravirt_enabled</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* In the current design, we can only start tracking well after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the pgd has been allocated, so pgd_alloc is a nop */</span>", 
"<span class=\"ts\"/><span class=\"comment\">// pv_mmu_ops.pgd_alloc = __paravirt_pgd_alloc;</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#pgd_free\">pgd_free</a> = <a class=\"id\" href=\"#ink_pgd_free\">ink_pgd_free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>pv_mmu_ops.alloc_pud = ink_alloc_pud;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>pv_mmu_ops.alloc_pmd = ink_alloc_pmd;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>pv_mmu_ops.alloc_pte = ink_alloc_pte;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#release_pud\">release_pud</a> = <a class=\"id\" href=\"#ink_free_pud\">ink_free_pud</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#release_pmd\">release_pmd</a> = <a class=\"id\" href=\"#ink_free_pmd\">ink_free_pmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#release_pte\">release_pte</a> = <a class=\"id\" href=\"#ink_free_pte\">ink_free_pte</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>pv_mmu_ops.flush_tlb_user = ink_flush_user;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>pv_mmu_ops.flush_tlb_kernel = ink_flush_kernel;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>pv_mmu_ops.flush_tlb_single = ink_flush_single;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>pv_mmu_ops.flush_tlb_others = ink_flush_others;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#set_pgd\">set_pgd</a> = <a class=\"id\" href=\"#ink_set_pgd\">ink_set_pgd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#set_pud\">set_pud</a> = <a class=\"id\" href=\"#ink_set_pud\">ink_set_pud</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#set_pmd\">set_pmd</a> = <a class=\"id\" href=\"#ink_set_pmd\">ink_set_pmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#set_pte\">set_pte</a> = <a class=\"id\" href=\"#ink_set_pte\">ink_set_pte</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#set_pte_at\">set_pte_at</a> = <a class=\"id\" href=\"#ink_set_pte_at\">ink_set_pte_at</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#pte_update\">pte_update</a> = <a class=\"id\" href=\"#ink_pte_update\">ink_pte_update</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#pte_update_defer\">pte_update_defer</a> = <a class=\"id\" href=\"#ink_pte_update\">ink_pte_update</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#lazy_mode\">lazy_mode</a>.<a class=\"id\" href=\"#enter\">enter</a> = <a class=\"id\" href=\"#paravirt_enter_lazy_mmu\">paravirt_enter_lazy_mmu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>.<a class=\"id\" href=\"#lazy_mode\">lazy_mode</a>.<a class=\"id\" href=\"#leave\">leave</a> = <a class=\"id\" href=\"#ink_leave_lazy\">ink_leave_lazy</a>;", 
"}", 
];
xr_frag_insert('l/f5/5c2ed0884e2bbf613bfc0631b3f52161c825f3.xr', __xr_tmp);
