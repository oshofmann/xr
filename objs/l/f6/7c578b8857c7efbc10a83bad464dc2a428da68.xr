var __xr_tmp = [
"static int <a class=\"id\" href=\"#aligned_vread\">aligned_vread</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#copied\">copied</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (unsigned long)<a class=\"id\" href=\"#addr\">addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * To do safe access to this _mapped_ area, we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lock. But adding lock here means that we need to add</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * overhead of vmalloc()/vfree() calles for this _debug_</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * interface, rarely used. Instead of that, we'll use</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kmap() and get small overhead in this access function.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we can expect USER0 is not used (see vread/vwrite's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * function description)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#map\">map</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#buf\">buf</a>, 0, <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#aligned_vwrite\">aligned_vwrite</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#copied\">copied</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (unsigned long)<a class=\"id\" href=\"#addr\">addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * To do safe access to this _mapped_ area, we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lock. But adding lock here means that we need to add</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * overhead of vmalloc()/vfree() calles for this _debug_</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * interface, rarely used. Instead of that, we'll use</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kmap() and get small overhead in this access function.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we can expect USER0 is not used (see vread/vwrite's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * function description)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#map\">map</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vread() -  read vmalloc area in a safe way.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf:<span class=\"ts\"/><span class=\"ts\"/>buffer for reading data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr:<span class=\"ts\"/><span class=\"ts\"/>vm address.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@count:<span class=\"ts\"/><span class=\"ts\"/>number of bytes to be read.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns # of bytes which addr and buf should be increased.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(same number to @count). Returns 0 if [addr...addr+count) doesn't</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>includes any intersect with alive vmalloc area.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function checks that addr is a valid vmalloc'ed area, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>copy data from that area to a given buffer. If the given memory range</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of [addr...addr+count) includes some valid address, data is copied to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>proper area of @buf. If there are memory holes, they'll be zero-filled.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IOREMAP area is treated as memory hole and no copy is done.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If [addr...addr+count) doesn't includes any intersects with alive</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vm_struct area, returns 0.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf should be kernel's buffer. Because<span class=\"ts\"/>this function uses KM_USER0,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the caller should guarantee KM_USER0 is not used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: In usual ops, vread() is never necessary because the caller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should know vmalloc() area is valid and can use memcpy().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is for routines which have to access vmalloc area without</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>any informaion, as /dev/kmem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"long <a class=\"id\" href=\"#vread\">vread</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#vaddr\">vaddr</a>, *<a class=\"id\" href=\"#buf_start\">buf_start</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#buflen\">buflen</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't allow overflow */</span>", 
"<span class=\"ts\"/>if ((unsigned long) <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#count\">count</a>)", 
];
xr_frag_insert('l/f6/7c578b8857c7efbc10a83bad464dc2a428da68.xr', __xr_tmp);
