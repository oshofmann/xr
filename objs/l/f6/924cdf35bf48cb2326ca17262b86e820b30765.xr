var __xr_tmp = [
"<span class=\"ts\"/>int <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> &gt; <a class=\"id\" href=\"#PM_LEVEL_SIZE\">PM_LEVEL_SIZE</a>(<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#mode\">mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a>   =  <a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#mode\">mode</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>     = &amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#pt_root\">pt_root</a>[<a class=\"id\" href=\"#PM_LEVEL_INDEX\">PM_LEVEL_INDEX</a>(<a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#address\">address</a>)];", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#level\">level</a> &gt; 0) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not Present */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IOMMU_PTE_PRESENT\">IOMMU_PTE_PRESENT</a>(*<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Large PTE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PM_PTE_LEVEL\">PM_PTE_LEVEL</a>(*<a class=\"id\" href=\"#pte\">pte</a>) == 0x07) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pte_mask\">pte_mask</a>, <a class=\"id\" href=\"#__pte\">__pte</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we have a series of large PTEs, make</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sure to return a pointer to the first one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_mask\">pte_mask</a> = <a class=\"id\" href=\"#PTE_PAGE_SIZE\">PTE_PAGE_SIZE</a>(*<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_mask\">pte_mask</a> = ~((<a class=\"id\" href=\"#PAGE_SIZE_PTE_COUNT\">PAGE_SIZE_PTE_COUNT</a>(<a class=\"id\" href=\"#pte_mask\">pte_mask</a>) << 3) - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a>    = ((unsigned long)<a class=\"id\" href=\"#pte\">pte</a>) &amp; <a class=\"id\" href=\"#pte_mask\">pte_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#u64\">u64</a> *)<a class=\"id\" href=\"#__pte\">__pte</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No level skipping support yet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PM_PTE_LEVEL\">PM_PTE_LEVEL</a>(*<a class=\"id\" href=\"#pte\">pte</a>) != <a class=\"id\" href=\"#level\">level</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a> -= 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Walk to the next level */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#IOMMU_PTE_PAGE\">IOMMU_PTE_PAGE</a>(*<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = &amp;<a class=\"id\" href=\"#pte\">pte</a>[<a class=\"id\" href=\"#PM_LEVEL_INDEX\">PM_LEVEL_INDEX</a>(<a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#address\">address</a>)];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte\">pte</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic mapping functions. It maps a physical address into a DMA</span>", 
"<span class=\"comment\"> * address space. It allocates the page table pages if necessary.</span>", 
"<span class=\"comment\"> * In the future it can be extended to a generic mapping function</span>", 
"<span class=\"comment\"> * supporting all features of AMD IOMMU page tables like level skipping</span>", 
"<span class=\"comment\"> * and full 64 bit address spaces.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#iommu_map_page\">iommu_map_page</a>(struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#bus_addr\">bus_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#phys_addr\">phys_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#page_size\">page_size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#__pte\">__pte</a>, *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#prot\">prot</a> &amp; <a class=\"id\" href=\"#IOMMU_PROT_MASK\">IOMMU_PROT_MASK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_addr\">bus_addr</a>  = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#bus_addr\">bus_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr\">phys_addr</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>     = <a class=\"id\" href=\"#PAGE_SIZE_PTE_COUNT\">PAGE_SIZE_PTE_COUNT</a>(<a class=\"id\" href=\"#page_size\">page_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>       = <a class=\"id\" href=\"#alloc_pte\">alloc_pte</a>(<a class=\"id\" href=\"#dom\">dom</a>, <a class=\"id\" href=\"#bus_addr\">bus_addr</a>, <a class=\"id\" href=\"#page_size\">page_size</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IOMMU_PTE_PRESENT\">IOMMU_PTE_PRESENT</a>(<a class=\"id\" href=\"#pte\">pte</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_size\">page_size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> = <a class=\"id\" href=\"#PAGE_SIZE_PTE\">PAGE_SIZE_PTE</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#page_size\">page_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> |= <a class=\"id\" href=\"#PM_LEVEL_ENC\">PM_LEVEL_ENC</a>(7) | <a class=\"id\" href=\"#IOMMU_PTE_P\">IOMMU_PTE_P</a> | <a class=\"id\" href=\"#IOMMU_PTE_FC\">IOMMU_PTE_FC</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> = <a class=\"id\" href=\"#phys_addr\">phys_addr</a> | <a class=\"id\" href=\"#IOMMU_PTE_P\">IOMMU_PTE_P</a> | <a class=\"id\" href=\"#IOMMU_PTE_FC\">IOMMU_PTE_FC</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prot\">prot</a> &amp; <a class=\"id\" href=\"#IOMMU_PROT_IR\">IOMMU_PROT_IR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> |= <a class=\"id\" href=\"#IOMMU_PTE_IR\">IOMMU_PTE_IR</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prot\">prot</a> &amp; <a class=\"id\" href=\"#IOMMU_PROT_IW\">IOMMU_PROT_IW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> |= <a class=\"id\" href=\"#IOMMU_PTE_IW\">IOMMU_PTE_IW</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#__pte\">__pte</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_domain\">update_domain</a>(<a class=\"id\" href=\"#dom\">dom</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#iommu_unmap_page\">iommu_unmap_page</a>(struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#bus_addr\">bus_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#page_size\">page_size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#unmap_size\">unmap_size</a>, <a class=\"id\" href=\"#unmapped\">unmapped</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#is_power_of_2\">is_power_of_2</a>(<a class=\"id\" href=\"#page_size\">page_size</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmapped\">unmapped</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#unmapped\">unmapped</a> &lt; <a class=\"id\" href=\"#page_size\">page_size</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#fetch_pte\">fetch_pte</a>(<a class=\"id\" href=\"#dom\">dom</a>, <a class=\"id\" href=\"#bus_addr\">bus_addr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * No PTE for this address</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * move forward in 4kb steps</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_size\">unmap_size</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#PM_PTE_LEVEL\">PM_PTE_LEVEL</a>(*<a class=\"id\" href=\"#pte\">pte</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 4kb PTE found for this address */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_size\">unmap_size</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pte\">pte</a>       = 0ULL;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Large PTE found which maps this address */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_size\">unmap_size</a> = <a class=\"id\" href=\"#PTE_PAGE_SIZE\">PTE_PAGE_SIZE</a>(*<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>      = <a class=\"id\" href=\"#PAGE_SIZE_PTE_COUNT\">PAGE_SIZE_PTE_COUNT</a>(<a class=\"id\" href=\"#unmap_size\">unmap_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>[<a class=\"id\" href=\"#i\">i</a>] = 0ULL;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bus_addr\">bus_addr</a>  = (<a class=\"id\" href=\"#bus_addr\">bus_addr</a> &amp; ~(<a class=\"id\" href=\"#unmap_size\">unmap_size</a> - 1)) + <a class=\"id\" href=\"#unmap_size\">unmap_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmapped\">unmapped</a> += <a class=\"id\" href=\"#unmap_size\">unmap_size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#is_power_of_2\">is_power_of_2</a>(<a class=\"id\" href=\"#unmapped\">unmapped</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unmapped\">unmapped</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function checks if a specific unity mapping entry is needed for</span>", 
"<span class=\"comment\"> * this specific IOMMU.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#iommu_for_unity_map\">iommu_for_unity_map</a>(struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#unity_map_entry\">unity_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#bdf\">bdf</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#devid_start\">devid_start</a>; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#devid_end\">devid_end</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdf\">bdf</a> = <a class=\"id\" href=\"#amd_iommu_alias_table\">amd_iommu_alias_table</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#amd_iommu_rlookup_table\">amd_iommu_rlookup_table</a>[<a class=\"id\" href=\"#bdf\">bdf</a>] == <a class=\"id\" href=\"#iommu\">iommu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function actually applies the mapping to the page table of the</span>", 
"<span class=\"comment\"> * dma_ops domain.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dma_ops_unity_map\">dma_ops_unity_map</a>(struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dma_dom\">dma_dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#unity_map_entry\">unity_map_entry</a> *<a class=\"id\" href=\"#e\">e</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#address_start\">address_start</a>; <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#address_end\">address_end</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#iommu_map_page\">iommu_map_page</a>(&amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if unity mapping is in aperture range mark the page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as allocated in the aperture</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#addr\">addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[0]-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Init the unity mappings for a specific IOMMU in the system</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Basically iterates over all unity mapping entries and applies them to</span>", 
"<span class=\"comment\"> * the default domain DMA of that IOMMU if necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#iommu_init_unity_mappings\">iommu_init_unity_mappings</a>(struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#unity_map_entry\">unity_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>, &amp;<a class=\"id\" href=\"#amd_iommu_unity_map\">amd_iommu_unity_map</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#iommu_for_unity_map\">iommu_for_unity_map</a>(<a class=\"id\" href=\"#iommu\">iommu</a>, <a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dma_ops_unity_map\">dma_ops_unity_map</a>(<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#default_dom\">default_dom</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Inits the unity mappings required for a specific device</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#init_unity_mappings_for_device\">init_unity_mappings_for_device</a>(struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dma_dom\">dma_dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#unity_map_entry\">unity_map_entry</a> *<a class=\"id\" href=\"#e\">e</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#e\">e</a>, &amp;<a class=\"id\" href=\"#amd_iommu_unity_map\">amd_iommu_unity_map</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#devid\">devid</a> >= <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_start\">devid_start</a> && <a class=\"id\" href=\"#devid\">devid</a> <= <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_end\">devid_end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dma_ops_unity_map\">dma_ops_unity_map</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>, <a class=\"id\" href=\"#e\">e</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/****************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The next functions belong to the address allocator for the dma_ops</span>", 
"<span class=\"comment\"> * interface functions. They work like the allocators in the other IOMMU</span>", 
"<span class=\"comment\"> * drivers. Its basically a bitmap which marks the allocated pages in</span>", 
"<span class=\"comment\"> * the aperture. Maybe it could be enhanced in the future to a more</span>", 
"<span class=\"comment\"> * efficient allocator.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The address allocator core functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * called with domain-&gt;lock held</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Used to reserve address ranges in the aperture (e.g. for exclusion</span>", 
"<span class=\"comment\"> * ranges.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dma_ops_reserve_addresses\">dma_ops_reserve_addresses</a>(struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#start_page\">start_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#last_page\">last_page</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_page\">start_page</a> + <a class=\"id\" href=\"#pages\">pages</a> &gt; <a class=\"id\" href=\"#last_page\">last_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#last_page\">last_page</a> - <a class=\"id\" href=\"#start_page\">start_page</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#start_page\">start_page</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#start_page\">start_page</a> + <a class=\"id\" href=\"#pages\">pages</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#i\">i</a> / <a class=\"id\" href=\"#APERTURE_RANGE_PAGES\">APERTURE_RANGE_PAGES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#page\">page</a>  = <a class=\"id\" href=\"#i\">i</a> % <a class=\"id\" href=\"#APERTURE_RANGE_PAGES\">APERTURE_RANGE_PAGES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#index\">index</a>]-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is used to add a new aperture range to an existing</span>", 
"<span class=\"comment\"> * aperture in case of dma_ops domain allocation or address allocation</span>", 
"<span class=\"comment\"> * failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#alloc_new_range\">alloc_new_range</a>(struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dma_dom\">dma_dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#populate\">populate</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a> >> <a class=\"id\" href=\"#APERTURE_RANGE_SHIFT\">APERTURE_RANGE_SHIFT</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IOMMU_STRESS\">CONFIG_IOMMU_STRESS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#populate\">populate</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#APERTURE_MAX_RANGES\">APERTURE_MAX_RANGES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#index\">index</a>] = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#aperture_range\">aperture_range</a>), <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#index\">index</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#index\">index</a>]-><a class=\"id\" href=\"#bitmap\">bitmap</a> = (void *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#index\">index</a>]-><a class=\"id\" href=\"#bitmap\">bitmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#index\">index</a>]-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#populate\">populate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#num_ptes\">num_ptes</a> = <a class=\"id\" href=\"#APERTURE_RANGE_PAGES\">APERTURE_RANGE_PAGES</a> / 512;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#pte\">pte</a>, *<a class=\"id\" href=\"#pte_page\">pte_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_ptes\">num_ptes</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#alloc_pte\">alloc_pte</a>(&amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#pte_page\">pte_page</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#index\">index</a>]-><a class=\"id\" href=\"#pte_pages\">pte_pages</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#pte_page\">pte_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> += <a class=\"id\" href=\"#APERTURE_RANGE_SIZE\">APERTURE_RANGE_SIZE</a> / 64;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a> += <a class=\"id\" href=\"#APERTURE_RANGE_SIZE\">APERTURE_RANGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Intialize the exclusion range if necessary */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_iommu\">for_each_iommu</a>(<a class=\"id\" href=\"#iommu\">iommu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#exclusion_start\">exclusion_start</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#exclusion_start\">exclusion_start</a> >= <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#index\">index</a>]-><a class=\"id\" href=\"#offset\">offset</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#exclusion_start\">exclusion_start</a> &lt; <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#startpage\">startpage</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#iommu_num_pages\">iommu_num_pages</a>(<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#exclusion_start\">exclusion_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#exclusion_length\">exclusion_length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#startpage\">startpage</a> = <a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#exclusion_start\">exclusion_start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_ops_reserve_addresses\">dma_ops_reserve_addresses</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>, <a class=\"id\" href=\"#startpage\">startpage</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for areas already mapped as present in the new aperture</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * range and mark those pages as reserved in the allocator. Such</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mappings may already exist as a result of requested unity</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mappings for devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#index\">index</a>]-><a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#fetch_pte\">fetch_pte</a>(&amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a> || !<a class=\"id\" href=\"#IOMMU_PTE_PRESENT\">IOMMU_PTE_PRESENT</a>(*<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_ops_reserve_addresses\">dma_ops_reserve_addresses</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>, <a class=\"id\" href=\"#i\">i</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, 1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_domain\">update_domain</a>(&amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_domain\">update_domain</a>(&amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#index\">index</a>]-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#index\">index</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#index\">index</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#dma_ops_area_alloc\">dma_ops_area_alloc</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#align_mask\">align_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dma_mask\">dma_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next_bit\">next_bit</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#next_address\">next_address</a> % <a class=\"id\" href=\"#APERTURE_RANGE_SIZE\">APERTURE_RANGE_SIZE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_index\">max_index</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a> >> <a class=\"id\" href=\"#APERTURE_RANGE_SHIFT\">APERTURE_RANGE_SHIFT</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#APERTURE_RANGE_SHIFT\">APERTURE_RANGE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#boundary_size\">boundary_size</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a> = -1;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#limit\">limit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_bit\">next_bit</a> >>= <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#boundary_size\">boundary_size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#dma_get_seg_boundary\">dma_get_seg_boundary</a>(<a class=\"id\" href=\"#dev\">dev</a>) + 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>for (;<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max_index\">max_index</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#offset\">offset</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#dma_mask\">dma_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#iommu_device_max_index\">iommu_device_max_index</a>(<a class=\"id\" href=\"#APERTURE_RANGE_PAGES\">APERTURE_RANGE_PAGES</a>, <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dma_mask\">dma_mask</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#iommu_area_alloc\">iommu_area_alloc</a>(<a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#bitmap\">bitmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#next_bit\">next_bit</a>, <a class=\"id\" href=\"#pages\">pages</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#boundary_size\">boundary_size</a>, <a class=\"id\" href=\"#align_mask\">align_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#offset\">offset</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#address\">address</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#next_address\">next_address</a> = <a class=\"id\" href=\"#address\">address</a> + (<a class=\"id\" href=\"#pages\">pages</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_bit\">next_bit</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#address\">address</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#dma_ops_alloc_addresses\">dma_ops_alloc_addresses</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#align_mask\">align_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dma_mask\">dma_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IOMMU_STRESS\">CONFIG_IOMMU_STRESS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#next_address\">next_address</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#need_flush\">need_flush</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#dma_ops_area_alloc\">dma_ops_area_alloc</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dom\">dom</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#align_mask\">align_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#dma_mask\">dma_mask</a>, <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#next_address\">next_address</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#next_address\">next_address</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#dma_ops_area_alloc\">dma_ops_area_alloc</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dom\">dom</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#align_mask\">align_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#dma_mask\">dma_mask</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#need_flush\">need_flush</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#address\">address</a> == -1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#DMA_ERROR_CODE\">DMA_ERROR_CODE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>((<a class=\"id\" href=\"#address\">address</a> + (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>*<a class=\"id\" href=\"#pages\">pages</a>)) &gt; <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#address\">address</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The address free function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * called with domain-&gt;lock held</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dma_ops_free_addresses\">dma_ops_free_addresses</a>(struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#address\">address</a> >> <a class=\"id\" href=\"#APERTURE_RANGE_SHIFT\">APERTURE_RANGE_SHIFT</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aperture_range\">aperture_range</a> *<a class=\"id\" href=\"#range\">range</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#APERTURE_MAX_RANGES\">APERTURE_MAX_RANGES</a> || <a class=\"id\" href=\"#range\">range</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IOMMU_STRESS\">CONFIG_IOMMU_STRESS</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; 4)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> >= <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#next_address\">next_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#need_flush\">need_flush</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = (<a class=\"id\" href=\"#address\">address</a> % <a class=\"id\" href=\"#APERTURE_RANGE_SIZE\">APERTURE_RANGE_SIZE</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_clear\">bitmap_clear</a>(<a class=\"id\" href=\"#range\">range</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"}", 
"", 
"<span class=\"comment\">/****************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The next functions belong to the domain allocation. A domain is</span>", 
"<span class=\"comment\"> * allocated for every IOMMU as the default domain. If device isolation</span>", 
"<span class=\"comment\"> * is enabled, every device get its own domain. The most important thing</span>", 
"<span class=\"comment\"> * about domains is the page table mapping the DMA address space they</span>", 
"<span class=\"comment\"> * contain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function adds a protection domain to the global protection domain list</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#add_domain_to_list\">add_domain_to_list</a>(struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#amd_iommu_pd_lock\">amd_iommu_pd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#amd_iommu_pd_list\">amd_iommu_pd_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#amd_iommu_pd_lock\">amd_iommu_pd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function removes a protection domain to the global</span>", 
"<span class=\"comment\"> * protection domain list</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#del_domain_from_list\">del_domain_from_list</a>(struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#amd_iommu_pd_lock\">amd_iommu_pd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#amd_iommu_pd_lock\">amd_iommu_pd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#domain_id_alloc\">domain_id_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irqsave\">write_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#amd_iommu_devtable_lock\">amd_iommu_devtable_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#find_first_zero_bit\">find_first_zero_bit</a>(<a class=\"id\" href=\"#amd_iommu_pd_alloc_bitmap\">amd_iommu_pd_alloc_bitmap</a>, <a class=\"id\" href=\"#MAX_DOMAIN_ID\">MAX_DOMAIN_ID</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#id\">id</a> == 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> &gt; 0 && <a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#MAX_DOMAIN_ID\">MAX_DOMAIN_ID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#amd_iommu_pd_alloc_bitmap\">amd_iommu_pd_alloc_bitmap</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irqrestore\">write_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#amd_iommu_devtable_lock\">amd_iommu_devtable_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#domain_id_free\">domain_id_free</a>(int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irqsave\">write_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#amd_iommu_devtable_lock\">amd_iommu_devtable_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> &gt; 0 && <a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#MAX_DOMAIN_ID\">MAX_DOMAIN_ID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#amd_iommu_pd_alloc_bitmap\">amd_iommu_pd_alloc_bitmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irqrestore\">write_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#amd_iommu_devtable_lock\">amd_iommu_devtable_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_pagetable\">free_pagetable</a>(struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#p1\">p1</a>, *<a class=\"id\" href=\"#p2\">p2</a>, *<a class=\"id\" href=\"#p3\">p3</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p1\">p1</a> = <a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#pt_root\">pt_root</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p1\">p1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 512; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IOMMU_PTE_PRESENT\">IOMMU_PTE_PRESENT</a>(<a class=\"id\" href=\"#p1\">p1</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p2\">p2</a> = <a class=\"id\" href=\"#IOMMU_PTE_PAGE\">IOMMU_PTE_PAGE</a>(<a class=\"id\" href=\"#p1\">p1</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 512; ++<a class=\"id\" href=\"#j\">j</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IOMMU_PTE_PRESENT\">IOMMU_PTE_PRESENT</a>(<a class=\"id\" href=\"#p2\">p2</a>[<a class=\"id\" href=\"#j\">j</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p3\">p3</a> = <a class=\"id\" href=\"#IOMMU_PTE_PAGE\">IOMMU_PTE_PAGE</a>(<a class=\"id\" href=\"#p2\">p2</a>[<a class=\"id\" href=\"#j\">j</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#p3\">p3</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#p2\">p2</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#p1\">p1</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#pt_root\">pt_root</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free a domain, only used if something went wrong in the</span>", 
"<span class=\"comment\"> * allocation path and we need to free an already allocated page table</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dma_ops_domain_free\">dma_ops_domain_free</a>(struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dom\">dom</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_domain_from_list\">del_domain_from_list</a>(&amp;<a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pagetable\">free_pagetable</a>(&amp;<a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#APERTURE_MAX_RANGES\">APERTURE_MAX_RANGES</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dom\">dom</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocates a new protection domain usable for the dma_ops functions.</span>", 
"<span class=\"comment\"> * It also intializes the page table and the address allocator data</span>", 
"<span class=\"comment\"> * structures required for the dma_ops interface</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dma_ops_domain_alloc\">dma_ops_domain_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dma_dom\">dma_dom</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_dom\">dma_dom</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>.<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#domain_id_alloc\">domain_id_alloc</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>.<a class=\"id\" href=\"#id\">id</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_dma_dom\">free_dma_dom</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>.<a class=\"id\" href=\"#dev_list\">dev_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#PAGE_MODE_2_LEVEL\">PAGE_MODE_2_LEVEL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>.<a class=\"id\" href=\"#pt_root\">pt_root</a> = (void *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#PD_DMA_OPS_MASK\">PD_DMA_OPS_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>.<a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#dma_dom\">dma_dom</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>.<a class=\"id\" href=\"#pt_root\">pt_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_dma_dom\">free_dma_dom</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#need_flush\">need_flush</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#target_dev\">target_dev</a> = 0xffff;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_domain_to_list\">add_domain_to_list</a>(&amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_new_range\">alloc_new_range</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_dma_dom\">free_dma_dom</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mark the first page as allocated so we never return 0 as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a valid dma-address. So we can use 0 as error value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[0]-><a class=\"id\" href=\"#bitmap\">bitmap</a>[0] = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#next_address\">next_address</a> = 0;", 
"", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dma_dom\">dma_dom</a>;", 
"", 
"<a class=\"id\" href=\"#free_dma_dom\">free_dma_dom</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_ops_domain_free\">dma_ops_domain_free</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * little helper function to check whether a given protection domain is a</span>", 
"<span class=\"comment\"> * dma_ops domain</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a>(struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PD_DMA_OPS_MASK\">PD_DMA_OPS_MASK</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_dte_entry\">set_dte_entry</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a>, struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pte_root\">pte_root</a> = <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#pt_root\">pt_root</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_root\">pte_root</a> |= (<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#DEV_ENTRY_MODE_MASK\">DEV_ENTRY_MODE_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    << <a class=\"id\" href=\"#DEV_ENTRY_MODE_SHIFT\">DEV_ENTRY_MODE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_root\">pte_root</a> |= <a class=\"id\" href=\"#IOMMU_PTE_IR\">IOMMU_PTE_IR</a> | <a class=\"id\" href=\"#IOMMU_PTE_IW\">IOMMU_PTE_IW</a> | <a class=\"id\" href=\"#IOMMU_PTE_P\">IOMMU_PTE_P</a> | <a class=\"id\" href=\"#IOMMU_PTE_TV\">IOMMU_PTE_TV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_dev_table\">amd_iommu_dev_table</a>[<a class=\"id\" href=\"#devid\">devid</a>].<a class=\"id\" href=\"#data\">data</a>[2] = <a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_dev_table\">amd_iommu_dev_table</a>[<a class=\"id\" href=\"#devid\">devid</a>].<a class=\"id\" href=\"#data\">data</a>[1] = <a class=\"id\" href=\"#upper_32_bits\">upper_32_bits</a>(<a class=\"id\" href=\"#pte_root\">pte_root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_dev_table\">amd_iommu_dev_table</a>[<a class=\"id\" href=\"#devid\">devid</a>].<a class=\"id\" href=\"#data\">data</a>[0] = <a class=\"id\" href=\"#lower_32_bits\">lower_32_bits</a>(<a class=\"id\" href=\"#pte_root\">pte_root</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clear_dte_entry\">clear_dte_entry</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* remove entry from the device table seen by the hardware */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_dev_table\">amd_iommu_dev_table</a>[<a class=\"id\" href=\"#devid\">devid</a>].<a class=\"id\" href=\"#data\">data</a>[0] = <a class=\"id\" href=\"#IOMMU_PTE_P\">IOMMU_PTE_P</a> | <a class=\"id\" href=\"#IOMMU_PTE_TV\">IOMMU_PTE_TV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_dev_table\">amd_iommu_dev_table</a>[<a class=\"id\" href=\"#devid\">devid</a>].<a class=\"id\" href=\"#data\">data</a>[1] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_dev_table\">amd_iommu_dev_table</a>[<a class=\"id\" href=\"#devid\">devid</a>].<a class=\"id\" href=\"#data\">data</a>[2] = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_apply_erratum_63\">amd_iommu_apply_erratum_63</a>(<a class=\"id\" href=\"#devid\">devid</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#do_attach\">do_attach</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iommu_dev_data\">iommu_dev_data</a> *<a class=\"id\" href=\"#dev_data\">dev_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devid\">devid</a>    = <a class=\"id\" href=\"#get_device_id\">get_device_id</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu\">iommu</a>    = <a class=\"id\" href=\"#amd_iommu_rlookup_table\">amd_iommu_rlookup_table</a>[<a class=\"id\" href=\"#devid\">devid</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_data\">dev_data</a> = <a class=\"id\" href=\"#get_dev_data\">get_dev_data</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update data structures */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#dev_list\">dev_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_dte_entry\">set_dte_entry</a>(<a class=\"id\" href=\"#devid\">devid</a>, <a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do reference counting */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#dev_iommu\">dev_iommu</a>[<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#index\">index</a>] += 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#dev_cnt\">dev_cnt</a>                 += 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Flush the DTE entry */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_device\">iommu_flush_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#do_detach\">do_detach</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iommu_dev_data\">iommu_dev_data</a> *<a class=\"id\" href=\"#dev_data\">dev_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devid\">devid</a>    = <a class=\"id\" href=\"#get_device_id\">get_device_id</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu\">iommu</a>    = <a class=\"id\" href=\"#amd_iommu_rlookup_table\">amd_iommu_rlookup_table</a>[<a class=\"id\" href=\"#devid\">devid</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_data\">dev_data</a> = <a class=\"id\" href=\"#get_dev_data\">get_dev_data</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* decrease reference counters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#dev_iommu\">dev_iommu</a>[<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#index\">index</a>] -= 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#dev_cnt\">dev_cnt</a>                 -= 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update data structures */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_dte_entry\">clear_dte_entry</a>(<a class=\"id\" href=\"#devid\">devid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Flush the DTE entry */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_device\">iommu_flush_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If a device is not yet associated with a domain, this function does</span>", 
"<span class=\"comment\"> * assigns it visible for the hardware</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__attach_device\">__attach_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iommu_dev_data\">iommu_dev_data</a> *<a class=\"id\" href=\"#dev_data\">dev_data</a>, *<a class=\"id\" href=\"#alias_data\">alias_data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_data\">dev_data</a>   = <a class=\"id\" href=\"#get_dev_data\">get_dev_data</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alias_data\">alias_data</a> = <a class=\"id\" href=\"#get_dev_data\">get_dev_data</a>(<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#alias\">alias</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alias_data\">alias_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* lock domain */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Some sanity checks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alias_data\">alias_data</a>-><a class=\"id\" href=\"#domain\">domain</a> != <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#alias_data\">alias_data</a>-><a class=\"id\" href=\"#domain\">domain</a> != <a class=\"id\" href=\"#domain\">domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a> != <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a> != <a class=\"id\" href=\"#domain\">domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do real assignment */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#alias\">alias</a> != <a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alias_data\">alias_data</a> = <a class=\"id\" href=\"#get_dev_data\">get_dev_data</a>(<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#alias\">alias</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alias_data\">alias_data</a>-><a class=\"id\" href=\"#domain\">domain</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_attach\">do_attach</a>(<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#alias\">alias</a>, <a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#alias_data\">alias_data</a>-><a class=\"id\" href=\"#bind\">bind</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_attach\">do_attach</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#bind\">bind</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ready */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If a device is not yet associated with a domain, this function does</span>", 
"<span class=\"comment\"> * assigns it visible for the hardware</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#attach_device\">attach_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irqsave\">write_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#amd_iommu_devtable_lock\">amd_iommu_devtable_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__attach_device\">__attach_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#domain\">domain</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irqrestore\">write_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#amd_iommu_devtable_lock\">amd_iommu_devtable_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We might boot into a crash-kernel here. The crashed kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * left the caches in the IOMMU dirty. So we have to flush</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here to evict all dirty stuff.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_tlb_pde\">iommu_flush_tlb_pde</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Removes a device from a protection domain (unlocked)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__detach_device\">__detach_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iommu_dev_data\">iommu_dev_data</a> *<a class=\"id\" href=\"#dev_data\">dev_data</a> = <a class=\"id\" href=\"#get_dev_data\">get_dev_data</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iommu_dev_data\">iommu_dev_data</a> *<a class=\"id\" href=\"#alias_data\">alias_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#alias\">alias</a> != <a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alias_data\">alias_data</a> = <a class=\"id\" href=\"#get_dev_data\">get_dev_data</a>(<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#alias\">alias</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#alias_data\">alias_data</a>-><a class=\"id\" href=\"#bind\">bind</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_detach\">do_detach</a>(<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#alias\">alias</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#bind\">bind</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_detach\">do_detach</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we run in passthrough mode the device must be assigned to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * passthrough domain if it is detached from any other domain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure we can deassign from the pt_domain itself.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu_pass_through\">iommu_pass_through</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a> == <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#domain\">domain</a> != <a class=\"id\" href=\"#pt_domain\">pt_domain</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attach_device\">__attach_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pt_domain\">pt_domain</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Removes a device from a protection domain (with devtable_lock held)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#detach_device\">detach_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* lock device table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irqsave\">write_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#amd_iommu_devtable_lock\">amd_iommu_devtable_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__detach_device\">__detach_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irqrestore\">write_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#amd_iommu_devtable_lock\">amd_iommu_devtable_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Find out the protection domain structure for a given PCI device. This</span>", 
"<span class=\"comment\"> * will give us the pointer to the page table root for example.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain_for_device\">domain_for_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iommu_dev_data\">iommu_dev_data</a> *<a class=\"id\" href=\"#dev_data\">dev_data</a>, *<a class=\"id\" href=\"#alias_data\">alias_data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a>, <a class=\"id\" href=\"#alias\">alias</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devid\">devid</a>      = <a class=\"id\" href=\"#get_device_id\">get_device_id</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alias\">alias</a>      = <a class=\"id\" href=\"#amd_iommu_alias_table\">amd_iommu_alias_table</a>[<a class=\"id\" href=\"#devid\">devid</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_data\">dev_data</a>   = <a class=\"id\" href=\"#get_dev_data\">get_dev_data</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alias_data\">alias_data</a> = <a class=\"id\" href=\"#get_dev_data\">get_dev_data</a>(<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#alias\">alias</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alias_data\">alias_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock_irqsave\">read_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#amd_iommu_devtable_lock\">amd_iommu_devtable_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dom\">dom</a> = <a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dom\">dom</a> == <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#alias_data\">alias_data</a>-><a class=\"id\" href=\"#domain\">domain</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attach_device\">__attach_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#alias_data\">alias_data</a>-><a class=\"id\" href=\"#domain\">domain</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dom\">dom</a> = <a class=\"id\" href=\"#alias_data\">alias_data</a>-><a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock_irqrestore\">read_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#amd_iommu_devtable_lock\">amd_iommu_devtable_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dom\">dom</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#device_change_notifier\">device_change_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dma_domain\">dma_domain</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_device\">check_device</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devid\">devid</a>  = <a class=\"id\" href=\"#get_device_id\">get_device_id</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu\">iommu</a>  = <a class=\"id\" href=\"#amd_iommu_rlookup_table\">amd_iommu_rlookup_table</a>[<a class=\"id\" href=\"#devid\">devid</a>];", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BUS_NOTIFY_UNBOUND_DRIVER\">BUS_NOTIFY_UNBOUND_DRIVER</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#domain_for_device\">domain_for_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#domain\">domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu_pass_through\">iommu_pass_through</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_device\">detach_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BUS_NOTIFY_ADD_DEVICE\">BUS_NOTIFY_ADD_DEVICE</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_init_device\">iommu_init_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#domain_for_device\">domain_for_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allocate a protection domain if a device is added */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_domain\">dma_domain</a> = <a class=\"id\" href=\"#find_protection_domain\">find_protection_domain</a>(<a class=\"id\" href=\"#devid\">devid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_domain\">dma_domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_domain\">dma_domain</a> = <a class=\"id\" href=\"#dma_ops_domain_alloc\">dma_ops_domain_alloc</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_domain\">dma_domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_domain\">dma_domain</a>-><a class=\"id\" href=\"#target_dev\">target_dev</a> = <a class=\"id\" href=\"#devid\">devid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#iommu_pd_list_lock\">iommu_pd_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#dma_domain\">dma_domain</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#iommu_pd_list\">iommu_pd_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#iommu_pd_list_lock\">iommu_pd_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BUS_NOTIFY_DEL_DEVICE\">BUS_NOTIFY_DEL_DEVICE</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_uninit_device\">iommu_uninit_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_device\">iommu_flush_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_completion_wait\">iommu_completion_wait</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#device_nb\">device_nb</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#device_change_notifier\">device_change_notifier</a>,", 
"};", 
"", 
"void <a class=\"id\" href=\"#amd_iommu_init_notifier\">amd_iommu_init_notifier</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_register_notifier\">bus_register_notifier</a>(&amp;<a class=\"id\" href=\"#pci_bus_type\">pci_bus_type</a>, &amp;<a class=\"id\" href=\"#device_nb\">device_nb</a>);", 
"}", 
"", 
"<span class=\"comment\">/*****************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The next functions belong to the dma_ops mapping/unmapping code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In the dma_ops path we only have the struct device. This function</span>", 
"<span class=\"comment\"> * finds the corresponding IOMMU, the protection domain and the</span>", 
"<span class=\"comment\"> * requestor id for a given device.</span>", 
"<span class=\"comment\"> * If the device is not yet associated with a domain this is also done</span>", 
"<span class=\"comment\"> * in this function.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#get_domain\">get_domain</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dma_dom\">dma_dom</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a> = <a class=\"id\" href=\"#get_device_id\">get_device_id</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_device\">check_device</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#domain_for_device\">domain_for_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#domain\">domain</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && !<a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a>(<a class=\"id\" href=\"#domain\">domain</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EBUSY\">EBUSY</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#domain\">domain</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#domain\">domain</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Device not bount yet - bind it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a> = <a class=\"id\" href=\"#find_protection_domain\">find_protection_domain</a>(<a class=\"id\" href=\"#devid\">devid</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_dom\">dma_dom</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a> = <a class=\"id\" href=\"#amd_iommu_rlookup_table\">amd_iommu_rlookup_table</a>[<a class=\"id\" href=\"#devid\">devid</a>]-><a class=\"id\" href=\"#default_dom\">default_dom</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attach_device\">attach_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_printk\">DUMP_printk</a>(\"Using protection domain %d for device %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>.<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_device_table\">update_device_table</a>(struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iommu_dev_data\">iommu_dev_data</a> *<a class=\"id\" href=\"#dev_data\">dev_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev_data\">dev_data</a>, &amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#dev_list\">dev_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a> = <a class=\"id\" href=\"#get_device_id\">get_device_id</a>(<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_dte_entry\">set_dte_entry</a>(<a class=\"id\" href=\"#devid\">devid</a>, <a class=\"id\" href=\"#domain\">domain</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_domain\">update_domain</a>(struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#updated\">updated</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_device_table\">update_device_table</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_domain_devices\">iommu_flush_domain_devices</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_tlb_pde\">iommu_flush_tlb_pde</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#updated\">updated</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function fetches the PTE for a given address in the aperture</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a>* <a class=\"id\" href=\"#dma_ops_get_pte\">dma_ops_get_pte</a>(struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aperture_range\">aperture_range</a> *<a class=\"id\" href=\"#aperture\">aperture</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#pte\">pte</a>, *<a class=\"id\" href=\"#pte_page\">pte_page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aperture\">aperture</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#APERTURE_RANGE_INDEX\">APERTURE_RANGE_INDEX</a>(<a class=\"id\" href=\"#address\">address</a>)];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#aperture\">aperture</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#aperture\">aperture</a>-><a class=\"id\" href=\"#pte_pages\">pte_pages</a>[<a class=\"id\" href=\"#APERTURE_PAGE_INDEX\">APERTURE_PAGE_INDEX</a>(<a class=\"id\" href=\"#address\">address</a>)];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#alloc_pte\">alloc_pte</a>(&amp;<a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, &amp;<a class=\"id\" href=\"#pte_page\">pte_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aperture\">aperture</a>-><a class=\"id\" href=\"#pte_pages\">pte_pages</a>[<a class=\"id\" href=\"#APERTURE_PAGE_INDEX\">APERTURE_PAGE_INDEX</a>(<a class=\"id\" href=\"#address\">address</a>)] = <a class=\"id\" href=\"#pte_page\">pte_page</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> += <a class=\"id\" href=\"#PM_LEVEL_INDEX\">PM_LEVEL_INDEX</a>(0, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_domain\">update_domain</a>(&amp;<a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte\">pte</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the generic map function. It maps one 4kb page at paddr to</span>", 
"<span class=\"comment\"> * the given address in the DMA address space for the domain.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_ops_domain_map\">dma_ops_domain_map</a>(struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#direction\">direction</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#__pte\">__pte</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#address\">address</a> &gt; <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#paddr\">paddr</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>  = <a class=\"id\" href=\"#dma_ops_get_pte\">dma_ops_get_pte</a>(<a class=\"id\" href=\"#dom\">dom</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_ERROR_CODE\">DMA_ERROR_CODE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> = <a class=\"id\" href=\"#paddr\">paddr</a> | <a class=\"id\" href=\"#IOMMU_PTE_P\">IOMMU_PTE_P</a> | <a class=\"id\" href=\"#IOMMU_PTE_FC\">IOMMU_PTE_FC</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#direction\">direction</a> == <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> |= <a class=\"id\" href=\"#IOMMU_PTE_IR\">IOMMU_PTE_IR</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#direction\">direction</a> == <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> |= <a class=\"id\" href=\"#IOMMU_PTE_IW\">IOMMU_PTE_IW</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#direction\">direction</a> == <a class=\"id\" href=\"#DMA_BIDIRECTIONAL\">DMA_BIDIRECTIONAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> |= <a class=\"id\" href=\"#IOMMU_PTE_IR\">IOMMU_PTE_IR</a> | <a class=\"id\" href=\"#IOMMU_PTE_IW\">IOMMU_PTE_IW</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(*<a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#__pte\">__pte</a>;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a>)<a class=\"id\" href=\"#address\">address</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The generic unmapping function for on page in the DMA address space.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dma_ops_domain_unmap\">dma_ops_domain_unmap</a>(struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aperture_range\">aperture_range</a> *<a class=\"id\" href=\"#aperture\">aperture</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> >= <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aperture\">aperture</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#aperture\">aperture</a>[<a class=\"id\" href=\"#APERTURE_RANGE_INDEX\">APERTURE_RANGE_INDEX</a>(<a class=\"id\" href=\"#address\">address</a>)];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#aperture\">aperture</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>  = <a class=\"id\" href=\"#aperture\">aperture</a>-><a class=\"id\" href=\"#pte_pages\">pte_pages</a>[<a class=\"id\" href=\"#APERTURE_PAGE_INDEX\">APERTURE_PAGE_INDEX</a>(<a class=\"id\" href=\"#address\">address</a>)];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> += <a class=\"id\" href=\"#PM_LEVEL_INDEX\">PM_LEVEL_INDEX</a>(0, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!*<a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pte\">pte</a> = 0ULL;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function contains common code for mapping of a physically</span>", 
"<span class=\"comment\"> * contiguous memory region into DMA address space. It is used by all</span>", 
"<span class=\"comment\"> * mapping functions provided with this IOMMU driver.</span>", 
"<span class=\"comment\"> * Must be called with the domain lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#__map_single\">__map_single</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dma_dom\">dma_dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dma_mask\">dma_mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#paddr\">paddr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#align_mask\">align_mask</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#iommu_num_pages\">iommu_num_pages</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#paddr\">paddr</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INC_STATS_COUNTER\">INC_STATS_COUNTER</a>(<a class=\"id\" href=\"#total_map_requests\">total_map_requests</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INC_STATS_COUNTER\">INC_STATS_COUNTER</a>(<a class=\"id\" href=\"#cross_page\">cross_page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#align\">align</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align_mask\">align_mask</a> = (1UL << <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>)) - 1;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#dma_ops_alloc_addresses\">dma_ops_alloc_addresses</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dma_dom\">dma_dom</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#align_mask\">align_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dma_mask\">dma_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#address\">address</a> == <a class=\"id\" href=\"#DMA_ERROR_CODE\">DMA_ERROR_CODE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * setting next_address here will let the address</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocator only scan the new allocated range in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * first run. This is a small optimization.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#next_address\">next_address</a> = <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_new_range\">alloc_new_range</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>, <a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * aperture was successfully enlarged by 128 MB, try</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocation again</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pages\">pages</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dma_ops_domain_map\">dma_ops_domain_map</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#DMA_ERROR_CODE\">DMA_ERROR_CODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unmap\">out_unmap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#paddr\">paddr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> += <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS_COUNTER\">ADD_STATS_COUNTER</a>(<a class=\"id\" href=\"#alloced_io_mem\">alloced_io_mem</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#need_flush\">need_flush</a> && !<a class=\"id\" href=\"#amd_iommu_unmap_flush\">amd_iommu_unmap_flush</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_tlb\">iommu_flush_tlb</a>(&amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#need_flush\">need_flush</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#amd_iommu_np_cache\">amd_iommu_np_cache</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_pages\">iommu_flush_pages</a>(&amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#address\">address</a>;", 
"", 
"<a class=\"id\" href=\"#out_unmap\">out_unmap</a>:", 
"", 
"<span class=\"ts\"/>for (--<a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#i\">i</a> >= 0; --<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> -= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_ops_domain_unmap\">dma_ops_domain_unmap</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_ops_free_addresses\">dma_ops_free_addresses</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_ERROR_CODE\">DMA_ERROR_CODE</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Does the reverse of the __map_single function. Must be called with</span>", 
"<span class=\"comment\"> * the domain lock held too</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__unmap_single\">__unmap_single</a>(struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dma_dom\">dma_dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_addr\">dma_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#flush_addr\">flush_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pages\">pages</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dma_addr\">dma_addr</a> == <a class=\"id\" href=\"#DMA_ERROR_CODE\">DMA_ERROR_CODE</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dma_addr\">dma_addr</a> + <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#aperture_size\">aperture_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_addr\">flush_addr</a> = <a class=\"id\" href=\"#dma_addr\">dma_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#iommu_num_pages\">iommu_num_pages</a>(<a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr\">dma_addr</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#dma_addr\">dma_addr</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pages\">pages</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_ops_domain_unmap\">dma_ops_domain_unmap</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SUB_STATS_COUNTER\">SUB_STATS_COUNTER</a>(<a class=\"id\" href=\"#alloced_io_mem\">alloced_io_mem</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_ops_free_addresses\">dma_ops_free_addresses</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>, <a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#amd_iommu_unmap_flush\">amd_iommu_unmap_flush</a> || <a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#need_flush\">need_flush</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_pages\">iommu_flush_pages</a>(&amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#flush_addr\">flush_addr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#need_flush\">need_flush</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The exported map_single function for dma_ops.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#map_page\">map_page</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dma_mask\">dma_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#page\">page</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INC_STATS_COUNTER\">INC_STATS_COUNTER</a>(<a class=\"id\" href=\"#cnt_map_single\">cnt_map_single</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#get_domain\">get_domain</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#domain\">domain</a>) == -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a>)<a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#domain\">domain</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_ERROR_CODE\">DMA_ERROR_CODE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_mask\">dma_mask</a> = *<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dma_mask\">dma_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__map_single\">__map_single</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#false\">false</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#dma_mask\">dma_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#DMA_ERROR_CODE\">DMA_ERROR_CODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_complete\">iommu_flush_complete</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The exported unmap_single function for dma_ops.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#unmap_page\">unmap_page</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INC_STATS_COUNTER\">INC_STATS_COUNTER</a>(<a class=\"id\" href=\"#cnt_unmap_single\">cnt_unmap_single</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#get_domain\">get_domain</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#domain\">domain</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__unmap_single\">__unmap_single</a>(<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_complete\">iommu_flush_complete</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a special map_sg function which is used if we should map a</span>", 
"<span class=\"comment\"> * device which is not handled by an AMD IOMMU in the system.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#map_sg_no_iommu\">map_sg_no_iommu</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sglist\">sglist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#nelems\">nelems</a>, int <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sglist\">sglist</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = (<a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a>)<a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a>  = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nelems\">nelems</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The exported map_sg function for dma_ops (handles scatter-gather</span>", 
"<span class=\"comment\"> * lists).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#map_sg\">map_sg</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sglist\">sglist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#nelems\">nelems</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mapped_elems\">mapped_elems</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dma_mask\">dma_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INC_STATS_COUNTER\">INC_STATS_COUNTER</a>(<a class=\"id\" href=\"#cnt_map_sg\">cnt_map_sg</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#get_domain\">get_domain</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#domain\">domain</a>) == -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#map_sg_no_iommu\">map_sg_no_iommu</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#sglist\">sglist</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#domain\">domain</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_mask\">dma_mask</a> = *<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dma_mask\">dma_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sglist\">sglist</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#__map_single\">__map_single</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#priv\">priv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#false\">false</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#dma_mask\">dma_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapped_elems\">mapped_elems</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unmap\">unmap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_complete\">iommu_flush_complete</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mapped_elems\">mapped_elems</a>;", 
"<a class=\"id\" href=\"#unmap\">unmap</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sglist\">sglist</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#mapped_elems\">mapped_elems</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__unmap_single\">__unmap_single</a>(<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapped_elems\">mapped_elems</a> = 0;", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The exported map_sg function for dma_ops (handles scatter-gather</span>", 
"<span class=\"comment\"> * lists).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#unmap_sg\">unmap_sg</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sglist\">sglist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#nelems\">nelems</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INC_STATS_COUNTER\">INC_STATS_COUNTER</a>(<a class=\"id\" href=\"#cnt_unmap_sg\">cnt_unmap_sg</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#get_domain\">get_domain</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#domain\">domain</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sglist\">sglist</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__unmap_single\">__unmap_single</a>(<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_complete\">iommu_flush_complete</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The exported alloc_coherent function for dma_ops.</span>", 
"<span class=\"comment\"> */</span>", 
"static void *<a class=\"id\" href=\"#alloc_coherent\">alloc_coherent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#virt_addr\">virt_addr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dma_mask\">dma_mask</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#coherent_dma_mask\">coherent_dma_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INC_STATS_COUNTER\">INC_STATS_COUNTER</a>(<a class=\"id\" href=\"#cnt_alloc_coherent\">cnt_alloc_coherent</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#get_domain\">get_domain</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#domain\">domain</a>) == -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#virt_addr\">virt_addr</a> = (void *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#flag\">flag</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dma_addr\">dma_addr</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#virt_addr\">virt_addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#virt_addr\">virt_addr</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#domain\">domain</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_mask\">dma_mask</a>  = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#coherent_dma_mask\">coherent_dma_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a>     &= ~(<a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a> | <a class=\"id\" href=\"#__GFP_DMA32\">__GFP_DMA32</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a>     |= <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#virt_addr\">virt_addr</a> = (void *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#flag\">flag</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#virt_addr\">virt_addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#virt_addr\">virt_addr</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_mask\">dma_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_mask\">dma_mask</a> = *<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dma_mask\">dma_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dma_addr\">dma_addr</a> = <a class=\"id\" href=\"#__map_single\">__map_single</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#paddr\">paddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#DMA_BIDIRECTIONAL\">DMA_BIDIRECTIONAL</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#dma_mask\">dma_mask</a>);", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#dma_addr\">dma_addr</a> == <a class=\"id\" href=\"#DMA_ERROR_CODE\">DMA_ERROR_CODE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_complete\">iommu_flush_complete</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#virt_addr\">virt_addr</a>;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#virt_addr\">virt_addr</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The exported free_coherent function for dma_ops.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_coherent\">free_coherent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#virt_addr\">virt_addr</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_addr\">dma_addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INC_STATS_COUNTER\">INC_STATS_COUNTER</a>(<a class=\"id\" href=\"#cnt_free_coherent\">cnt_free_coherent</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#get_domain\">get_domain</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#domain\">domain</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_mem\">free_mem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__unmap_single\">__unmap_single</a>(<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#DMA_BIDIRECTIONAL\">DMA_BIDIRECTIONAL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_complete\">iommu_flush_complete</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<a class=\"id\" href=\"#free_mem\">free_mem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#virt_addr\">virt_addr</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is called by the DMA layer to find out if we can handle a</span>", 
"<span class=\"comment\"> * particular device. It is part of the dma_ops.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#amd_iommu_dma_supported\">amd_iommu_dma_supported</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#check_device\">check_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The function for pre-allocating protection domains.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the driver core informs the DMA layer if a driver grabs a device</span>", 
"<span class=\"comment\"> * we don't need to preallocate the protection domains anymore.</span>", 
"<span class=\"comment\"> * For now we have to.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#prealloc_protection_domains\">prealloc_protection_domains</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_ops_domain\">dma_ops_domain</a> *<a class=\"id\" href=\"#dma_dom\">dma_dom</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_pci_dev\">for_each_pci_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Do we handle this device? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_device\">check_device</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Is there already any domain for it? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#domain_for_device\">domain_for_device</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devid\">devid</a> = <a class=\"id\" href=\"#get_device_id\">get_device_id</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a> = <a class=\"id\" href=\"#dma_ops_domain_alloc\">dma_ops_domain_alloc</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_dom\">dma_dom</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_unity_mappings_for_device\">init_unity_mappings_for_device</a>(<a class=\"id\" href=\"#dma_dom\">dma_dom</a>, <a class=\"id\" href=\"#devid\">devid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#target_dev\">target_dev</a> = <a class=\"id\" href=\"#devid\">devid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attach_device\">attach_device</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#dma_dom\">dma_dom</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#iommu_pd_list\">iommu_pd_list</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dma_map_ops\">dma_map_ops</a> <a class=\"id\" href=\"#amd_iommu_dma_ops\">amd_iommu_dma_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#alloc_coherent\">alloc_coherent</a> = <a class=\"id\" href=\"#alloc_coherent\">alloc_coherent</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#free_coherent\">free_coherent</a> = <a class=\"id\" href=\"#free_coherent\">free_coherent</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#map_page\">map_page</a> = <a class=\"id\" href=\"#map_page\">map_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unmap_page\">unmap_page</a> = <a class=\"id\" href=\"#unmap_page\">unmap_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#map_sg\">map_sg</a> = <a class=\"id\" href=\"#map_sg\">map_sg</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unmap_sg\">unmap_sg</a> = <a class=\"id\" href=\"#unmap_sg\">unmap_sg</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dma_supported\">dma_supported</a> = <a class=\"id\" href=\"#amd_iommu_dma_supported\">amd_iommu_dma_supported</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The function which clues the AMD IOMMU driver into dma_ops.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#amd_iommu_init_api\">amd_iommu_init_api</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_iommu\">register_iommu</a>(&amp;<a class=\"id\" href=\"#amd_iommu_ops\">amd_iommu_ops</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#amd_iommu_init_dma_ops\">amd_iommu_init_dma_ops</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * first allocate a default protection domain for every IOMMU we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * found in the system. Devices not assigned to any other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * protection domain will be assigned to the default one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_iommu\">for_each_iommu</a>(<a class=\"id\" href=\"#iommu\">iommu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#default_dom\">default_dom</a> = <a class=\"id\" href=\"#dma_ops_domain_alloc\">dma_ops_domain_alloc</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#default_dom\">default_dom</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#default_dom\">default_dom</a>-><a class=\"id\" href=\"#domain\">domain</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PD_DEFAULT_MASK\">PD_DEFAULT_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#iommu_init_unity_mappings\">iommu_init_unity_mappings</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_domains\">free_domains</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Pre-allocate the protection domains for each device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prealloc_protection_domains\">prealloc_protection_domains</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_detected\">iommu_detected</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swiotlb\">swiotlb</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make the driver finally visible to the drivers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_ops\">dma_ops</a> = &amp;<a class=\"id\" href=\"#amd_iommu_dma_ops\">amd_iommu_dma_ops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_stats_init\">amd_iommu_stats_init</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#free_domains\">free_domains</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_iommu\">for_each_iommu</a>(<a class=\"id\" href=\"#iommu\">iommu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#default_dom\">default_dom</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_ops_domain_free\">dma_ops_domain_free</a>(<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#default_dom\">default_dom</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*****************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The following functions belong to the exported interface of AMD IOMMU</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This interface allows access to lower level functions of the IOMMU</span>", 
"<span class=\"comment\"> * like protection domain handling and assignement of devices to domains</span>", 
"<span class=\"comment\"> * which is not possible with the dma_ops interface.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"static void <a class=\"id\" href=\"#cleanup_domain\">cleanup_domain</a>(struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iommu_dev_data\">iommu_dev_data</a> *<a class=\"id\" href=\"#dev_data\">dev_data</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irqsave\">write_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#amd_iommu_devtable_lock\">amd_iommu_devtable_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#dev_data\">dev_data</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#dev_list\">dev_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__detach_device\">__detach_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#bind\">bind</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irqrestore\">write_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#amd_iommu_devtable_lock\">amd_iommu_devtable_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#protection_domain_free\">protection_domain_free</a>(struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#domain\">domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_domain_from_list\">del_domain_from_list</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#domain_id_free\">domain_id_free</a>(<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#protection_domain_alloc\">protection_domain_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#domain\">domain</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#domain\">domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#api_lock\">api_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#domain_id_alloc\">domain_id_alloc</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#dev_list\">dev_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_domain_to_list\">add_domain_to_list</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#domain\">domain</a>;", 
"", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#amd_iommu_domain_init\">amd_iommu_domain_init</a>(struct <a class=\"id\" href=\"#iommu_domain\">iommu_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#protection_domain_alloc\">protection_domain_alloc</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#domain\">domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#mode\">mode</a>    = <a class=\"id\" href=\"#PAGE_MODE_3_LEVEL\">PAGE_MODE_3_LEVEL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#pt_root\">pt_root</a> = (void *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#pt_root\">pt_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#domain\">domain</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#protection_domain_free\">protection_domain_free</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#amd_iommu_domain_destroy\">amd_iommu_domain_destroy</a>(struct <a class=\"id\" href=\"#iommu_domain\">iommu_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#priv\">priv</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#domain\">domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#dev_cnt\">dev_cnt</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cleanup_domain\">cleanup_domain</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#dev_cnt\">dev_cnt</a> != 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pagetable\">free_pagetable</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#protection_domain_free\">protection_domain_free</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#amd_iommu_detach_device\">amd_iommu_detach_device</a>(struct <a class=\"id\" href=\"#iommu_domain\">iommu_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iommu_dev_data\">iommu_dev_data</a> *<a class=\"id\" href=\"#dev_data\">dev_data</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#archdata\">archdata</a>.<a class=\"id\" href=\"#iommu\">iommu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_device\">check_device</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devid\">devid</a> = <a class=\"id\" href=\"#get_device_id\">get_device_id</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_device\">detach_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu\">iommu</a> = <a class=\"id\" href=\"#amd_iommu_rlookup_table\">amd_iommu_rlookup_table</a>[<a class=\"id\" href=\"#devid\">devid</a>];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iommu\">iommu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_device\">iommu_flush_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_completion_wait\">iommu_completion_wait</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#amd_iommu_attach_device\">amd_iommu_attach_device</a>(struct <a class=\"id\" href=\"#iommu_domain\">iommu_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#priv\">priv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iommu_dev_data\">iommu_dev_data</a> *<a class=\"id\" href=\"#dev_data\">dev_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_device\">check_device</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_data\">dev_data</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#archdata\">archdata</a>.<a class=\"id\" href=\"#iommu\">iommu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devid\">devid</a> = <a class=\"id\" href=\"#get_device_id\">get_device_id</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu\">iommu</a> = <a class=\"id\" href=\"#amd_iommu_rlookup_table\">amd_iommu_rlookup_table</a>[<a class=\"id\" href=\"#devid\">devid</a>];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iommu\">iommu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_data\">dev_data</a>-><a class=\"id\" href=\"#domain\">domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_device\">detach_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#attach_device\">attach_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_completion_wait\">iommu_completion_wait</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#amd_iommu_map\">amd_iommu_map</a>(struct <a class=\"id\" href=\"#iommu_domain\">iommu_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>, unsigned long <a class=\"id\" href=\"#iova\">iova</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>, int <a class=\"id\" href=\"#gfp_order\">gfp_order</a>, int <a class=\"id\" href=\"#iommu_prot\">iommu_prot</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page_size\">page_size</a> = 0x1000UL << <a class=\"id\" href=\"#gfp_order\">gfp_order</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#priv\">priv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prot\">prot</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu_prot\">iommu_prot</a> &amp; <a class=\"id\" href=\"#IOMMU_READ\">IOMMU_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> |= <a class=\"id\" href=\"#IOMMU_PROT_IR\">IOMMU_PROT_IR</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu_prot\">iommu_prot</a> &amp; <a class=\"id\" href=\"#IOMMU_WRITE\">IOMMU_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> |= <a class=\"id\" href=\"#IOMMU_PROT_IW\">IOMMU_PROT_IW</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#api_lock\">api_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#iommu_map_page\">iommu_map_page</a>(<a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#iova\">iova</a>, <a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#page_size\">page_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#api_lock\">api_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#amd_iommu_unmap\">amd_iommu_unmap</a>(struct <a class=\"id\" href=\"#iommu_domain\">iommu_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>, unsigned long <a class=\"id\" href=\"#iova\">iova</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#gfp_order\">gfp_order</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#priv\">priv</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page_size\">page_size</a>, <a class=\"id\" href=\"#unmap_size\">unmap_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_size\">page_size</a>  = 0x1000UL << <a class=\"id\" href=\"#gfp_order\">gfp_order</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#api_lock\">api_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmap_size\">unmap_size</a> = <a class=\"id\" href=\"#iommu_unmap_page\">iommu_unmap_page</a>(<a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#iova\">iova</a>, <a class=\"id\" href=\"#page_size\">page_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#domain\">domain</a>-><a class=\"id\" href=\"#api_lock\">api_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_flush_tlb_pde\">iommu_flush_tlb_pde</a>(<a class=\"id\" href=\"#domain\">domain</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#unmap_size\">unmap_size</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#amd_iommu_iova_to_phys\">amd_iommu_iova_to_phys</a>(struct <a class=\"id\" href=\"#iommu_domain\">iommu_domain</a> *<a class=\"id\" href=\"#dom\">dom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#iova\">iova</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#protection_domain\">protection_domain</a> *<a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#dom\">dom</a>-><a class=\"id\" href=\"#priv\">priv</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset_mask\">offset_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#__pte\">__pte</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#fetch_pte\">fetch_pte</a>(<a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#iova\">iova</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a> || !<a class=\"id\" href=\"#IOMMU_PTE_PRESENT\">IOMMU_PTE_PRESENT</a>(*<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PM_PTE_LEVEL\">PM_PTE_LEVEL</a>(*<a class=\"id\" href=\"#pte\">pte</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset_mask\">offset_mask</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset_mask\">offset_mask</a> = <a class=\"id\" href=\"#PTE_PAGE_SIZE\">PTE_PAGE_SIZE</a>(*<a class=\"id\" href=\"#pte\">pte</a>) - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> = *<a class=\"id\" href=\"#pte\">pte</a> &amp; <a class=\"id\" href=\"#PM_ADDR_MASK\">PM_ADDR_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#paddr\">paddr</a> = (<a class=\"id\" href=\"#__pte\">__pte</a> &amp; ~<a class=\"id\" href=\"#offset_mask\">offset_mask</a>) | (<a class=\"id\" href=\"#iova\">iova</a> &amp; <a class=\"id\" href=\"#offset_mask\">offset_mask</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#amd_iommu_domain_has_cap\">amd_iommu_domain_has_cap</a>(struct <a class=\"id\" href=\"#iommu_domain\">iommu_domain</a> *<a class=\"id\" href=\"#domain\">domain</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cap\">cap</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOMMU_CAP_CACHE_COHERENCY\">IOMMU_CAP_CACHE_COHERENCY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#iommu_ops\">iommu_ops</a> <a class=\"id\" href=\"#amd_iommu_ops\">amd_iommu_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#domain_init\">domain_init</a> = <a class=\"id\" href=\"#amd_iommu_domain_init\">amd_iommu_domain_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#domain_destroy\">domain_destroy</a> = <a class=\"id\" href=\"#amd_iommu_domain_destroy\">amd_iommu_domain_destroy</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attach_dev\">attach_dev</a> = <a class=\"id\" href=\"#amd_iommu_attach_device\">amd_iommu_attach_device</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#detach_dev\">detach_dev</a> = <a class=\"id\" href=\"#amd_iommu_detach_device\">amd_iommu_detach_device</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#amd_iommu_map\">amd_iommu_map</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unmap\">unmap</a> = <a class=\"id\" href=\"#amd_iommu_unmap\">amd_iommu_unmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#iova_to_phys\">iova_to_phys</a> = <a class=\"id\" href=\"#amd_iommu_iova_to_phys\">amd_iommu_iova_to_phys</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#domain_has_cap\">domain_has_cap</a> = <a class=\"id\" href=\"#amd_iommu_domain_has_cap\">amd_iommu_domain_has_cap</a>,", 
"};", 
"", 
"<span class=\"comment\">/*****************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The next functions do a basic initialization of IOMMU for pass through</span>", 
"<span class=\"comment\"> * mode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In passthrough mode the IOMMU is initialized and enabled but not used for</span>", 
"<span class=\"comment\"> * DMA-API translation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#amd_iommu_init_passthrough\">amd_iommu_init_passthrough</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate passthrough domain */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pt_domain\">pt_domain</a> = <a class=\"id\" href=\"#protection_domain_alloc\">protection_domain_alloc</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pt_domain\">pt_domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pt_domain\">pt_domain</a>-><a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#PAGE_MODE_NONE\">PAGE_MODE_NONE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_pci_dev\">for_each_pci_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_device\">check_device</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devid\">devid</a> = <a class=\"id\" href=\"#get_device_id\">get_device_id</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu\">iommu</a> = <a class=\"id\" href=\"#amd_iommu_rlookup_table\">amd_iommu_rlookup_table</a>[<a class=\"id\" href=\"#devid\">devid</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#iommu\">iommu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attach_device\">attach_device</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pt_domain\">pt_domain</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"AMD-Vi: Initialized for Passthrough Mode\\n\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/f6/924cdf35bf48cb2326ca17262b86e820b30765.xr', __xr_tmp);
