var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/mm/page_isolation.c</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#page\">page</a>-<a class=\"id\" href=\"#isolation\">isolation</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pageblock\">pageblock</a>-<a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#__first_valid_page\">__first_valid_page</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_valid_within\">pfn_valid_within</a>(<a class=\"id\" href=\"#pfn\">pfn</a> + <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#nr_pages\">nr_pages</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * start_isolate_page_range() -- make page-allocation-type of range of pages</span>", 
"<span class=\"comment\"> * to be MIGRATE_ISOLATE.</span>", 
"<span class=\"comment\"> * @start_pfn: The lower PFN of the range to be isolated.</span>", 
"<span class=\"comment\"> * @end_pfn: The upper PFN of the range to be isolated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Making page-allocation-type to be MIGRATE_ISOLATE means free pages in</span>", 
"<span class=\"comment\"> * the range will never be allocated. Any free pages and pages freed in the</span>", 
"<span class=\"comment\"> * future will not be allocated again.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * start_pfn/end_pfn must be aligned to pageblock_order.</span>", 
"<span class=\"comment\"> * Returns 0 on success and -EBUSY if any part of range cannot be isolated.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#start_isolate_page_range\">start_isolate_page_range</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#undo_pfn\">undo_pfn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#start_pfn\">start_pfn</a>) &amp; (<a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a> - 1));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#end_pfn\">end_pfn</a>) &amp; (<a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a> - 1));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__first_valid_page\">__first_valid_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> && <a class=\"id\" href=\"#set_migratetype_isolate\">set_migratetype_isolate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#undo_pfn\">undo_pfn</a> = <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#undo\">undo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#undo\">undo</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#undo_pfn\">undo_pfn</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unset_migratetype_isolate\">unset_migratetype_isolate</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>));", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Make isolated pages available again.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#undo_isolate_page_range\">undo_isolate_page_range</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#start_pfn\">start_pfn</a>) &amp; (<a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a> - 1));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((<a class=\"id\" href=\"#end_pfn\">end_pfn</a>) &amp; (<a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a> - 1));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__first_valid_page\">__first_valid_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a> || <a class=\"id\" href=\"#get_pageblock_migratetype\">get_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#MIGRATE_ISOLATE\">MIGRATE_ISOLATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unset_migratetype_isolate\">unset_migratetype_isolate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test all pages in the range is free(means isolated) or not.</span>", 
"<span class=\"comment\"> * all pages in [start_pfn...end_pfn) must be in the same zone.</span>", 
"<span class=\"comment\"> * zone-&gt;lock must be held before call this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if all pages in the range is isolated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#__test_page_isolated_in_pageblock\">__test_page_isolated_in_pageblock</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid_within\">pfn_valid_within</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageBuddy\">PageBuddy</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> += 1 << <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>) == <a class=\"id\" href=\"#MIGRATE_ISOLATE\">MIGRATE_ISOLATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> += 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"int <a class=\"id\" href=\"#test_pages_isolated\">test_pages_isolated</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: pageblock_nr_page != MAX_ORDER. Then, chunks of free page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is not aligned to pageblock_nr_pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Then we just check pagetype fist.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__first_valid_page\">__first_valid_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> && <a class=\"id\" href=\"#get_pageblock_migratetype\">get_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#MIGRATE_ISOLATE\">MIGRATE_ISOLATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__first_valid_page\">__first_valid_page</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a> - <a class=\"id\" href=\"#start_pfn\">start_pfn</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#end_pfn\">end_pfn</a>) || !<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Check all pages are free or Marked as ISOLATED */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__test_page_isolated_in_pageblock\">__test_page_isolated_in_pageblock</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? 0 : -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"}", 
];
xr_frag_insert('l/f7/1b3ebdaa74354a3e648ed5d3063d97db039022.xr', __xr_tmp);
