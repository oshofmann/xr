var __xr_tmp = [
"<span class=\"comment\">/* rwsem.h: R/W semaphores implemented using XADD/CMPXCHG for i486+</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Written by David Howells (dhowells@redhat.com).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Derived from asm-x86/semaphore.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The MSW of the count is the negated number of active writers and waiting</span>", 
"<span class=\"comment\"> * lockers, and the LSW is the total number of active locks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The lock count is initialized to 0 (no active and no waiting lockers).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When a writer subtracts WRITE_BIAS, it'll get 0xffff0001 for the case of an</span>", 
"<span class=\"comment\"> * uncontended lock. This can be determined because XADD returns the old value.</span>", 
"<span class=\"comment\"> * Readers increment by 1 and see a positive value when uncontended, negative</span>", 
"<span class=\"comment\"> * if there are writers (and maybe) readers waiting (in which case it goes to</span>", 
"<span class=\"comment\"> * sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The value of WAITING_BIAS supports up to 32766 waiting processes. This can</span>", 
"<span class=\"comment\"> * be extended to 65534 by manually checking the whole MSW rather than relying</span>", 
"<span class=\"comment\"> * on the S flag.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The value of ACTIVE_BIAS supports up to 65535 active processes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This should be totally fair - if anything is waiting, a process that wants a</span>", 
"<span class=\"comment\"> * lock will go to the back of the queue. When the currently active lock is</span>", 
"<span class=\"comment\"> * released, if there's a writer at the front of the queue, then that and only</span>", 
"<span class=\"comment\"> * that will be woken up; if there's a bunch of consequtive readers at the</span>", 
"<span class=\"comment\"> * front, then they'll all be woken up, but no other readers will be.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_RWSEM_H\">_ASM_X86_RWSEM_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_RWSEM_H\">_ASM_X86_RWSEM_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_RWSEM_H\">_LINUX_RWSEM_H</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"please don't include asm/rwsem.h directly, use linux/rwsem.h instead\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#lockdep\">lockdep</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#asm\">asm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#rwsem_waiter\">rwsem_waiter</a>;", 
"", 
"extern <a class=\"id\" href=\"#asmregparm\">asmregparm</a> struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *", 
" <a class=\"id\" href=\"#rwsem_down_read_failed\">rwsem_down_read_failed</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"extern <a class=\"id\" href=\"#asmregparm\">asmregparm</a> struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *", 
" <a class=\"id\" href=\"#rwsem_down_write_failed\">rwsem_down_write_failed</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"extern <a class=\"id\" href=\"#asmregparm\">asmregparm</a> struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *", 
" <a class=\"id\" href=\"#rwsem_wake\">rwsem_wake</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *);", 
"extern <a class=\"id\" href=\"#asmregparm\">asmregparm</a> struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *", 
" <a class=\"id\" href=\"#rwsem_downgrade_wake\">rwsem_downgrade_wake</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * the semaphore definition</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The bias values and the counter type limits the number of</span>", 
"<span class=\"comment\"> * potential readers/writers to 32767 for 32 bits and 2147483647</span>", 
"<span class=\"comment\"> * for 64 bits.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RWSEM_ACTIVE_MASK\">RWSEM_ACTIVE_MASK</a><span class=\"ts\"/><span class=\"ts\"/>0xffffffffL", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RWSEM_ACTIVE_MASK\">RWSEM_ACTIVE_MASK</a><span class=\"ts\"/><span class=\"ts\"/>0x0000ffffL", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RWSEM_UNLOCKED_VALUE\">RWSEM_UNLOCKED_VALUE</a><span class=\"ts\"/><span class=\"ts\"/>0x00000000L", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RWSEM_ACTIVE_BIAS\">RWSEM_ACTIVE_BIAS</a><span class=\"ts\"/><span class=\"ts\"/>0x00000001L", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RWSEM_WAITING_BIAS\">RWSEM_WAITING_BIAS</a><span class=\"ts\"/><span class=\"ts\"/>(-<a class=\"id\" href=\"#RWSEM_ACTIVE_MASK\">RWSEM_ACTIVE_MASK</a>-1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RWSEM_ACTIVE_READ_BIAS\">RWSEM_ACTIVE_READ_BIAS</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RWSEM_ACTIVE_BIAS\">RWSEM_ACTIVE_BIAS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RWSEM_ACTIVE_WRITE_BIAS\">RWSEM_ACTIVE_WRITE_BIAS</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#RWSEM_WAITING_BIAS\">RWSEM_WAITING_BIAS</a> + <a class=\"id\" href=\"#RWSEM_ACTIVE_BIAS\">RWSEM_ACTIVE_BIAS</a>)", 
"", 
"typedef signed long <a class=\"id\" href=\"#rwsem_count_t\">rwsem_count_t</a>;", 
"", 
"struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwsem_count_t\">rwsem_count_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_lock\">wait_lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#wait_list\">wait_list</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> <a class=\"id\" href=\"#dep_map\">dep_map</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__RWSEM_DEP_MAP_INIT\">__RWSEM_DEP_MAP_INIT</a>(<a class=\"id\" href=\"#lockname\">lockname</a>) , .<a class=\"id\" href=\"#dep_map\">dep_map</a> = { .<a class=\"id\" href=\"#name\">name</a> = #<a class=\"id\" href=\"#lockname\">lockname</a> }", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__RWSEM_DEP_MAP_INIT\">__RWSEM_DEP_MAP_INIT</a>(<a class=\"id\" href=\"#lockname\">lockname</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__RWSEM_INITIALIZER\">__RWSEM_INITIALIZER</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RWSEM_UNLOCKED_VALUE\">RWSEM_UNLOCKED_VALUE</a>, <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>((<a class=\"id\" href=\"#name\">name</a>).<a class=\"id\" href=\"#wait_lock\">wait_lock</a>), \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>((<a class=\"id\" href=\"#name\">name</a>).<a class=\"id\" href=\"#wait_list\">wait_list</a>) <a class=\"id\" href=\"#__RWSEM_DEP_MAP_INIT\">__RWSEM_DEP_MAP_INIT</a>(<a class=\"id\" href=\"#name\">name</a>) \\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_RWSEM\">DECLARE_RWSEM</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> <a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#__RWSEM_INITIALIZER\">__RWSEM_INITIALIZER</a>(<a class=\"id\" href=\"#name\">name</a>)", 
"", 
"extern void <a class=\"id\" href=\"#__init_rwsem\">__init_rwsem</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#init_rwsem\">init_rwsem</a>(<a class=\"id\" href=\"#sem\">sem</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#__key\">__key</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__init_rwsem\">__init_rwsem</a>((<a class=\"id\" href=\"#sem\">sem</a>), #<a class=\"id\" href=\"#sem\">sem</a>, &amp;<a class=\"id\" href=\"#__key\">__key</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lock for reading</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__down_read\">__down_read</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"# beginning down_read\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> <a class=\"id\" href=\"#_ASM_INC\">_ASM_INC</a> \"(%1)\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <span class=\"comment\">/* adds 0x00000001 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"  jns        1f\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"  call call_rwsem_down_read_failed\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1:\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"# ending down_read\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"a\" (<a class=\"id\" href=\"#sem\">sem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"memory\", \"cc\");", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trylock for reading -- returns 1 if successful, 0 if contention</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__down_read_trylock\">__down_read_trylock</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwsem_count_t\">rwsem_count_t</a> <a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"# beginning __down_read_trylock\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"  mov          %0,%1\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1:\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"  mov          %1,%2\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"  add          %3,%2\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"  jle      2f\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"  cmpxchg  %2,%0\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"  jnz      1b\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2:\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"# ending __down_read_trylock\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a>), \"=&a\" (<a class=\"id\" href=\"#result\">result</a>), \"=&r\" (<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"i\" (<a class=\"id\" href=\"#RWSEM_ACTIVE_READ_BIAS\">RWSEM_ACTIVE_READ_BIAS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"memory\", \"cc\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> >= 0 ? 1 : 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lock for writing</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__down_write_nested\">__down_write_nested</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>, int <a class=\"id\" href=\"#subclass\">subclass</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwsem_count_t\">rwsem_count_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"# beginning down_write\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"  xadd      %1,(%2)\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <span class=\"comment\">/* adds 0xffff0001, returns the old value */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"  test      %1,%1\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <span class=\"comment\">/* was the count 0 before? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"  jz        1f\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"  call call_rwsem_down_write_failed\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1:\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"# ending down_write\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a>), \"=d\" (<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"a\" (<a class=\"id\" href=\"#sem\">sem</a>), \"1\" (<a class=\"id\" href=\"#RWSEM_ACTIVE_WRITE_BIAS\">RWSEM_ACTIVE_WRITE_BIAS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"memory\", \"cc\");", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__down_write\">__down_write</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__down_write_nested\">__down_write_nested</a>(<a class=\"id\" href=\"#sem\">sem</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trylock for writing -- returns 1 if successful, 0 if contention</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__down_write_trylock\">__down_write_trylock</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwsem_count_t\">rwsem_count_t</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(&amp;<a class=\"id\" href=\"#sem\">sem</a>-><a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#RWSEM_UNLOCKED_VALUE\">RWSEM_UNLOCKED_VALUE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#RWSEM_ACTIVE_WRITE_BIAS\">RWSEM_ACTIVE_WRITE_BIAS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#RWSEM_UNLOCKED_VALUE\">RWSEM_UNLOCKED_VALUE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * unlock after reading</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__up_read\">__up_read</a>(struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> *<a class=\"id\" href=\"#sem\">sem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwsem_count_t\">rwsem_count_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"# beginning __up_read\\n\\t\"", 
];
xr_frag_insert('l/f7/3794ea8bd1622139f3ceca6a89525b3101fda0.xr', __xr_tmp);
