var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#efi\">efi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * DMI stands for \"Desktop Management Interface\".  It is part</span>", 
"<span class=\"comment\"> * of and an antecedent to, SMBIOS, which stands for System</span>", 
"<span class=\"comment\"> * Management BIOS.  See further: http://www.dmtf.org/standards</span>", 
"<span class=\"comment\"> */</span>", 
"static char <a class=\"id\" href=\"#dmi_empty_string\">dmi_empty_string</a>[] = \"        \";", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Catch too early calls to dmi_check_system():</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dmi_initialized\">dmi_initialized</a>;", 
"", 
"static const char * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_string_nosave\">dmi_string_nosave</a>(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#bp\">bp</a> = ((<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#dm\">dm</a>) + <a class=\"id\" href=\"#dm\">dm</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#s\">s</a> &gt; 0 && *<a class=\"id\" href=\"#bp\">bp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#bp\">bp</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#bp\">bp</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#bp\">bp</a>)+1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cmp_len\">cmp_len</a> = <a class=\"id\" href=\"#len\">len</a> &gt; 8 ? 8 : <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#dmi_empty_string\">dmi_empty_string</a>, <a class=\"id\" href=\"#cmp_len\">cmp_len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dmi_empty_string\">dmi_empty_string</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return \"\";", 
"}", 
"", 
"static char * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_string\">dmi_string</a>(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#dmi_string_nosave\">dmi_string_nosave</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a> == <a class=\"id\" href=\"#dmi_empty_string\">dmi_empty_string</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dmi_empty_string\">dmi_empty_string</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#bp\">bp</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#dmi_alloc\">dmi_alloc</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"dmi_string: cannot allocate %Zu bytes.\\n\", <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#str\">str</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We have to be cautious here. We have seen BIOSes with DMI pointers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pointing to completely the wrong place for example</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dmi_table\">dmi_table</a>(<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#num\">num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#decode\">decode</a>)(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#private_data\">private_data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Stop when we see all the items the table claimed to have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>OR we run off the end of the table (also happens)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>) && (<a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#buf\">buf</a> + sizeof(struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a>)) <= <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *<a class=\"id\" href=\"#dm\">dm</a> = (const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  We want to know the total length (formatted area and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  strings) before decoding to make sure we won't run off the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  table in dmi_decode or dmi_string</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> += <a class=\"id\" href=\"#dm\">dm</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#len\">len</a> - 1) && (<a class=\"id\" href=\"#data\">data</a>[0] || <a class=\"id\" href=\"#data\">data</a>[1]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#len\">len</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#decode\">decode</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#private_data\">private_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#dmi_base\">dmi_base</a>;", 
"static <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#dmi_len\">dmi_len</a>;", 
"static <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#dmi_num\">dmi_num</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_walk_early\">dmi_walk_early</a>(void (*<a class=\"id\" href=\"#decode\">decode</a>)(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>void *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#dmi_ioremap\">dmi_ioremap</a>(<a class=\"id\" href=\"#dmi_base\">dmi_base</a>, <a class=\"id\" href=\"#dmi_len\">dmi_len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_table\">dmi_table</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#dmi_len\">dmi_len</a>, <a class=\"id\" href=\"#dmi_num\">dmi_num</a>, <a class=\"id\" href=\"#decode\">decode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_iounmap\">dmi_iounmap</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#dmi_len\">dmi_len</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_checksum\">dmi_checksum</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sum\">sum</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#a\">a</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#a\">a</a> = 0; <a class=\"id\" href=\"#a\">a</a> &lt; 15; <a class=\"id\" href=\"#a\">a</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> += <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#a\">a</a>];", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sum\">sum</a> == 0;", 
"}", 
"", 
"static char *<a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#DMI_STRING_MAX\">DMI_STRING_MAX</a>];", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#dmi_devices\">dmi_devices</a>);", 
"int <a class=\"id\" href=\"#dmi_available\">dmi_available</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Save a DMI string</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *<a class=\"id\" href=\"#dm\">dm</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#string\">string</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#d\">d</a> = (const char*) <a class=\"id\" href=\"#dm\">dm</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#slot\">slot</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#dmi_string\">dmi_string</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#d\">d</a>[<a class=\"id\" href=\"#string\">string</a>]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#slot\">slot</a>] = <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_save_uuid\">dmi_save_uuid</a>(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *<a class=\"id\" href=\"#dm\">dm</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#d\">d</a> = (<a class=\"id\" href=\"#u8\">u8</a>*) <a class=\"id\" href=\"#dm\">dm</a> + <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_ff\">is_ff</a> = 1, <a class=\"id\" href=\"#is_00\">is_00</a> = 1, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#slot\">slot</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 16 && (<a class=\"id\" href=\"#is_ff\">is_ff</a> || <a class=\"id\" href=\"#is_00\">is_00</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#d\">d</a>[<a class=\"id\" href=\"#i\">i</a>] != 0x00) <a class=\"id\" href=\"#is_ff\">is_ff</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#d\">d</a>[<a class=\"id\" href=\"#i\">i</a>] != 0xFF) <a class=\"id\" href=\"#is_00\">is_00</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_ff\">is_ff</a> || <a class=\"id\" href=\"#is_00\">is_00</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#dmi_alloc\">dmi_alloc</a>(16*2+4+1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%pUB\", <a class=\"id\" href=\"#d\">d</a>);", 
"", 
"        <a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#slot\">slot</a>] = <a class=\"id\" href=\"#s\">s</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_save_type\">dmi_save_type</a>(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *<a class=\"id\" href=\"#dm\">dm</a>, int <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#d\">d</a> = (<a class=\"id\" href=\"#u8\">u8</a>*) <a class=\"id\" href=\"#dm\">dm</a> + <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#slot\">slot</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#dmi_alloc\">dmi_alloc</a>(4);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%u\", *<a class=\"id\" href=\"#d\">d</a> &amp; 0x7F);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#slot\">slot</a>] = <a class=\"id\" href=\"#s\">s</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_save_one_device\">dmi_save_one_device</a>(int <a class=\"id\" href=\"#type\">type</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dmi_device\">dmi_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No duplicate device */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmi_find_device\">dmi_find_device</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dmi_alloc\">dmi_alloc</a>(sizeof(*<a class=\"id\" href=\"#dev\">dev</a>) + <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>) + 1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"dmi_save_one_device: out of memory.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>((char *)(<a class=\"id\" href=\"#dev\">dev</a> + 1), <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a> = (char *)(<a class=\"id\" href=\"#dev\">dev</a> + 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device_data\">device_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#dmi_devices\">dmi_devices</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_save_devices\">dmi_save_devices</a>(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *<a class=\"id\" href=\"#dm\">dm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#count\">count</a> = (<a class=\"id\" href=\"#dm\">dm</a>-><a class=\"id\" href=\"#length\">length</a> - sizeof(struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a>)) / 2;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#d\">d</a> = (char *)(<a class=\"id\" href=\"#dm\">dm</a> + 1) + (<a class=\"id\" href=\"#i\">i</a> * 2);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip disabled device */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#d\">d</a> &amp; 0x80) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_one_device\">dmi_save_one_device</a>(*<a class=\"id\" href=\"#d\">d</a> &amp; 0x7f, <a class=\"id\" href=\"#dmi_string_nosave\">dmi_string_nosave</a>(<a class=\"id\" href=\"#dm\">dm</a>, *(<a class=\"id\" href=\"#d\">d</a> + 1)));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_save_oem_strings_devices\">dmi_save_oem_strings_devices</a>(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *<a class=\"id\" href=\"#dm\">dm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#count\">count</a> = *(<a class=\"id\" href=\"#u8\">u8</a> *)(<a class=\"id\" href=\"#dm\">dm</a> + 1);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dmi_device\">dmi_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#devname\">devname</a> = <a class=\"id\" href=\"#dmi_string\">dmi_string</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#devname\">devname</a> == <a class=\"id\" href=\"#dmi_empty_string\">dmi_empty_string</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dmi_alloc\">dmi_alloc</a>(sizeof(*<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"dmi_save_oem_strings_devices: out of memory.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#DMI_DEV_TYPE_OEM_STRING\">DMI_DEV_TYPE_OEM_STRING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#devname\">devname</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device_data\">device_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#dmi_devices\">dmi_devices</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_save_ipmi_device\">dmi_save_ipmi_device</a>(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *<a class=\"id\" href=\"#dm\">dm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dmi_device\">dmi_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>void * <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#dmi_alloc\">dmi_alloc</a>(<a class=\"id\" href=\"#dm\">dm</a>-><a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"dmi_save_ipmi_device: out of memory.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#dm\">dm</a>-><a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dmi_alloc\">dmi_alloc</a>(sizeof(*<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"dmi_save_ipmi_device: out of memory.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#DMI_DEV_TYPE_IPMI\">DMI_DEV_TYPE_IPMI</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a> = \"IPMI controller\";", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device_data\">device_data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#dmi_devices\">dmi_devices</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_save_dev_onboard\">dmi_save_dev_onboard</a>(int <a class=\"id\" href=\"#instance\">instance</a>, int <a class=\"id\" href=\"#segment\">segment</a>, int <a class=\"id\" href=\"#bus\">bus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#devfn\">devfn</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dmi_dev_onboard\">dmi_dev_onboard</a> *<a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#onboard_dev\">onboard_dev</a> = <a class=\"id\" href=\"#dmi_alloc\">dmi_alloc</a>(sizeof(*<a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>) + <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>) + 1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"dmi_save_dev_onboard: out of memory.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>-><a class=\"id\" href=\"#instance\">instance</a> = <a class=\"id\" href=\"#instance\">instance</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>-><a class=\"id\" href=\"#segment\">segment</a> = <a class=\"id\" href=\"#segment\">segment</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>-><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a> = <a class=\"id\" href=\"#devfn\">devfn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>((char *)&amp;<a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>[1], <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#DMI_DEV_TYPE_DEV_ONBOARD\">DMI_DEV_TYPE_DEV_ONBOARD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#name\">name</a> = (char *)&amp;<a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>[1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#device_data\">device_data</a> = <a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#onboard_dev\">onboard_dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#dmi_devices\">dmi_devices</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_save_extended_devices\">dmi_save_extended_devices</a>(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *<a class=\"id\" href=\"#dm\">dm</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#d\">d</a> = (<a class=\"id\" href=\"#u8\">u8</a>*) <a class=\"id\" href=\"#dm\">dm</a> + 5;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Skip disabled device */</span>", 
"<span class=\"ts\"/>if ((*<a class=\"id\" href=\"#d\">d</a> &amp; 0x80) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_dev_onboard\">dmi_save_dev_onboard</a>(*(<a class=\"id\" href=\"#d\">d</a>+1), *(<a class=\"id\" href=\"#u16\">u16</a> *)(<a class=\"id\" href=\"#d\">d</a>+2), *(<a class=\"id\" href=\"#d\">d</a>+4), *(<a class=\"id\" href=\"#d\">d</a>+5),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#dmi_string_nosave\">dmi_string_nosave</a>(<a class=\"id\" href=\"#dm\">dm</a>, *(<a class=\"id\" href=\"#d\">d</a>-1)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_one_device\">dmi_save_one_device</a>(*<a class=\"id\" href=\"#d\">d</a> &amp; 0x7f, <a class=\"id\" href=\"#dmi_string_nosave\">dmi_string_nosave</a>(<a class=\"id\" href=\"#dm\">dm</a>, *(<a class=\"id\" href=\"#d\">d</a> - 1)));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Process a DMI table entry. Right now all we care about are the BIOS</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and machine entries. For 2.5 we should pull the smbus controller info</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>out of here.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_decode\">dmi_decode</a>(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *<a class=\"id\" href=\"#dm\">dm</a>, void *<a class=\"id\" href=\"#dummy\">dummy</a>)", 
"{", 
"<span class=\"ts\"/>switch(<a class=\"id\" href=\"#dm\">dm</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case 0:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* BIOS Information */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_BIOS_VENDOR\">DMI_BIOS_VENDOR</a>, 4);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_BIOS_VERSION\">DMI_BIOS_VERSION</a>, 5);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_BIOS_DATE\">DMI_BIOS_DATE</a>, 8);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 1:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* System Information */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, 4);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>, 5);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_PRODUCT_VERSION\">DMI_PRODUCT_VERSION</a>, 6);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_PRODUCT_SERIAL\">DMI_PRODUCT_SERIAL</a>, 7);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_uuid\">dmi_save_uuid</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_PRODUCT_UUID\">DMI_PRODUCT_UUID</a>, 8);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Base Board Information */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_BOARD_VENDOR\">DMI_BOARD_VENDOR</a>, 4);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_BOARD_NAME\">DMI_BOARD_NAME</a>, 5);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_BOARD_VERSION\">DMI_BOARD_VERSION</a>, 6);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_BOARD_SERIAL\">DMI_BOARD_SERIAL</a>, 7);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_BOARD_ASSET_TAG\">DMI_BOARD_ASSET_TAG</a>, 8);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 3:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Chassis Information */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_CHASSIS_VENDOR\">DMI_CHASSIS_VENDOR</a>, 4);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_type\">dmi_save_type</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_CHASSIS_TYPE\">DMI_CHASSIS_TYPE</a>, 5);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_CHASSIS_VERSION\">DMI_CHASSIS_VERSION</a>, 6);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_CHASSIS_SERIAL\">DMI_CHASSIS_SERIAL</a>, 7);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ident\">dmi_save_ident</a>(<a class=\"id\" href=\"#dm\">dm</a>, <a class=\"id\" href=\"#DMI_CHASSIS_ASSET_TAG\">DMI_CHASSIS_ASSET_TAG</a>, 8);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 10:<span class=\"ts\"/><span class=\"comment\">/* Onboard Devices Information */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_devices\">dmi_save_devices</a>(<a class=\"id\" href=\"#dm\">dm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 11:<span class=\"ts\"/><span class=\"comment\">/* OEM Strings */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_oem_strings_devices\">dmi_save_oem_strings_devices</a>(<a class=\"id\" href=\"#dm\">dm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 38:<span class=\"ts\"/><span class=\"comment\">/* IPMI Device Information */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_ipmi_device\">dmi_save_ipmi_device</a>(<a class=\"id\" href=\"#dm\">dm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 41:<span class=\"ts\"/><span class=\"comment\">/* Onboard Devices Extended Information */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_save_extended_devices\">dmi_save_extended_devices</a>(<a class=\"id\" href=\"#dm\">dm</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_present\">dmi_present</a>(const char <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#buf\">buf</a>[15];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy_fromio\">memcpy_fromio</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#p\">p</a>, 15);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"_DMI_\", 5) == 0) && <a class=\"id\" href=\"#dmi_checksum\">dmi_checksum</a>(<a class=\"id\" href=\"#buf\">buf</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_num\">dmi_num</a> = (<a class=\"id\" href=\"#buf\">buf</a>[13] << 8) | <a class=\"id\" href=\"#buf\">buf</a>[12];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_len\">dmi_len</a> = (<a class=\"id\" href=\"#buf\">buf</a>[7] << 8) | <a class=\"id\" href=\"#buf\">buf</a>[6];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_base\">dmi_base</a> = (<a class=\"id\" href=\"#buf\">buf</a>[11] << 24) | (<a class=\"id\" href=\"#buf\">buf</a>[10] << 16) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#buf\">buf</a>[9] << 8) | <a class=\"id\" href=\"#buf\">buf</a>[8];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * DMI version 0.0 means that the real version is taken from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the SMBIOS version, which we don't know at this point.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>[14] != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"DMI %d.%d present.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#buf\">buf</a>[14] >> 4, <a class=\"id\" href=\"#buf\">buf</a>[14] &amp; 0xF);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"DMI present.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dmi_walk_early\">dmi_walk_early</a>(<a class=\"id\" href=\"#dmi_decode\">dmi_decode</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dmi_scan_machine\">dmi_scan_machine</a>(void)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#efi_enabled\">efi_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#efi\">efi</a>.<a class=\"id\" href=\"#smbios\">smbios</a> == <a class=\"id\" href=\"#EFI_INVALID_TABLE_ADDR\">EFI_INVALID_TABLE_ADDR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is called as a core_initcall() because it isn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * needed during early boot.  This also means we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * iounmap the space when we're done with it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#dmi_ioremap\">dmi_ioremap</a>(<a class=\"id\" href=\"#efi\">efi</a>.<a class=\"id\" href=\"#smbios\">smbios</a>, 32);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#dmi_present\">dmi_present</a>(<a class=\"id\" href=\"#p\">p</a> + 0x10); <span class=\"comment\">/* offset of _DMI_ string */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_iounmap\">dmi_iounmap</a>(<a class=\"id\" href=\"#p\">p</a>, 32);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_available\">dmi_available</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no iounmap() for that ioremap(); it would be a no-op, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it's so early in setup that sucker gets confused into doing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * what it shouldn't if we actually call it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#dmi_ioremap\">dmi_ioremap</a>(0xF0000, 0x10000);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#q\">q</a> &lt; <a class=\"id\" href=\"#p\">p</a> + 0x10000; <a class=\"id\" href=\"#q\">q</a> += 16) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#dmi_present\">dmi_present</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_available\">dmi_available</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_iounmap\">dmi_iounmap</a>(<a class=\"id\" href=\"#p\">p</a>, 0x10000);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dmi_iounmap\">dmi_iounmap</a>(<a class=\"id\" href=\"#p\">p</a>, 0x10000);", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"DMI not present or invalid.\\n\");", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_initialized\">dmi_initialized</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dmi_matches - check if dmi_system_id structure matches system DMI data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dmi: pointer to the dmi_system_id structure to check</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dmi_matches\">dmi_matches</a>(const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#dmi\">dmi</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(!<a class=\"id\" href=\"#dmi_initialized\">dmi_initialized</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"dmi check: not initialized yet.\\n\");", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#dmi\">dmi</a>-><a class=\"id\" href=\"#matches\">matches</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#dmi\">dmi</a>-><a class=\"id\" href=\"#matches\">matches</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> == <a class=\"id\" href=\"#DMI_NONE\">DMI_NONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#s\">s</a>]", 
"<span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#s\">s</a>], <a class=\"id\" href=\"#dmi\">dmi</a>-><a class=\"id\" href=\"#matches\">matches</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#substr\">substr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No match */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dmi_is_end_of_table - check for end-of-table marker</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dmi: pointer to the dmi_system_id structure to check</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dmi_is_end_of_table\">dmi_is_end_of_table</a>(const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#dmi\">dmi</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dmi\">dmi</a>-><a class=\"id\" href=\"#matches\">matches</a>[0].<a class=\"id\" href=\"#slot\">slot</a> == <a class=\"id\" href=\"#DMI_NONE\">DMI_NONE</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dmi_check_system - check system DMI data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: array of dmi_system_id structures to match against</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>All non-null elements of the list must match</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>their slot's (field index's) data (i.e., each</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>list string must be a substring of the specified</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>DMI slot's string data) to be considered a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>successful match.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Walk the blacklist table running matching functions until someone</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns non zero or we hit the end. Callback function is called for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>each successful match. Returns the number of matches.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dmi_check_system\">dmi_check_system</a>(const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#d\">d</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#list\">list</a>; !<a class=\"id\" href=\"#dmi_is_end_of_table\">dmi_is_end_of_table</a>(<a class=\"id\" href=\"#d\">d</a>); <a class=\"id\" href=\"#d\">d</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dmi_matches\">dmi_matches</a>(<a class=\"id\" href=\"#d\">d</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#callback\">callback</a> && <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#callback\">callback</a>(<a class=\"id\" href=\"#d\">d</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dmi_check_system\">dmi_check_system</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dmi_first_match - find dmi_system_id structure matching system DMI data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: array of dmi_system_id structures to match against</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>All non-null elements of the list must match</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>their slot's (field index's) data (i.e., each</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>list string must be a substring of the specified</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>DMI slot's string data) to be considered a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>successful match.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Walk the blacklist table until the first match is found.  Return the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pointer to the matching entry or NULL if there's no match.</span>", 
"<span class=\"comment\"> */</span>", 
"const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#dmi_first_match\">dmi_first_match</a>(const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#d\">d</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#list\">list</a>; !<a class=\"id\" href=\"#dmi_is_end_of_table\">dmi_is_end_of_table</a>(<a class=\"id\" href=\"#d\">d</a>); <a class=\"id\" href=\"#d\">d</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dmi_matches\">dmi_matches</a>(<a class=\"id\" href=\"#d\">d</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dmi_first_match\">dmi_first_match</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dmi_get_system_info - return DMI data value</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@field: data index (see enum dmi_field)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns one DMI data value, can be used to perform</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>complex DMI data checks.</span>", 
"<span class=\"comment\"> */</span>", 
"const char *<a class=\"id\" href=\"#dmi_get_system_info\">dmi_get_system_info</a>(int <a class=\"id\" href=\"#field\">field</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#field\">field</a>];", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dmi_get_system_info\">dmi_get_system_info</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dmi_name_in_serial - Check if string is in the DMI product serial information</span>", 
"<span class=\"comment\"> * @str: string to check for</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dmi_name_in_serial\">dmi_name_in_serial</a>(const char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#DMI_PRODUCT_SERIAL\">DMI_PRODUCT_SERIAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#f\">f</a>] && <a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#f\">f</a>], <a class=\"id\" href=\"#str\">str</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dmi_name_in_vendors - Check if string is anywhere in the DMI vendor information.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@str: <span class=\"ts\"/>Case sensitive Name</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dmi_name_in_vendors\">dmi_name_in_vendors</a>(const char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#fields\">fields</a>[] = { <a class=\"id\" href=\"#DMI_BIOS_VENDOR\">DMI_BIOS_VENDOR</a>, <a class=\"id\" href=\"#DMI_BIOS_VERSION\">DMI_BIOS_VERSION</a>, <a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>, <a class=\"id\" href=\"#DMI_PRODUCT_VERSION\">DMI_PRODUCT_VERSION</a>, <a class=\"id\" href=\"#DMI_BOARD_VENDOR\">DMI_BOARD_VENDOR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_BOARD_NAME\">DMI_BOARD_NAME</a>, <a class=\"id\" href=\"#DMI_BOARD_VERSION\">DMI_BOARD_VERSION</a>, <a class=\"id\" href=\"#DMI_NONE\">DMI_NONE</a> };", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#fields\">fields</a>[<a class=\"id\" href=\"#i\">i</a>] != <a class=\"id\" href=\"#DMI_NONE\">DMI_NONE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#fields\">fields</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#f\">f</a>] && <a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#dmi_ident\">dmi_ident</a>[<a class=\"id\" href=\"#f\">f</a>], <a class=\"id\" href=\"#str\">str</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dmi_name_in_vendors\">dmi_name_in_vendors</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dmi_find_device - find onboard device by type/name</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@type: device type or %DMI_DEV_TYPE_ANY to match all device types</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name: device name string or %NULL to match all</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@from: previous device found in search, or %NULL for new search.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Iterates through the list of known onboard devices. If a device is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>found with a matching @vendor and @device, a pointer to its device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>structure is returned.  Otherwise, %NULL is returned.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A new search is initiated by passing %NULL as the @from argument.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If @from is not %NULL, searches continue from next device.</span>", 
"<span class=\"comment\"> */</span>", 
"const struct <a class=\"id\" href=\"#dmi_device\">dmi_device</a> * <a class=\"id\" href=\"#dmi_find_device\">dmi_find_device</a>(int <a class=\"id\" href=\"#type\">type</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#dmi_device\">dmi_device</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#from\">from</a> ? &amp;<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#list\">list</a> : &amp;<a class=\"id\" href=\"#dmi_devices\">dmi_devices</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#d\">d</a>;", 
"", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#d\">d</a> != &amp;<a class=\"id\" href=\"#dmi_devices\">dmi_devices</a>; <a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#dmi_device\">dmi_device</a> *<a class=\"id\" href=\"#dev\">dev</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#d\">d</a>, struct <a class=\"id\" href=\"#dmi_device\">dmi_device</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (((<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#DMI_DEV_TYPE_ANY\">DMI_DEV_TYPE_ANY</a>) || (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#type\">type</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#name\">name</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) || (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>) == 0)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dmi_find_device\">dmi_find_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dmi_get_date - parse a DMI date</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@field:<span class=\"ts\"/>data index (see enum dmi_field)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@yearp: optional out parameter for the year</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@monthp: optional out parameter for the month</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dayp: optional out parameter for the day</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The date field is assumed to be in the form resembling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>[mm[/dd]]/yy[yy] and the result is stored in the out</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>parameters any or all of which can be omitted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the field doesn't exist, all out parameters are set to zero</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and false is returned.  Otherwise, true is returned with any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>invalid part of date set to zero.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On return, year, month and day are guaranteed to be in the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>range of [0,9999], [0,12] and [0,31] respectively.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dmi_get_date\">dmi_get_date</a>(int <a class=\"id\" href=\"#field\">field</a>, int *<a class=\"id\" href=\"#yearp\">yearp</a>, int *<a class=\"id\" href=\"#monthp\">monthp</a>, int *<a class=\"id\" href=\"#dayp\">dayp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#year\">year</a> = 0, <a class=\"id\" href=\"#month\">month</a> = 0, <a class=\"id\" href=\"#day\">day</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#exists\">exists</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#s\">s</a>, *<a class=\"id\" href=\"#y\">y</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#e\">e</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#dmi_get_system_info\">dmi_get_system_info</a>(<a class=\"id\" href=\"#field\">field</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exists\">exists</a> = <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#exists\">exists</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Determine year first.  We assume the date string resembles</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mm/dd/yy[yy] but the original code extracted only the year</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from the end.  Keep the behavior in the spirit of no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * surprises.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#y\">y</a> = <a class=\"id\" href=\"#strrchr\">strrchr</a>(<a class=\"id\" href=\"#s\">s</a>, '/');", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#y\">y</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#y\">y</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#year\">year</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#y\">y</a>, &amp;<a class=\"id\" href=\"#e\">e</a>, 10);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#y\">y</a> != <a class=\"id\" href=\"#e\">e</a> && <a class=\"id\" href=\"#year\">year</a> &lt; 100) {<span class=\"ts\"/><span class=\"comment\">/* 2-digit year */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#year\">year</a> += 1900;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#year\">year</a> &lt; 1996)<span class=\"ts\"/><span class=\"comment\">/* no dates &lt; spec 1.0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#year\">year</a> += 100;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#year\">year</a> &gt; 9999)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* year should fit in %04d */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#year\">year</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* parse the mm and dd */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#month\">month</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#s\">s</a>, &amp;<a class=\"id\" href=\"#e\">e</a>, 10);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> == <a class=\"id\" href=\"#e\">e</a> || *<a class=\"id\" href=\"#e\">e</a> != '/' || !<a class=\"id\" href=\"#month\">month</a> || <a class=\"id\" href=\"#month\">month</a> &gt; 12) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#month\">month</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#e\">e</a> + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#day\">day</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#s\">s</a>, &amp;<a class=\"id\" href=\"#e\">e</a>, 10);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> == <a class=\"id\" href=\"#y\">y</a> || <a class=\"id\" href=\"#s\">s</a> == <a class=\"id\" href=\"#e\">e</a> || *<a class=\"id\" href=\"#e\">e</a> != '/' || <a class=\"id\" href=\"#day\">day</a> &gt; 31)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#day\">day</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#yearp\">yearp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#yearp\">yearp</a> = <a class=\"id\" href=\"#year\">year</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#monthp\">monthp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#monthp\">monthp</a> = <a class=\"id\" href=\"#month\">month</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dayp\">dayp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dayp\">dayp</a> = <a class=\"id\" href=\"#day\">day</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#exists\">exists</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dmi_get_date\">dmi_get_date</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dmi_walk - Walk the DMI table and get called back for every record</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@decode: Callback function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@private_data: Private data to be passed to the callback function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns -1 when the DMI table can't be reached, 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dmi_walk\">dmi_walk</a>(void (*<a class=\"id\" href=\"#decode\">decode</a>)(const struct <a class=\"id\" href=\"#dmi_header\">dmi_header</a> *, void *),", 
"<span class=\"ts\"/>     void *<a class=\"id\" href=\"#private_data\">private_data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dmi_available\">dmi_available</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#ioremap\">ioremap</a>(<a class=\"id\" href=\"#dmi_base\">dmi_base</a>, <a class=\"id\" href=\"#dmi_len\">dmi_len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_table\">dmi_table</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#dmi_len\">dmi_len</a>, <a class=\"id\" href=\"#dmi_num\">dmi_num</a>, <a class=\"id\" href=\"#decode\">decode</a>, <a class=\"id\" href=\"#private_data\">private_data</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dmi_walk\">dmi_walk</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dmi_match - compare a string to the dmi field (if exists)</span>", 
"<span class=\"comment\"> * @f: DMI field identifier</span>", 
"<span class=\"comment\"> * @str: string to compare the DMI field to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the requested field equals to the str (including NULL).</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dmi_match\">dmi_match</a>(enum <a class=\"id\" href=\"#dmi_field\">dmi_field</a> <a class=\"id\" href=\"#f\">f</a>, const char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#dmi_get_system_info\">dmi_get_system_info</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#str\">str</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#info\">info</a> == <a class=\"id\" href=\"#str\">str</a>;", 
"", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#str\">str</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dmi_match\">dmi_match</a>);", 
];
xr_frag_insert('l/f7/8d461232c514491c27649b350050abe15a84a2.xr', __xr_tmp);
