var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright(c) 2004 - 2006 Intel Corporation. All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify it</span>", 
"<span class=\"comment\"> * under the terms of the GNU General Public License as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation; either version 2 of the License, or (at your option)</span>", 
"<span class=\"comment\"> * any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but WITHOUT</span>", 
"<span class=\"comment\"> * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span>", 
"<span class=\"comment\"> * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for</span>", 
"<span class=\"comment\"> * more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License along with</span>", 
"<span class=\"comment\"> * this program; if not, write to the Free Software Foundation, Inc., 59</span>", 
"<span class=\"comment\"> * Temple Place - Suite 330, Boston, MA  02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The full GNU General Public License is included in this distribution in the</span>", 
"<span class=\"comment\"> * file called COPYING.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#DMAENGINE_H\">DMAENGINE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMAENGINE_H\">DMAENGINE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uio\">uio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dma\">dma</a>-<a class=\"id\" href=\"#mapping\">mapping</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * typedef dma_cookie_t - an opaque DMA cookie</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * if dma_cookie_t is &gt;0 it's a DMA request cookie, &lt;0 it's an error code</span>", 
"<span class=\"comment\"> */</span>", 
"typedef <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_MIN_COOKIE\">DMA_MIN_COOKIE</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_MAX_COOKIE\">DMA_MAX_COOKIE</a><span class=\"ts\"/><a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dma_submit_error\">dma_submit_error</a>(<a class=\"id\" href=\"#cookie\">cookie</a>) ((<a class=\"id\" href=\"#cookie\">cookie</a>) &lt; 0 ? 1 : 0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum dma_status - DMA transaction status</span>", 
"<span class=\"comment\"> * @DMA_SUCCESS: transaction completed successfully</span>", 
"<span class=\"comment\"> * @DMA_IN_PROGRESS: transaction not yet processed</span>", 
"<span class=\"comment\"> * @DMA_PAUSED: transaction is paused</span>", 
"<span class=\"comment\"> * @DMA_ERROR: transaction failed</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#dma_status\">dma_status</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_SUCCESS\">DMA_SUCCESS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_IN_PROGRESS\">DMA_IN_PROGRESS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_PAUSED\">DMA_PAUSED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_ERROR\">DMA_ERROR</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum dma_transaction_type - DMA transaction types/indexes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: The DMA_ASYNC_TX capability is not to be set by drivers.  It is</span>", 
"<span class=\"comment\"> * automatically set as dma devices are registered.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#dma_transaction_type\">dma_transaction_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_MEMCPY\">DMA_MEMCPY</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_XOR\">DMA_XOR</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_PQ\">DMA_PQ</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_XOR_VAL\">DMA_XOR_VAL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_PQ_VAL\">DMA_PQ_VAL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_MEMSET\">DMA_MEMSET</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_INTERRUPT\">DMA_INTERRUPT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_ASYNC_TX\">DMA_ASYNC_TX</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_SLAVE\">DMA_SLAVE</a>,", 
"};", 
"", 
"<span class=\"comment\">/* last transaction type for creation of the capabilities mask */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_TX_TYPE_END\">DMA_TX_TYPE_END</a> (<a class=\"id\" href=\"#DMA_SLAVE\">DMA_SLAVE</a> + 1)", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum dma_ctrl_flags - DMA flags to augment operation preparation,</span>", 
"<span class=\"comment\"> *  control completion, and communicate status.</span>", 
"<span class=\"comment\"> * @DMA_PREP_INTERRUPT - trigger an interrupt (callback) upon completion of</span>", 
"<span class=\"comment\"> *  this transaction</span>", 
"<span class=\"comment\"> * @DMA_CTRL_ACK - if clear, the descriptor cannot be reused until the client</span>", 
"<span class=\"comment\"> *  acknowledges receipt, i.e. has has a chance to establish any dependency</span>", 
"<span class=\"comment\"> *  chains</span>", 
"<span class=\"comment\"> * @DMA_COMPL_SKIP_SRC_UNMAP - set to disable dma-unmapping the source buffer(s)</span>", 
"<span class=\"comment\"> * @DMA_COMPL_SKIP_DEST_UNMAP - set to disable dma-unmapping the destination(s)</span>", 
"<span class=\"comment\"> * @DMA_COMPL_SRC_UNMAP_SINGLE - set to do the source dma-unmapping as single</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>(if not set, do the source dma-unmapping as page)</span>", 
"<span class=\"comment\"> * @DMA_COMPL_DEST_UNMAP_SINGLE - set to do the destination dma-unmapping as single</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>(if not set, do the destination dma-unmapping as page)</span>", 
"<span class=\"comment\"> * @DMA_PREP_PQ_DISABLE_P - prevent generation of P while generating Q</span>", 
"<span class=\"comment\"> * @DMA_PREP_PQ_DISABLE_Q - prevent generation of Q while generating P</span>", 
];
xr_frag_insert('l/f7/950d40df5e0e854d998babfbe2980695732d0e.xr', __xr_tmp);
