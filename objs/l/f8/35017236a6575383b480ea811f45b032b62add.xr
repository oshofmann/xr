var __xr_tmp = [
"<span class=\"comment\"> * entry with one pathname and three numbers operation.</span>", 
"<span class=\"comment\"> * It has following fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (1) \"head\" which is a \"struct tomoyo_acl_info\".</span>", 
"<span class=\"comment\"> *  (2) \"perm\" which is a bitmask of permitted operations.</span>", 
"<span class=\"comment\"> *  (3) \"mode\" is the create mode.</span>", 
"<span class=\"comment\"> *  (4) \"major\" is the major number of device node.</span>", 
"<span class=\"comment\"> *  (5) \"minor\" is the minor number of device node.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Directives held by this structure are \"allow_mkchar\", \"allow_mkblock\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_mkdev_acl\">tomoyo_mkdev_acl</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_acl_info\">tomoyo_acl_info</a> <a class=\"id\" href=\"#head\">head</a>; <span class=\"comment\">/* type = TOMOYO_TYPE_MKDEV_ACL */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_name_union\">tomoyo_name_union</a> <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_number_union\">tomoyo_number_union</a> <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_number_union\">tomoyo_number_union</a> <a class=\"id\" href=\"#major\">major</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_number_union\">tomoyo_number_union</a> <a class=\"id\" href=\"#minor\">minor</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tomoyo_path2_acl is a structure which is used for holding an</span>", 
"<span class=\"comment\"> * entry with two pathnames operation (i.e. link(), rename() and pivot_root()).</span>", 
"<span class=\"comment\"> * It has following fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (1) \"head\" which is a \"struct tomoyo_acl_info\".</span>", 
"<span class=\"comment\"> *  (2) \"perm\" which is a bitmask of permitted operations.</span>", 
"<span class=\"comment\"> *  (3) \"name1\" is the source/old pathname.</span>", 
"<span class=\"comment\"> *  (4) \"name2\" is the destination/new pathname.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Directives held by this structure are \"allow_rename\", \"allow_link\" and</span>", 
"<span class=\"comment\"> * \"allow_pivot_root\".</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_path2_acl\">tomoyo_path2_acl</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_acl_info\">tomoyo_acl_info</a> <a class=\"id\" href=\"#head\">head</a>; <span class=\"comment\">/* type = TOMOYO_TYPE_PATH2_ACL */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_name_union\">tomoyo_name_union</a> <a class=\"id\" href=\"#name1\">name1</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_name_union\">tomoyo_name_union</a> <a class=\"id\" href=\"#name2\">name2</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tomoyo_mount_acl is a structure which is used for holding an</span>", 
"<span class=\"comment\"> * entry for mount operation.</span>", 
"<span class=\"comment\"> * It has following fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (1) \"head\" which is a \"struct tomoyo_acl_info\".</span>", 
"<span class=\"comment\"> *  (2) \"dev_name\" is the device name.</span>", 
"<span class=\"comment\"> *  (3) \"dir_name\" is the mount point.</span>", 
"<span class=\"comment\"> *  (4) \"fs_type\" is the filesystem type.</span>", 
"<span class=\"comment\"> *  (5) \"flags\" is the mount flags.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Directive held by this structure is \"allow_mount\".</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_mount_acl\">tomoyo_mount_acl</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_acl_info\">tomoyo_acl_info</a> <a class=\"id\" href=\"#head\">head</a>; <span class=\"comment\">/* type = TOMOYO_TYPE_MOUNT_ACL */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_name_union\">tomoyo_name_union</a> <a class=\"id\" href=\"#dev_name\">dev_name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_name_union\">tomoyo_name_union</a> <a class=\"id\" href=\"#dir_name\">dir_name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_name_union\">tomoyo_name_union</a> <a class=\"id\" href=\"#fs_type\">fs_type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_number_union\">tomoyo_number_union</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TOMOYO_MAX_IO_READ_QUEUE\">TOMOYO_MAX_IO_READ_QUEUE</a> 32", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Structure for reading/writing policy via /sys/kernel/security/tomoyo</span>", 
"<span class=\"comment\"> * interfaces.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_io_buffer\">tomoyo_io_buffer</a> {", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#read\">read</a>) (struct <a class=\"id\" href=\"#tomoyo_io_buffer\">tomoyo_io_buffer</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#write\">write</a>) (struct <a class=\"id\" href=\"#tomoyo_io_buffer\">tomoyo_io_buffer</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#poll\">poll</a>) (struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Exclusive lock for this structure.   */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#io_sem\">io_sem</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Index returned by tomoyo_read_lock(). */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#reader_idx\">reader_idx</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#read_user_buf\">read_user_buf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#read_user_buf_avail\">read_user_buf_avail</a>;", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#domain\">domain</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#acl\">acl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#avail\">avail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#step\">step</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#query_index\">query_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#w_pos\">w_pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#eof\">eof</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#print_this_domain_only\">print_this_domain_only</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#print_execute_only\">print_execute_only</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#w\">w</a>[<a class=\"id\" href=\"#TOMOYO_MAX_IO_READ_QUEUE\">TOMOYO_MAX_IO_READ_QUEUE</a>];", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* The position currently writing to.   */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#write_var1\">write_var1</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Buffer for reading.                  */</span>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#read_buf\">read_buf</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Size of read buffer.                 */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#readbuf_size\">readbuf_size</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Buffer for writing.                  */</span>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#write_buf\">write_buf</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Bytes available for writing.         */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#write_avail\">write_avail</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Size of write buffer.                */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#writebuf_size\">writebuf_size</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Type of this interface.              */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tomoyo_readable_file is a structure which is used for holding</span>", 
"<span class=\"comment\"> * \"allow_read\" entries.</span>", 
"<span class=\"comment\"> * It has following fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (1) \"head\" is \"struct tomoyo_acl_head\".</span>", 
"<span class=\"comment\"> *  (2) \"filename\" is a pathname which is allowed to open(O_RDONLY).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_readable_file\">tomoyo_readable_file</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a> <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#filename\">filename</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tomoyo_no_pattern is a structure which is used for holding</span>", 
"<span class=\"comment\"> * \"file_pattern\" entries.</span>", 
"<span class=\"comment\"> * It has following fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (1) \"head\" is \"struct tomoyo_acl_head\".</span>", 
"<span class=\"comment\"> *  (2) \"pattern\" is a pathname pattern which is used for converting pathnames</span>", 
"<span class=\"comment\"> *      to pathname patterns during learning mode.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_no_pattern\">tomoyo_no_pattern</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a> <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#pattern\">pattern</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tomoyo_no_rewrite is a structure which is used for holding</span>", 
"<span class=\"comment\"> * \"deny_rewrite\" entries.</span>", 
"<span class=\"comment\"> * It has following fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (1) \"head\" is \"struct tomoyo_acl_head\".</span>", 
"<span class=\"comment\"> *  (2) \"pattern\" is a pathname which is by default not permitted to modify</span>", 
"<span class=\"comment\"> *      already existing content.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_no_rewrite\">tomoyo_no_rewrite</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a> <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#pattern\">pattern</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tomoyo_transition_control is a structure which is used for holding</span>", 
"<span class=\"comment\"> * \"initialize_domain\"/\"no_initialize_domain\"/\"keep_domain\"/\"no_keep_domain\"</span>", 
"<span class=\"comment\"> * entries.</span>", 
"<span class=\"comment\"> * It has following fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (1) \"head\" is \"struct tomoyo_acl_head\".</span>", 
"<span class=\"comment\"> *  (2) \"type\" is type of this entry.</span>", 
"<span class=\"comment\"> *  (3) \"is_last_name\" is a bool which is true if \"domainname\" is \"the last</span>", 
"<span class=\"comment\"> *      component of a domainname\", false otherwise.</span>", 
"<span class=\"comment\"> *  (4) \"domainname\" which is \"a domainname\" or \"the last component of a</span>", 
"<span class=\"comment\"> *      domainname\".</span>", 
"<span class=\"comment\"> *  (5) \"program\" which is a program's pathname.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_transition_control\">tomoyo_transition_control</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a> <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>; <span class=\"comment\">/* One of values in \"enum tomoyo_transition_type\".  */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* True if the domainname is tomoyo_get_last_name(). */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_last_name\">is_last_name</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#domainname\">domainname</a>; <span class=\"comment\">/* Maybe NULL */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#program\">program</a>;    <span class=\"comment\">/* Maybe NULL */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tomoyo_aggregator is a structure which is used for holding</span>", 
"<span class=\"comment\"> * \"aggregator\" entries.</span>", 
"<span class=\"comment\"> * It has following fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (1) \"head\" is \"struct tomoyo_acl_head\".</span>", 
"<span class=\"comment\"> *  (2) \"original_name\" which is originally requested name.</span>", 
"<span class=\"comment\"> *  (3) \"aggregated_name\" which is name to rewrite.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_aggregator\">tomoyo_aggregator</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a> <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#original_name\">original_name</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#aggregated_name\">aggregated_name</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tomoyo_manager is a structure which is used for holding list of</span>", 
"<span class=\"comment\"> * domainnames or programs which are permitted to modify configuration via</span>", 
"<span class=\"comment\"> * /sys/kernel/security/tomoyo/ interface.</span>", 
"<span class=\"comment\"> * It has following fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (1) \"head\" is \"struct tomoyo_acl_head\".</span>", 
"<span class=\"comment\"> *  (2) \"is_domain\" is a bool which is true if \"manager\" is a domainname, false</span>", 
"<span class=\"comment\"> *      otherwise.</span>", 
"<span class=\"comment\"> *  (3) \"manager\" is a domainname or a program's pathname.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_manager\">tomoyo_manager</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a> <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_domain\">is_domain</a>;  <span class=\"comment\">/* True if manager is a domainname. */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* A path to program or a domainname. */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#manager\">manager</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#tomoyo_preference\">tomoyo_preference</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#learning_max_entry\">learning_max_entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#enforcing_verbose\">enforcing_verbose</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#learning_verbose\">learning_verbose</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#permissive_verbose\">permissive_verbose</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#tomoyo_profile\">tomoyo_profile</a> {", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#comment\">comment</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_preference\">tomoyo_preference</a> *<a class=\"id\" href=\"#learning\">learning</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_preference\">tomoyo_preference</a> *<a class=\"id\" href=\"#permissive\">permissive</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_preference\">tomoyo_preference</a> *<a class=\"id\" href=\"#enforcing\">enforcing</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_preference\">tomoyo_preference</a> <a class=\"id\" href=\"#preference\">preference</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#default_config\">default_config</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#config\">config</a>[<a class=\"id\" href=\"#TOMOYO_MAX_MAC_INDEX\">TOMOYO_MAX_MAC_INDEX</a> + <a class=\"id\" href=\"#TOMOYO_MAX_MAC_CATEGORY_INDEX\">TOMOYO_MAX_MAC_CATEGORY_INDEX</a>];", 
"};", 
"", 
"<span class=\"comment\">/********** Function prototypes. **********/</span>", 
"", 
"<span class=\"comment\">/* Check whether the given string starts with the given keyword. */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_str_starts\">tomoyo_str_starts</a>(char **<a class=\"id\" href=\"#src\">src</a>, const char *<a class=\"id\" href=\"#find\">find</a>);", 
"<span class=\"comment\">/* Get tomoyo_realpath() of current process. */</span>", 
"const char *<a class=\"id\" href=\"#tomoyo_get_exe\">tomoyo_get_exe</a>(void);", 
"<span class=\"comment\">/* Format string. */</span>", 
"void <a class=\"id\" href=\"#tomoyo_normalize_line\">tomoyo_normalize_line</a>(unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"comment\">/* Print warning or error message on console. */</span>", 
"void <a class=\"id\" href=\"#tomoyo_warn_log\">tomoyo_warn_log</a>(struct <a class=\"id\" href=\"#tomoyo_request_info\">tomoyo_request_info</a> *<a class=\"id\" href=\"#r\">r</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"     <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a>(<a class=\"id\" href=\"#printf\">printf</a>, 2, 3)));", 
"<span class=\"comment\">/* Check all profiles currently assigned to domains are defined. */</span>", 
"void <a class=\"id\" href=\"#tomoyo_check_profile\">tomoyo_check_profile</a>(void);", 
"<span class=\"comment\">/* Open operation for /sys/kernel/security/tomoyo/ interface. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_open_control\">tomoyo_open_control</a>(const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"comment\">/* Close /sys/kernel/security/tomoyo/ interface. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_close_control\">tomoyo_close_control</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"comment\">/* Poll operation for /sys/kernel/security/tomoyo/ interface. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_poll_control\">tomoyo_poll_control</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"comment\">/* Read operation for /sys/kernel/security/tomoyo/ interface. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_read_control\">tomoyo_read_control</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const int <a class=\"id\" href=\"#buffer_len\">buffer_len</a>);", 
"<span class=\"comment\">/* Write operation for /sys/kernel/security/tomoyo/ interface. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_write_control\">tomoyo_write_control</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const int <a class=\"id\" href=\"#buffer_len\">buffer_len</a>);", 
"<span class=\"comment\">/* Check whether the domain has too many ACL entries to hold. */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_domain_quota_is_ok\">tomoyo_domain_quota_is_ok</a>(struct <a class=\"id\" href=\"#tomoyo_request_info\">tomoyo_request_info</a> *<a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"comment\">/* Print out of memory warning message. */</span>", 
"void <a class=\"id\" href=\"#tomoyo_warn_oom\">tomoyo_warn_oom</a>(const char *<a class=\"id\" href=\"#function\">function</a>);", 
"<span class=\"comment\">/* Check whether the given name matches the given name_union. */</span>", 
"const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *", 
"<a class=\"id\" href=\"#tomoyo_compare_name_union\">tomoyo_compare_name_union</a>(const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#tomoyo_name_union\">tomoyo_name_union</a> *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"comment\">/* Check whether the given number matches the given number_union. */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_compare_number_union\">tomoyo_compare_number_union</a>(const unsigned long <a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#tomoyo_number_union\">tomoyo_number_union</a> *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"int <a class=\"id\" href=\"#tomoyo_get_mode\">tomoyo_get_mode</a>(const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#profile\">profile</a>, const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#index\">index</a>);", 
"void <a class=\"id\" href=\"#tomoyo_io_printf\">tomoyo_io_printf</a>(struct <a class=\"id\" href=\"#tomoyo_io_buffer\">tomoyo_io_buffer</a> *<a class=\"id\" href=\"#head\">head</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a>(<a class=\"id\" href=\"#printf\">printf</a>, 2, 3)));", 
"<span class=\"comment\">/* Check whether the domainname is correct. */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_correct_domain\">tomoyo_correct_domain</a>(const unsigned char *<a class=\"id\" href=\"#domainname\">domainname</a>);", 
"<span class=\"comment\">/* Check whether the token is correct. */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_correct_path\">tomoyo_correct_path</a>(const char *<a class=\"id\" href=\"#filename\">filename</a>);", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_correct_word\">tomoyo_correct_word</a>(const char *<a class=\"id\" href=\"#string\">string</a>);", 
"<span class=\"comment\">/* Check whether the token can be a domainname. */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_domain_def\">tomoyo_domain_def</a>(const unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_parse_name_union\">tomoyo_parse_name_union</a>(const char *<a class=\"id\" href=\"#filename\">filename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#tomoyo_name_union\">tomoyo_name_union</a> *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"comment\">/* Check whether the given filename matches the given path_group. */</span>", 
"const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *", 
"<a class=\"id\" href=\"#tomoyo_path_matches_group\">tomoyo_path_matches_group</a>(const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#tomoyo_group\">tomoyo_group</a> *<a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"comment\">/* Check whether the given value matches the given number_group. */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_number_matches_group\">tomoyo_number_matches_group</a>(const unsigned long <a class=\"id\" href=\"#min\">min</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const unsigned long <a class=\"id\" href=\"#max\">max</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#tomoyo_group\">tomoyo_group</a> *<a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"comment\">/* Check whether the given filename matches the given pattern. */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_path_matches_pattern\">tomoyo_path_matches_pattern</a>(const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#filename\">filename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#pattern\">pattern</a>);", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_parse_number_union\">tomoyo_parse_number_union</a>(char *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#tomoyo_number_union\">tomoyo_number_union</a> *<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"comment\">/* Tokenize a line. */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_tokenize\">tomoyo_tokenize</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, char *<a class=\"id\" href=\"#w\">w</a>[], <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"comment\">/* Write domain policy violation warning message to console? */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_verbose_mode\">tomoyo_verbose_mode</a>(const struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#domain\">domain</a>);", 
"<span class=\"comment\">/* Fill \"struct tomoyo_request_info\". */</span>", 
"int <a class=\"id\" href=\"#tomoyo_init_request_info\">tomoyo_init_request_info</a>(struct <a class=\"id\" href=\"#tomoyo_request_info\">tomoyo_request_info</a> *<a class=\"id\" href=\"#r\">r</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#domain\">domain</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"comment\">/* Check permission for mount operation. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_mount_permission\">tomoyo_mount_permission</a>(char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, char *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data_page\">data_page</a>);", 
"<span class=\"comment\">/* Create \"aggregator\" entry in exception policy. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_write_aggregator\">tomoyo_write_aggregator</a>(char *<a class=\"id\" href=\"#data\">data</a>, const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_delete\">is_delete</a>);", 
"int <a class=\"id\" href=\"#tomoyo_write_transition_control\">tomoyo_write_transition_control</a>(char *<a class=\"id\" href=\"#data\">data</a>, const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_delete\">is_delete</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create \"allow_read/write\", \"allow_execute\", \"allow_read\", \"allow_write\",</span>", 
"<span class=\"comment\"> * \"allow_create\", \"allow_unlink\", \"allow_mkdir\", \"allow_rmdir\",</span>", 
"<span class=\"comment\"> * \"allow_mkfifo\", \"allow_mksock\", \"allow_mkblock\", \"allow_mkchar\",</span>", 
"<span class=\"comment\"> * \"allow_truncate\", \"allow_symlink\", \"allow_rewrite\", \"allow_rename\" and</span>", 
"<span class=\"comment\"> * \"allow_link\" entry in domain policy.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tomoyo_write_file\">tomoyo_write_file</a>(char *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#domain\">domain</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_delete\">is_delete</a>);", 
"<span class=\"comment\">/* Create \"allow_read\" entry in exception policy. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_write_globally_readable\">tomoyo_write_globally_readable</a>(char *<a class=\"id\" href=\"#data\">data</a>, const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_delete\">is_delete</a>);", 
"<span class=\"comment\">/* Create \"allow_mount\" entry in domain policy. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_write_mount\">tomoyo_write_mount</a>(char *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#domain\">domain</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_delete\">is_delete</a>);", 
"<span class=\"comment\">/* Create \"deny_rewrite\" entry in exception policy. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_write_no_rewrite\">tomoyo_write_no_rewrite</a>(char *<a class=\"id\" href=\"#data\">data</a>, const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_delete\">is_delete</a>);", 
"<span class=\"comment\">/* Create \"file_pattern\" entry in exception policy. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_write_pattern\">tomoyo_write_pattern</a>(char *<a class=\"id\" href=\"#data\">data</a>, const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_delete\">is_delete</a>);", 
"<span class=\"comment\">/* Create \"path_group\"/\"number_group\" entry in exception policy. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_write_group\">tomoyo_write_group</a>(char *<a class=\"id\" href=\"#data\">data</a>, const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_delete\">is_delete</a>, const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>);", 
"int <a class=\"id\" href=\"#tomoyo_supervisor\">tomoyo_supervisor</a>(struct <a class=\"id\" href=\"#tomoyo_request_info\">tomoyo_request_info</a> *<a class=\"id\" href=\"#r\">r</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"     <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a>(<a class=\"id\" href=\"#printf\">printf</a>, 2, 3)));", 
"<span class=\"comment\">/* Find a domain by the given name. */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#tomoyo_find_domain\">tomoyo_find_domain</a>(const char *<a class=\"id\" href=\"#domainname\">domainname</a>);", 
"<span class=\"comment\">/* Find or create a domain by the given name. */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#tomoyo_assign_domain\">tomoyo_assign_domain</a>(const char *<a class=\"id\" href=\"#domainname\">domainname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#profile\">profile</a>);", 
"struct <a class=\"id\" href=\"#tomoyo_profile\">tomoyo_profile</a> *<a class=\"id\" href=\"#tomoyo_profile\">tomoyo_profile</a>(const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#profile\">profile</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate memory for \"struct tomoyo_path_group\"/\"struct tomoyo_number_group\".</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_group\">tomoyo_group</a> *<a class=\"id\" href=\"#tomoyo_get_group\">tomoyo_get_group</a>(const char *<a class=\"id\" href=\"#group_name\">group_name</a>, const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"comment\">/* Check mode for specified functionality. */</span>", 
"unsigned int <a class=\"id\" href=\"#tomoyo_check_flags\">tomoyo_check_flags</a>(const struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#domain\">domain</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"comment\">/* Fill in \"struct tomoyo_path_info\" members. */</span>", 
"void <a class=\"id\" href=\"#tomoyo_fill_path_info\">tomoyo_fill_path_info</a>(struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"comment\">/* Run policy loader when /sbin/init starts. */</span>", 
"void <a class=\"id\" href=\"#tomoyo_load_policy\">tomoyo_load_policy</a>(const char *<a class=\"id\" href=\"#filename\">filename</a>);", 
"", 
"void <a class=\"id\" href=\"#tomoyo_put_number_union\">tomoyo_put_number_union</a>(struct <a class=\"id\" href=\"#tomoyo_number_union\">tomoyo_number_union</a> *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"<span class=\"comment\">/* Convert binary string to ascii string. */</span>", 
"char *<a class=\"id\" href=\"#tomoyo_encode\">tomoyo_encode</a>(const char *<a class=\"id\" href=\"#str\">str</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns realpath(3) of the given pathname except that</span>", 
"<span class=\"comment\"> * ignores chroot'ed root and does not follow the final symlink.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#tomoyo_realpath_nofollow\">tomoyo_realpath_nofollow</a>(const char *<a class=\"id\" href=\"#pathname\">pathname</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns realpath(3) of the given pathname except that</span>", 
"<span class=\"comment\"> * ignores chroot'ed root and the pathname is already solved.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#tomoyo_realpath_from_path\">tomoyo_realpath_from_path</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"comment\">/* Get patterned pathname. */</span>", 
"const char *<a class=\"id\" href=\"#tomoyo_pattern\">tomoyo_pattern</a>(const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#filename\">filename</a>);", 
"", 
"<span class=\"comment\">/* Check memory quota. */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_memory_ok\">tomoyo_memory_ok</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"void *<a class=\"id\" href=\"#tomoyo_commit_ok\">tomoyo_commit_ok</a>(void *<a class=\"id\" href=\"#data\">data</a>, const unsigned int <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Keep the given name on the RAM.</span>", 
"<span class=\"comment\"> * The RAM is shared, so NEVER try to modify or kfree() the returned name.</span>", 
"<span class=\"comment\"> */</span>", 
"const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#tomoyo_get_name\">tomoyo_get_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"comment\">/* Check for memory usage. */</span>", 
"void <a class=\"id\" href=\"#tomoyo_read_memory_counter\">tomoyo_read_memory_counter</a>(struct <a class=\"id\" href=\"#tomoyo_io_buffer\">tomoyo_io_buffer</a> *<a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"comment\">/* Set memory quota. */</span>", 
"int <a class=\"id\" href=\"#tomoyo_write_memory_quota\">tomoyo_write_memory_quota</a>(struct <a class=\"id\" href=\"#tomoyo_io_buffer\">tomoyo_io_buffer</a> *<a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"comment\">/* Initialize mm related code. */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#tomoyo_mm_init\">tomoyo_mm_init</a>(void);", 
"int <a class=\"id\" href=\"#tomoyo_path_permission\">tomoyo_path_permission</a>(struct <a class=\"id\" href=\"#tomoyo_request_info\">tomoyo_request_info</a> *<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#operation\">operation</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#filename\">filename</a>);", 
"int <a class=\"id\" href=\"#tomoyo_check_open_permission\">tomoyo_check_open_permission</a>(struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#domain\">domain</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, const int <a class=\"id\" href=\"#flag\">flag</a>);", 
"int <a class=\"id\" href=\"#tomoyo_path_number_perm\">tomoyo_path_number_perm</a>(const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#operation\">operation</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#number\">number</a>);", 
"int <a class=\"id\" href=\"#tomoyo_mkdev_perm\">tomoyo_mkdev_perm</a>(const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#operation\">operation</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const unsigned int <a class=\"id\" href=\"#mode\">mode</a>, unsigned int <a class=\"id\" href=\"#dev\">dev</a>);", 
"int <a class=\"id\" href=\"#tomoyo_path_perm\">tomoyo_path_perm</a>(const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#operation\">operation</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>);", 
"int <a class=\"id\" href=\"#tomoyo_path2_perm\">tomoyo_path2_perm</a>(const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#operation\">operation</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path1\">path1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path2\">path2</a>);", 
"int <a class=\"id\" href=\"#tomoyo_find_next_domain\">tomoyo_find_next_domain</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"", 
"void <a class=\"id\" href=\"#tomoyo_print_ulong\">tomoyo_print_ulong</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const int <a class=\"id\" href=\"#buffer_len\">buffer_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#value\">value</a>, const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"comment\">/* Drop refcount on tomoyo_name_union. */</span>", 
"void <a class=\"id\" href=\"#tomoyo_put_name_union\">tomoyo_put_name_union</a>(struct <a class=\"id\" href=\"#tomoyo_name_union\">tomoyo_name_union</a> *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"<span class=\"comment\">/* Run garbage collector. */</span>", 
"void <a class=\"id\" href=\"#tomoyo_run_gc\">tomoyo_run_gc</a>(void);", 
"", 
"void <a class=\"id\" href=\"#tomoyo_memory_free\">tomoyo_memory_free</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"int <a class=\"id\" href=\"#tomoyo_update_domain\">tomoyo_update_domain</a>(struct <a class=\"id\" href=\"#tomoyo_acl_info\">tomoyo_acl_info</a> *<a class=\"id\" href=\"#new_entry\">new_entry</a>, const int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_delete\">is_delete</a>, struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#domain\">domain</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bool\">bool</a> (*<a class=\"id\" href=\"#check_duplicate\">check_duplicate</a>) (const struct <a class=\"id\" href=\"#tomoyo_acl_info\">tomoyo_acl_info</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#tomoyo_acl_info\">tomoyo_acl_info</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bool\">bool</a> (*<a class=\"id\" href=\"#merge_duplicate\">merge_duplicate</a>) (struct <a class=\"id\" href=\"#tomoyo_acl_info\">tomoyo_acl_info</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#tomoyo_acl_info\">tomoyo_acl_info</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const <a class=\"id\" href=\"#bool\">bool</a>));", 
"int <a class=\"id\" href=\"#tomoyo_update_policy\">tomoyo_update_policy</a>(struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a> *<a class=\"id\" href=\"#new_entry\">new_entry</a>, const int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_delete\">is_delete</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bool\">bool</a> (*<a class=\"id\" href=\"#check_duplicate\">check_duplicate</a>) (const struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  *));", 
"void <a class=\"id\" href=\"#tomoyo_check_acl\">tomoyo_check_acl</a>(struct <a class=\"id\" href=\"#tomoyo_request_info\">tomoyo_request_info</a> *<a class=\"id\" href=\"#r\">r</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#bool\">bool</a> (*<a class=\"id\" href=\"#check_entry\">check_entry</a>) (struct <a class=\"id\" href=\"#tomoyo_request_info\">tomoyo_request_info</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#tomoyo_acl_info\">tomoyo_acl_info</a> *));", 
"", 
"<span class=\"comment\">/********** External variable definitions. **********/</span>", 
"", 
"<span class=\"comment\">/* Lock for GC. */</span>", 
"extern struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> <a class=\"id\" href=\"#tomoyo_ss\">tomoyo_ss</a>;", 
"", 
"<span class=\"comment\">/* The list for \"struct tomoyo_domain_info\". */</span>", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tomoyo_domain_list\">tomoyo_domain_list</a>;", 
"", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tomoyo_policy_list\">tomoyo_policy_list</a>[<a class=\"id\" href=\"#TOMOYO_MAX_POLICY\">TOMOYO_MAX_POLICY</a>];", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tomoyo_group_list\">tomoyo_group_list</a>[<a class=\"id\" href=\"#TOMOYO_MAX_GROUP\">TOMOYO_MAX_GROUP</a>];", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tomoyo_name_list\">tomoyo_name_list</a>[<a class=\"id\" href=\"#TOMOYO_MAX_HASH\">TOMOYO_MAX_HASH</a>];", 
"", 
"<span class=\"comment\">/* Lock for protecting policy. */</span>", 
"extern struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#tomoyo_policy_lock\">tomoyo_policy_lock</a>;", 
"", 
"<span class=\"comment\">/* Has /sbin/init started? */</span>", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_policy_loaded\">tomoyo_policy_loaded</a>;", 
"", 
"<span class=\"comment\">/* The kernel's domain. */</span>", 
"extern struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> <a class=\"id\" href=\"#tomoyo_kernel_domain\">tomoyo_kernel_domain</a>;", 
"", 
"extern const char *<a class=\"id\" href=\"#tomoyo_path_keyword\">tomoyo_path_keyword</a>[<a class=\"id\" href=\"#TOMOYO_MAX_PATH_OPERATION\">TOMOYO_MAX_PATH_OPERATION</a>];", 
"extern const char *<a class=\"id\" href=\"#tomoyo_mkdev_keyword\">tomoyo_mkdev_keyword</a>[<a class=\"id\" href=\"#TOMOYO_MAX_MKDEV_OPERATION\">TOMOYO_MAX_MKDEV_OPERATION</a>];", 
"extern const char *<a class=\"id\" href=\"#tomoyo_path2_keyword\">tomoyo_path2_keyword</a>[<a class=\"id\" href=\"#TOMOYO_MAX_PATH2_OPERATION\">TOMOYO_MAX_PATH2_OPERATION</a>];", 
"extern const char *<a class=\"id\" href=\"#tomoyo_path_number_keyword\">tomoyo_path_number_keyword</a>[<a class=\"id\" href=\"#TOMOYO_MAX_PATH_NUMBER_OPERATION\">TOMOYO_MAX_PATH_NUMBER_OPERATION</a>];", 
"", 
"extern unsigned int <a class=\"id\" href=\"#tomoyo_quota_for_query\">tomoyo_quota_for_query</a>;", 
"extern unsigned int <a class=\"id\" href=\"#tomoyo_query_memory_size\">tomoyo_query_memory_size</a>;", 
"", 
"<span class=\"comment\">/********** Inlined functions. **********/</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tomoyo_read_lock\">tomoyo_read_lock</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#srcu_read_lock\">srcu_read_lock</a>(&amp;<a class=\"id\" href=\"#tomoyo_ss\">tomoyo_ss</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tomoyo_read_unlock\">tomoyo_read_unlock</a>(int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#srcu_read_unlock\">srcu_read_unlock</a>(&amp;<a class=\"id\" href=\"#tomoyo_ss\">tomoyo_ss</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"}", 
"", 
"<span class=\"comment\">/* strcmp() for \"struct tomoyo_path_info\" structure. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_pathcmp\">tomoyo_pathcmp</a>(const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#a\">a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#hash\">hash</a> != <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#hash\">hash</a> || <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_valid - Check whether the character is a valid char.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @c: The character to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @c is a valid character, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_valid\">tomoyo_valid</a>(const unsigned char <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a> &gt; ' ' && <a class=\"id\" href=\"#c\">c</a> &lt; 127;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_invalid - Check whether the character is an invalid char.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @c: The character to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @c is an invalid character, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_invalid\">tomoyo_invalid</a>(const unsigned char <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a> && (<a class=\"id\" href=\"#c\">c</a> <= ' ' || <a class=\"id\" href=\"#c\">c</a> >= 127);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tomoyo_put_name\">tomoyo_put_name</a>(const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_name\">tomoyo_name</a> *<a class=\"id\" href=\"#ptr\">ptr</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#ptr\">ptr</a>), <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#users\">users</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tomoyo_put_group\">tomoyo_put_group</a>(struct <a class=\"id\" href=\"#tomoyo_group\">tomoyo_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#users\">users</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#tomoyo_domain\">tomoyo_domain</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_cred\">current_cred</a>()-><a class=\"id\" href=\"#security\">security</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#tomoyo_domain_info\">tomoyo_domain_info</a> *<a class=\"id\" href=\"#tomoyo_real_domain\">tomoyo_real_domain</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_cred_xxx\">task_cred_xxx</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#security\">security</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_same_acl_head\">tomoyo_same_acl_head</a>(const struct <a class=\"id\" href=\"#tomoyo_acl_info\">tomoyo_acl_info</a> *<a class=\"id\" href=\"#p1\">p1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#tomoyo_acl_info\">tomoyo_acl_info</a> *<a class=\"id\" href=\"#p2\">p2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_same_name_union\">tomoyo_same_name_union</a>", 
"(const struct <a class=\"id\" href=\"#tomoyo_name_union\">tomoyo_name_union</a> *<a class=\"id\" href=\"#p1\">p1</a>, const struct <a class=\"id\" href=\"#tomoyo_name_union\">tomoyo_name_union</a> *<a class=\"id\" href=\"#p2\">p2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#filename\">filename</a> == <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#filename\">filename</a> && <a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#group\">group</a> == <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#group\">group</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#is_group\">is_group</a> == <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#is_group\">is_group</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_same_number_union\">tomoyo_same_number_union</a>", 
"(const struct <a class=\"id\" href=\"#tomoyo_number_union\">tomoyo_number_union</a> *<a class=\"id\" href=\"#p1\">p1</a>, const struct <a class=\"id\" href=\"#tomoyo_number_union\">tomoyo_number_union</a> *<a class=\"id\" href=\"#p2\">p2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#values\">values</a>[0] == <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#values\">values</a>[0] && <a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#values\">values</a>[1] == <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#values\">values</a>[1]", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#group\">group</a> == <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#group\">group</a> && <a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#min_type\">min_type</a> == <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#min_type\">min_type</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#max_type\">max_type</a> == <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#max_type\">max_type</a> && <a class=\"id\" href=\"#p1\">p1</a>-><a class=\"id\" href=\"#is_group\">is_group</a> == <a class=\"id\" href=\"#p2\">p2</a>-><a class=\"id\" href=\"#is_group\">is_group</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_cookie - iterate over a list with cookie.</span>", 
"<span class=\"comment\"> * @pos:        the &amp;struct list_head to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:       the head for your list.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_cookie\">list_for_each_cookie</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> =  <a class=\"id\" href=\"#srcu_dereference\">srcu_dereference</a>((<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#tomoyo_ss\">tomoyo_ss</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#pos\">pos</a> != (<a class=\"id\" href=\"#head\">head</a>); <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#srcu_dereference\">srcu_dereference</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#tomoyo_ss\">tomoyo_ss</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !defined(_SECURITY_TOMOYO_COMMON_H) */</span>", 
];
xr_frag_insert('l/f8/35017236a6575383b480ea811f45b032b62add.xr', __xr_tmp);
