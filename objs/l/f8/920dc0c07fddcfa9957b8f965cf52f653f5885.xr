var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * memory buffer pool support</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_MEMPOOL_H\">_LINUX_MEMPOOL_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_MEMPOOL_H\">_LINUX_MEMPOOL_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a>;", 
"", 
"typedef void * (<a class=\"id\" href=\"#mempool_alloc_t\">mempool_alloc_t</a>)(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"typedef void (<a class=\"id\" href=\"#mempool_free_t\">mempool_free_t</a>)(void *<a class=\"id\" href=\"#element\">element</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"", 
"typedef struct <a class=\"id\" href=\"#mempool_s\">mempool_s</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#min_nr\">min_nr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nr of elements at *elements */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#curr_nr\">curr_nr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Current nr of elements at *elements */</span>", 
"<span class=\"ts\"/>void **<a class=\"id\" href=\"#elements\">elements</a>;", 
"", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#pool_data\">pool_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_alloc_t\">mempool_alloc_t</a> *<a class=\"id\" href=\"#alloc\">alloc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_free_t\">mempool_free_t</a> *<a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#wait\">wait</a>;", 
"} <a class=\"id\" href=\"#mempool_t\">mempool_t</a>;", 
"", 
"extern <a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#mempool_create\">mempool_create</a>(int <a class=\"id\" href=\"#min_nr\">min_nr</a>, <a class=\"id\" href=\"#mempool_alloc_t\">mempool_alloc_t</a> *<a class=\"id\" href=\"#alloc_fn\">alloc_fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_free_t\">mempool_free_t</a> *<a class=\"id\" href=\"#free_fn\">free_fn</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"extern <a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#mempool_create_node\">mempool_create_node</a>(int <a class=\"id\" href=\"#min_nr\">min_nr</a>, <a class=\"id\" href=\"#mempool_alloc_t\">mempool_alloc_t</a> *<a class=\"id\" href=\"#alloc_fn\">alloc_fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_free_t\">mempool_free_t</a> *<a class=\"id\" href=\"#free_fn\">free_fn</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>, int <a class=\"id\" href=\"#nid\">nid</a>);", 
"", 
"extern int <a class=\"id\" href=\"#mempool_resize\">mempool_resize</a>(<a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#pool\">pool</a>, int <a class=\"id\" href=\"#new_min_nr\">new_min_nr</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"extern void <a class=\"id\" href=\"#mempool_destroy\">mempool_destroy</a>(<a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#pool\">pool</a>);", 
"extern void * <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"extern void <a class=\"id\" href=\"#mempool_free\">mempool_free</a>(void *<a class=\"id\" href=\"#element\">element</a>, <a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#pool\">pool</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A mempool_alloc_t and mempool_free_t that get the memory from</span>", 
"<span class=\"comment\"> * a slab that is passed in through pool_data.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#mempool_alloc_slab\">mempool_alloc_slab</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"void <a class=\"id\" href=\"#mempool_free_slab\">mempool_free_slab</a>(void *<a class=\"id\" href=\"#element\">element</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#mempool_t\">mempool_t</a> *", 
"<a class=\"id\" href=\"#mempool_create_slab_pool\">mempool_create_slab_pool</a>(int <a class=\"id\" href=\"#min_nr\">min_nr</a>, struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#kc\">kc</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mempool_create\">mempool_create</a>(<a class=\"id\" href=\"#min_nr\">min_nr</a>, <a class=\"id\" href=\"#mempool_alloc_slab\">mempool_alloc_slab</a>, <a class=\"id\" href=\"#mempool_free_slab\">mempool_free_slab</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (void *) <a class=\"id\" href=\"#kc\">kc</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * a mempool_alloc_t and a mempool_free_t to kmalloc and kfree the</span>", 
"<span class=\"comment\"> * amount of memory specified by pool_data</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#mempool_kmalloc\">mempool_kmalloc</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"void <a class=\"id\" href=\"#mempool_kfree\">mempool_kfree</a>(void *<a class=\"id\" href=\"#element\">element</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#mempool_create_kmalloc_pool\">mempool_create_kmalloc_pool</a>(int <a class=\"id\" href=\"#min_nr\">min_nr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mempool_create\">mempool_create</a>(<a class=\"id\" href=\"#min_nr\">min_nr</a>, <a class=\"id\" href=\"#mempool_kmalloc\">mempool_kmalloc</a>, <a class=\"id\" href=\"#mempool_kfree\">mempool_kfree</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (void *) <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A mempool_alloc_t and mempool_free_t for a simple page allocator that</span>", 
"<span class=\"comment\"> * allocates pages of the order specified by pool_data</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#mempool_alloc_pages\">mempool_alloc_pages</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"void <a class=\"id\" href=\"#mempool_free_pages\">mempool_free_pages</a>(void *<a class=\"id\" href=\"#element\">element</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#mempool_create_page_pool\">mempool_create_page_pool</a>(int <a class=\"id\" href=\"#min_nr\">min_nr</a>, int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mempool_create\">mempool_create</a>(<a class=\"id\" href=\"#min_nr\">min_nr</a>, <a class=\"id\" href=\"#mempool_alloc_pages\">mempool_alloc_pages</a>, <a class=\"id\" href=\"#mempool_free_pages\">mempool_free_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (void *)(long)<a class=\"id\" href=\"#order\">order</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_MEMPOOL_H */</span>", 
];
xr_frag_insert('l/f8/920dc0c07fddcfa9957b8f965cf52f653f5885.xr', __xr_tmp);
