var __xr_tmp = [
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#call_function\">call_function</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Place entry at the _HEAD_ of the list, so that any cpu still</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * observing the entry in generic_smp_call_function_interrupt()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will not miss any other list entries:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#csd\">csd</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#call_function\">call_function</a>.<a class=\"id\" href=\"#queue\">queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#call_function\">call_function</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make the list addition visible before sending the ipi.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (IPIs must obey or appear to obey normal Linux cache</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * coherency rules -- see comment in generic_exec_single).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Send a message to all CPUs in the map */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_send_call_function_ipi_mask\">arch_send_call_function_ipi_mask</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Optionally wait for the CPUs to complete */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wait\">wait</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csd_lock_wait\">csd_lock_wait</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#csd\">csd</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#smp_call_function_many\">smp_call_function_many</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smp_call_function(): Run a function on all other CPUs.</span>", 
"<span class=\"comment\"> * @func: The function to run. This must be fast and non-blocking.</span>", 
"<span class=\"comment\"> * @info: An arbitrary pointer to pass to the function.</span>", 
"<span class=\"comment\"> * @wait: If true, wait (atomically) until function has completed</span>", 
"<span class=\"comment\"> *        on other CPUs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @wait is true, then returns once @func has returned; otherwise</span>", 
"<span class=\"comment\"> * it returns just before the target cpu calls @func.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You must not call this function with disabled interrupts or from a</span>", 
"<span class=\"comment\"> * hardware interrupt handler or from a bottom half handler.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#smp_call_function\">smp_call_function</a>(void (*<a class=\"id\" href=\"#func\">func</a>)(void *), void *<a class=\"id\" href=\"#info\">info</a>, int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_many\">smp_call_function_many</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#smp_call_function\">smp_call_function</a>);", 
"", 
"void <a class=\"id\" href=\"#ipi_call_lock\">ipi_call_lock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#call_function\">call_function</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ipi_call_unlock\">ipi_call_unlock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#call_function\">call_function</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ipi_call_lock_irq\">ipi_call_lock_irq</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#call_function\">call_function</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ipi_call_unlock_irq\">ipi_call_unlock_irq</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#call_function\">call_function</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
];
xr_frag_insert('l/f8/c67a381bb1a0529efab20d015e2be7807612ff.xr', __xr_tmp);
