var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trace_events_filter - generic event filtering</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2009 Tom Zanussi &lt;tzanussi@gmail.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace_output.h\"", 
"", 
"enum <a class=\"id\" href=\"#filter_op_ids\">filter_op_ids</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#OP_OR\">OP_OR</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#OP_AND\">OP_AND</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#OP_GLOB\">OP_GLOB</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#OP_NE\">OP_NE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#OP_EQ\">OP_EQ</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#OP_LT\">OP_LT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#OP_LE\">OP_LE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#OP_GT\">OP_GT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#OP_GE\">OP_GE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#OP_NONE\">OP_NONE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#OP_OPEN_PAREN\">OP_OPEN_PAREN</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#filter_op\">filter_op</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#string\">string</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#precedence\">precedence</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#filter_op\">filter_op</a> <a class=\"id\" href=\"#filter_ops\">filter_ops</a>[] = {", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#OP_OR\">OP_OR</a>,<span class=\"ts\"/>\"||\",<span class=\"ts\"/><span class=\"ts\"/>1 },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#OP_AND\">OP_AND</a>,<span class=\"ts\"/>\"&&\",<span class=\"ts\"/><span class=\"ts\"/>2 },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#OP_GLOB\">OP_GLOB</a>,<span class=\"ts\"/>\"~\",<span class=\"ts\"/><span class=\"ts\"/>4 },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#OP_NE\">OP_NE</a>,<span class=\"ts\"/>\"!=\",<span class=\"ts\"/><span class=\"ts\"/>4 },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#OP_EQ\">OP_EQ</a>,<span class=\"ts\"/>\"==\",<span class=\"ts\"/><span class=\"ts\"/>4 },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#OP_LT\">OP_LT</a>,<span class=\"ts\"/>\"<\",<span class=\"ts\"/><span class=\"ts\"/>5 },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#OP_LE\">OP_LE</a>,<span class=\"ts\"/>\"<=\",<span class=\"ts\"/><span class=\"ts\"/>5 },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#OP_GT\">OP_GT</a>,<span class=\"ts\"/>\">\",<span class=\"ts\"/><span class=\"ts\"/>5 },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#OP_GE\">OP_GE</a>,<span class=\"ts\"/>\">=\",<span class=\"ts\"/><span class=\"ts\"/>5 },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#OP_NONE\">OP_NONE</a>,<span class=\"ts\"/>\"OP_NONE\",<span class=\"ts\"/>0 },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#OP_OPEN_PAREN\">OP_OPEN_PAREN</a>, \"(\",<span class=\"ts\"/><span class=\"ts\"/>0 },", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILT_ERR_NONE\">FILT_ERR_NONE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILT_ERR_INVALID_OP\">FILT_ERR_INVALID_OP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILT_ERR_UNBALANCED_PAREN\">FILT_ERR_UNBALANCED_PAREN</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILT_ERR_TOO_MANY_OPERANDS\">FILT_ERR_TOO_MANY_OPERANDS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILT_ERR_OPERAND_TOO_LONG\">FILT_ERR_OPERAND_TOO_LONG</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILT_ERR_FIELD_NOT_FOUND\">FILT_ERR_FIELD_NOT_FOUND</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILT_ERR_ILLEGAL_FIELD_OP\">FILT_ERR_ILLEGAL_FIELD_OP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILT_ERR_ILLEGAL_INTVAL\">FILT_ERR_ILLEGAL_INTVAL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILT_ERR_BAD_SUBSYS_FILTER\">FILT_ERR_BAD_SUBSYS_FILTER</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILT_ERR_TOO_MANY_PREDS\">FILT_ERR_TOO_MANY_PREDS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILT_ERR_MISSING_FIELD\">FILT_ERR_MISSING_FIELD</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILT_ERR_INVALID_FILTER\">FILT_ERR_INVALID_FILTER</a>,", 
"};", 
"", 
"static char *<a class=\"id\" href=\"#err_text\">err_text</a>[] = {", 
"<span class=\"ts\"/>\"No error\",", 
"<span class=\"ts\"/>\"Invalid operator\",", 
"<span class=\"ts\"/>\"Unbalanced parens\",", 
"<span class=\"ts\"/>\"Too many operands\",", 
"<span class=\"ts\"/>\"Operand too long\",", 
"<span class=\"ts\"/>\"Field not found\",", 
"<span class=\"ts\"/>\"Illegal operation for field type\",", 
"<span class=\"ts\"/>\"Illegal integer value\",", 
"<span class=\"ts\"/>\"Couldn't find or set field in one of a subsystem's events\",", 
"<span class=\"ts\"/>\"Too many terms in predicate expression\",", 
"<span class=\"ts\"/>\"Missing field name and/or value\",", 
"<span class=\"ts\"/>\"Meaningless filter expression\",", 
"};", 
"", 
"struct <a class=\"id\" href=\"#opstack_op\">opstack_op</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#postfix_elt\">postfix_elt</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#operand\">operand</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#filter_parse_state\">filter_parse_state</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#filter_op\">filter_op</a> *<a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#opstack\">opstack</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#postfix\">postfix</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lasterr\">lasterr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lasterr_pos\">lasterr_pos</a>;", 
"", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#string\">string</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#infix\">infix</a>;", 
"", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#string\">string</a>[<a class=\"id\" href=\"#MAX_FILTER_STR_VAL\">MAX_FILTER_STR_VAL</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#operand\">operand</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_COMPARISON_PRED\">DEFINE_COMPARISON_PRED</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static int <a class=\"id\" href=\"#filter_pred_\">filter_pred_</a>##<a class=\"id\" href=\"#type\">type</a>(struct <a class=\"id\" href=\"#filter_pred\">filter_pred</a> *<a class=\"id\" href=\"#pred\">pred</a>, void *<a class=\"id\" href=\"#event\">event</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#val1\">val1</a>, int <a class=\"id\" href=\"#val2\">val2</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> *<a class=\"id\" href=\"#addr\">addr</a> = (<a class=\"id\" href=\"#type\">type</a> *)(<a class=\"id\" href=\"#event\">event</a> + <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#offset\">offset</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#val\">val</a> = (<a class=\"id\" href=\"#type\">type</a>)<a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#val\">val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#match\">match</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#op\">op</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#OP_LT\">OP_LT</a>:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = (*<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#val\">val</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#OP_LE\">OP_LE</a>:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = (*<a class=\"id\" href=\"#addr\">addr</a> <= <a class=\"id\" href=\"#val\">val</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#OP_GT\">OP_GT</a>:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = (*<a class=\"id\" href=\"#addr\">addr</a> &gt; <a class=\"id\" href=\"#val\">val</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#OP_GE\">OP_GE</a>:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = (*<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#val\">val</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>default:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#match\">match</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_EQUALITY_PRED\">DEFINE_EQUALITY_PRED</a>(<a class=\"id\" href=\"#size\">size</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static int <a class=\"id\" href=\"#filter_pred_\">filter_pred_</a>##<a class=\"id\" href=\"#size\">size</a>(struct <a class=\"id\" href=\"#filter_pred\">filter_pred</a> *<a class=\"id\" href=\"#pred\">pred</a>, void *<a class=\"id\" href=\"#event\">event</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#val1\">val1</a>, int <a class=\"id\" href=\"#val2\">val2</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>##<a class=\"id\" href=\"#size\">size</a> *<a class=\"id\" href=\"#addr\">addr</a> = (<a class=\"id\" href=\"#u\">u</a>##<a class=\"id\" href=\"#size\">size</a> *)(<a class=\"id\" href=\"#event\">event</a> + <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#offset\">offset</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>##<a class=\"id\" href=\"#size\">size</a> <a class=\"id\" href=\"#val\">val</a> = (<a class=\"id\" href=\"#u\">u</a>##<a class=\"id\" href=\"#size\">size</a>)<a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#val\">val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#match\">match</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = (<a class=\"id\" href=\"#val\">val</a> == *<a class=\"id\" href=\"#addr\">addr</a>) ^ <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#not\">not</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#match\">match</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"<a class=\"id\" href=\"#DEFINE_COMPARISON_PRED\">DEFINE_COMPARISON_PRED</a>(<a class=\"id\" href=\"#s64\">s64</a>);", 
"<a class=\"id\" href=\"#DEFINE_COMPARISON_PRED\">DEFINE_COMPARISON_PRED</a>(<a class=\"id\" href=\"#u64\">u64</a>);", 
"<a class=\"id\" href=\"#DEFINE_COMPARISON_PRED\">DEFINE_COMPARISON_PRED</a>(<a class=\"id\" href=\"#s32\">s32</a>);", 
"<a class=\"id\" href=\"#DEFINE_COMPARISON_PRED\">DEFINE_COMPARISON_PRED</a>(<a class=\"id\" href=\"#u32\">u32</a>);", 
"<a class=\"id\" href=\"#DEFINE_COMPARISON_PRED\">DEFINE_COMPARISON_PRED</a>(<a class=\"id\" href=\"#s16\">s16</a>);", 
"<a class=\"id\" href=\"#DEFINE_COMPARISON_PRED\">DEFINE_COMPARISON_PRED</a>(<a class=\"id\" href=\"#u16\">u16</a>);", 
"<a class=\"id\" href=\"#DEFINE_COMPARISON_PRED\">DEFINE_COMPARISON_PRED</a>(<a class=\"id\" href=\"#s8\">s8</a>);", 
"<a class=\"id\" href=\"#DEFINE_COMPARISON_PRED\">DEFINE_COMPARISON_PRED</a>(<a class=\"id\" href=\"#u8\">u8</a>);", 
"", 
"<a class=\"id\" href=\"#DEFINE_EQUALITY_PRED\">DEFINE_EQUALITY_PRED</a>(64);", 
"<a class=\"id\" href=\"#DEFINE_EQUALITY_PRED\">DEFINE_EQUALITY_PRED</a>(32);", 
"<a class=\"id\" href=\"#DEFINE_EQUALITY_PRED\">DEFINE_EQUALITY_PRED</a>(16);", 
"<a class=\"id\" href=\"#DEFINE_EQUALITY_PRED\">DEFINE_EQUALITY_PRED</a>(8);", 
"", 
"static int <a class=\"id\" href=\"#filter_pred_and\">filter_pred_and</a>(struct <a class=\"id\" href=\"#filter_pred\">filter_pred</a> *<a class=\"id\" href=\"#pred\">pred</a> <a class=\"id\" href=\"#__attribute\">__attribute</a>((<a class=\"id\" href=\"#unused\">unused</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void *<a class=\"id\" href=\"#event\">event</a> <a class=\"id\" href=\"#__attribute\">__attribute</a>((<a class=\"id\" href=\"#unused\">unused</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#val1\">val1</a>, int <a class=\"id\" href=\"#val2\">val2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val1\">val1</a> && <a class=\"id\" href=\"#val2\">val2</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#filter_pred_or\">filter_pred_or</a>(struct <a class=\"id\" href=\"#filter_pred\">filter_pred</a> *<a class=\"id\" href=\"#pred\">pred</a> <a class=\"id\" href=\"#__attribute\">__attribute</a>((<a class=\"id\" href=\"#unused\">unused</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#event\">event</a> <a class=\"id\" href=\"#__attribute\">__attribute</a>((<a class=\"id\" href=\"#unused\">unused</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#val1\">val1</a>, int <a class=\"id\" href=\"#val2\">val2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val1\">val1</a> || <a class=\"id\" href=\"#val2\">val2</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Filter predicate for fixed sized arrays of characters */</span>", 
"static int <a class=\"id\" href=\"#filter_pred_string\">filter_pred_string</a>(struct <a class=\"id\" href=\"#filter_pred\">filter_pred</a> *<a class=\"id\" href=\"#pred\">pred</a>, void *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#val1\">val1</a>, int <a class=\"id\" href=\"#val2\">val2</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#addr\">addr</a> = (char *)(<a class=\"id\" href=\"#event\">event</a> + <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cmp\">cmp</a>, <a class=\"id\" href=\"#match\">match</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmp\">cmp</a> = <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#regex\">regex</a>.<a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#regex\">regex</a>, <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#regex\">regex</a>.<a class=\"id\" href=\"#field_len\">field_len</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#cmp\">cmp</a> ^ <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#not\">not</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#match\">match</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Filter predicate for char * pointers */</span>", 
"static int <a class=\"id\" href=\"#filter_pred_pchar\">filter_pred_pchar</a>(struct <a class=\"id\" href=\"#filter_pred\">filter_pred</a> *<a class=\"id\" href=\"#pred\">pred</a>, void *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#val1\">val1</a>, int <a class=\"id\" href=\"#val2\">val2</a>)", 
"{", 
"<span class=\"ts\"/>char **<a class=\"id\" href=\"#addr\">addr</a> = (char **)(<a class=\"id\" href=\"#event\">event</a> + <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cmp\">cmp</a>, <a class=\"id\" href=\"#match\">match</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(*<a class=\"id\" href=\"#addr\">addr</a>) + 1;<span class=\"ts\"/><span class=\"comment\">/* including tailing '\\0' */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmp\">cmp</a> = <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#regex\">regex</a>.<a class=\"id\" href=\"#match\">match</a>(*<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#regex\">regex</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#cmp\">cmp</a> ^ <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#not\">not</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#match\">match</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Filter predicate for dynamic sized arrays of characters.</span>", 
"<span class=\"comment\"> * These are implemented through a list of strings at the end</span>", 
"<span class=\"comment\"> * of the entry.</span>", 
"<span class=\"comment\"> * Also each of these strings have a field in the entry which</span>", 
"<span class=\"comment\"> * contains its offset from the beginning of the entry.</span>", 
"<span class=\"comment\"> * We have then first to get this field, dereference it</span>", 
"<span class=\"comment\"> * and add it to the address of the entry, and at last we have</span>", 
"<span class=\"comment\"> * the address of the string.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#filter_pred_strloc\">filter_pred_strloc</a>(struct <a class=\"id\" href=\"#filter_pred\">filter_pred</a> *<a class=\"id\" href=\"#pred\">pred</a>, void *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#val1\">val1</a>, int <a class=\"id\" href=\"#val2\">val2</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#str_item\">str_item</a> = *(<a class=\"id\" href=\"#u32\">u32</a> *)(<a class=\"id\" href=\"#event\">event</a> + <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#str_loc\">str_loc</a> = <a class=\"id\" href=\"#str_item\">str_item</a> &amp; 0xffff;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#str_len\">str_len</a> = <a class=\"id\" href=\"#str_item\">str_item</a> >> 16;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#addr\">addr</a> = (char *)(<a class=\"id\" href=\"#event\">event</a> + <a class=\"id\" href=\"#str_loc\">str_loc</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cmp\">cmp</a>, <a class=\"id\" href=\"#match\">match</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmp\">cmp</a> = <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#regex\">regex</a>.<a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#regex\">regex</a>, <a class=\"id\" href=\"#str_len\">str_len</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#cmp\">cmp</a> ^ <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#not\">not</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#match\">match</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#filter_pred_none\">filter_pred_none</a>(struct <a class=\"id\" href=\"#filter_pred\">filter_pred</a> *<a class=\"id\" href=\"#pred\">pred</a>, void *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#val1\">val1</a>, int <a class=\"id\" href=\"#val2\">val2</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * regex_match_foo - Basic regex callbacks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @str: the string to be searched</span>", 
"<span class=\"comment\"> * @r:   the regex structure containing the pattern string</span>", 
"<span class=\"comment\"> * @len: the length of the string to be searched (including '\\0')</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note:</span>", 
"<span class=\"comment\"> * - @str might not be NULL-terminated if it's of type DYN_STRING</span>", 
"<span class=\"comment\"> *   or STATIC_STRING</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#regex_match_full\">regex_match_full</a>(char *<a class=\"id\" href=\"#str\">str</a>, struct <a class=\"id\" href=\"#regex\">regex</a> *<a class=\"id\" href=\"#r\">r</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pattern\">pattern</a>, <a class=\"id\" href=\"#len\">len</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#regex_match_front\">regex_match_front</a>(char *<a class=\"id\" href=\"#str\">str</a>, struct <a class=\"id\" href=\"#regex\">regex</a> *<a class=\"id\" href=\"#r\">r</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pattern\">pattern</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#len\">len</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#regex_match_middle\">regex_match_middle</a>(char *<a class=\"id\" href=\"#str\">str</a>, struct <a class=\"id\" href=\"#regex\">regex</a> *<a class=\"id\" href=\"#r\">r</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strnstr\">strnstr</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pattern\">pattern</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#regex_match_end\">regex_match_end</a>(char *<a class=\"id\" href=\"#str\">str</a>, struct <a class=\"id\" href=\"#regex\">regex</a> *<a class=\"id\" href=\"#r\">r</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#strlen\">strlen</a> = <a class=\"id\" href=\"#len\">len</a> - 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a> >= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#len\">len</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#str\">str</a> + <a class=\"id\" href=\"#strlen\">strlen</a> - <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pattern\">pattern</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#len\">len</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * filter_parse_regex - parse a basic regex</span>", 
"<span class=\"comment\"> * @buff:   the raw regex</span>", 
"<span class=\"comment\"> * @len:    length of the regex</span>", 
"<span class=\"comment\"> * @search: will point to the beginning of the string to compare</span>", 
"<span class=\"comment\"> * @not:    tell whether the match will have to be inverted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This passes in a buffer containing a regex and this function will</span>", 
"<span class=\"comment\"> * set search to point to the search part of the buffer and</span>", 
"<span class=\"comment\"> * return the type of search it is (see enum above).</span>", 
"<span class=\"comment\"> * This does modify buff.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns enum type.</span>", 
"<span class=\"comment\"> *  search returns the pointer to use for comparison.</span>", 
"<span class=\"comment\"> *  not returns 1 if buff started with a '!'</span>", 
"<span class=\"comment\"> *     0 otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#regex_type\">regex_type</a> <a class=\"id\" href=\"#filter_parse_regex\">filter_parse_regex</a>(char *<a class=\"id\" href=\"#buff\">buff</a>, int <a class=\"id\" href=\"#len\">len</a>, char **<a class=\"id\" href=\"#search\">search</a>, int *<a class=\"id\" href=\"#not\">not</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MATCH_FULL\">MATCH_FULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buff\">buff</a>[0] == '!') {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#not\">not</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>--;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#not\">not</a> = 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#search\">search</a> = <a class=\"id\" href=\"#buff\">buff</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buff\">buff</a>[<a class=\"id\" href=\"#i\">i</a>] == '*') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#search\">search</a> = <a class=\"id\" href=\"#buff\">buff</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MATCH_END_ONLY\">MATCH_END_ONLY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#MATCH_END_ONLY\">MATCH_END_ONLY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MATCH_MIDDLE_ONLY\">MATCH_MIDDLE_ONLY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MATCH_FRONT_ONLY\">MATCH_FRONT_ONLY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#type\">type</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#filter_build_regex\">filter_build_regex</a>(struct <a class=\"id\" href=\"#filter_pred\">filter_pred</a> *<a class=\"id\" href=\"#pred\">pred</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#regex\">regex</a> *<a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#regex\">regex</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#search\">search</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#regex_type\">regex_type</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#MATCH_FULL\">MATCH_FULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#not\">not</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#op\">op</a> == <a class=\"id\" href=\"#OP_GLOB\">OP_GLOB</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#filter_parse_regex\">filter_parse_regex</a>(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pattern\">pattern</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#len\">len</a>, &amp;<a class=\"id\" href=\"#search\">search</a>, &amp;<a class=\"id\" href=\"#not\">not</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#search\">search</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pattern\">pattern</a>, <a class=\"id\" href=\"#search\">search</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#len\">len</a>+1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MATCH_FULL\">MATCH_FULL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#regex_match_full\">regex_match_full</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MATCH_FRONT_ONLY\">MATCH_FRONT_ONLY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#regex_match_front\">regex_match_front</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MATCH_MIDDLE_ONLY\">MATCH_MIDDLE_ONLY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#regex_match_middle\">regex_match_middle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MATCH_END_ONLY\">MATCH_END_ONLY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#regex_match_end\">regex_match_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#not\">not</a> ^= <a class=\"id\" href=\"#not\">not</a>;", 
"}", 
"", 
"<span class=\"comment\">/* return 1 if event matches, 0 otherwise (discard) */</span>", 
"int <a class=\"id\" href=\"#filter_match_preds\">filter_match_preds</a>(struct <a class=\"id\" href=\"#event_filter\">event_filter</a> *<a class=\"id\" href=\"#filter\">filter</a>, void *<a class=\"id\" href=\"#rec\">rec</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#match\">match</a>, <a class=\"id\" href=\"#top\">top</a> = 0, <a class=\"id\" href=\"#val1\">val1</a> = 0, <a class=\"id\" href=\"#val2\">val2</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#MAX_FILTER_PRED\">MAX_FILTER_PRED</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#filter_pred\">filter_pred</a> *<a class=\"id\" href=\"#pred\">pred</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#filter\">filter</a>-><a class=\"id\" href=\"#n_preds\">n_preds</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pred\">pred</a> = <a class=\"id\" href=\"#filter\">filter</a>-><a class=\"id\" href=\"#preds\">preds</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#pop_n\">pop_n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#pred\">pred</a>, <a class=\"id\" href=\"#rec\">rec</a>, <a class=\"id\" href=\"#val1\">val1</a>, <a class=\"id\" href=\"#val2\">val2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#top\">top</a>++] = <a class=\"id\" href=\"#match\">match</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#pop_n\">pop_n</a> &gt; <a class=\"id\" href=\"#top\">top</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val1\">val1</a> = <a class=\"id\" href=\"#stack\">stack</a>[--<a class=\"id\" href=\"#top\">top</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val2\">val2</a> = <a class=\"id\" href=\"#stack\">stack</a>[--<a class=\"id\" href=\"#top\">top</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#pred\">pred</a>-><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#pred\">pred</a>, <a class=\"id\" href=\"#rec\">rec</a>, <a class=\"id\" href=\"#val1\">val1</a>, <a class=\"id\" href=\"#val2\">val2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#top\">top</a>++] = <a class=\"id\" href=\"#match\">match</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#stack\">stack</a>[--<a class=\"id\" href=\"#top\">top</a>];", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#filter_match_preds\">filter_match_preds</a>);", 
"", 
"static void <a class=\"id\" href=\"#parse_error\">parse_error</a>(struct <a class=\"id\" href=\"#filter_parse_state\">filter_parse_state</a> *<a class=\"id\" href=\"#ps\">ps</a>, int <a class=\"id\" href=\"#err\">err</a>, int <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ps\">ps</a>-><a class=\"id\" href=\"#lasterr\">lasterr</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ps\">ps</a>-><a class=\"id\" href=\"#lasterr_pos\">lasterr_pos</a> = <a class=\"id\" href=\"#pos\">pos</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#remove_filter_string\">remove_filter_string</a>(struct <a class=\"id\" href=\"#event_filter\">event_filter</a> *<a class=\"id\" href=\"#filter\">filter</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#filter\">filter</a>-><a class=\"id\" href=\"#filter_string\">filter_string</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filter\">filter</a>-><a class=\"id\" href=\"#filter_string\">filter_string</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#replace_filter_string\">replace_filter_string</a>(struct <a class=\"id\" href=\"#event_filter\">event_filter</a> *<a class=\"id\" href=\"#filter\">filter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char *<a class=\"id\" href=\"#filter_string\">filter_string</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#filter\">filter</a>-><a class=\"id\" href=\"#filter_string\">filter_string</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filter\">filter</a>-><a class=\"id\" href=\"#filter_string\">filter_string</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#filter_string\">filter_string</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filter\">filter</a>-><a class=\"id\" href=\"#filter_string\">filter_string</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#append_filter_string\">append_filter_string</a>(struct <a class=\"id\" href=\"#event_filter\">event_filter</a> *<a class=\"id\" href=\"#filter\">filter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#string\">string</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#newlen\">newlen</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#new_filter_string\">new_filter_string</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#filter\">filter</a>-><a class=\"id\" href=\"#filter_string\">filter_string</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newlen\">newlen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#filter\">filter</a>-><a class=\"id\" href=\"#filter_string\">filter_string</a>) + <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#string\">string</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_filter_string\">new_filter_string</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#newlen\">newlen</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_filter_string\">new_filter_string</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#new_filter_string\">new_filter_string</a>, <a class=\"id\" href=\"#filter\">filter</a>-><a class=\"id\" href=\"#filter_string\">filter_string</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcat\">strcat</a>(<a class=\"id\" href=\"#new_filter_string\">new_filter_string</a>, <a class=\"id\" href=\"#string\">string</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#filter\">filter</a>-><a class=\"id\" href=\"#filter_string\">filter_string</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filter\">filter</a>-><a class=\"id\" href=\"#filter_string\">filter_string</a> = <a class=\"id\" href=\"#new_filter_string\">new_filter_string</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#append_filter_err\">append_filter_err</a>(struct <a class=\"id\" href=\"#filter_parse_state\">filter_parse_state</a> *<a class=\"id\" href=\"#ps\">ps</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#event_filter\">event_filter</a> *<a class=\"id\" href=\"#filter\">filter</a>)", 
];
xr_frag_insert('l/f8/dabc6ec4e44ca303c0269408c08fb52f4b966f.xr', __xr_tmp);
