var __xr_tmp = [
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * firmware_map_add_hotplug() - Adds a firmware mapping entry when we do</span>", 
"<span class=\"comment\"> * memory hotplug.</span>", 
"<span class=\"comment\"> * @start: Start of the memory range.</span>", 
"<span class=\"comment\"> * @end:   End of the memory range (inclusive).</span>", 
"<span class=\"comment\"> * @type:  Type of the memory range.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Adds a firmware mapping entry. This function is for memory hotplug, it is</span>", 
"<span class=\"comment\"> * similar to function firmware_map_add_early(). The only difference is that</span>", 
"<span class=\"comment\"> * it will create the syfs entry dynamically.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, or -ENOMEM if no memory could be allocated.</span>", 
"<span class=\"comment\"> **/</span>", 
"int <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#firmware_map_add_hotplug\">firmware_map_add_hotplug</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>, const char *<a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#firmware_map_add_entry\">firmware_map_add_entry</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* create the memmap entry */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_sysfs_fw_map_entry\">add_sysfs_fw_map_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * firmware_map_add_early() - Adds a firmware mapping entry.</span>", 
"<span class=\"comment\"> * @start: Start of the memory range.</span>", 
"<span class=\"comment\"> * @end:   End of the memory range (inclusive).</span>", 
"<span class=\"comment\"> * @type:  Type of the memory range.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Adds a firmware mapping entry. This function uses the bootmem allocator</span>", 
"<span class=\"comment\"> * for memory allocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * That function must be called before late_initcall.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, or -ENOMEM if no memory could be allocated.</span>", 
"<span class=\"comment\"> **/</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#firmware_map_add_early\">firmware_map_add_early</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>, const char *<a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(sizeof(struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#firmware_map_add_entry\">firmware_map_add_entry</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sysfs functions -------------------------------------------------------------</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#start_show\">start_show</a>(struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, \"0x%llx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#start\">start</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#end_show\">end_show</a>(struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, \"0x%llx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#end\">end</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#type_show\">type_show</a>(struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, \"%s\\n\", <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_memmap_attr\">to_memmap_attr</a>(<a class=\"id\" href=\"#_attr\">_attr</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#_attr\">_attr</a>, struct <a class=\"id\" href=\"#memmap_attribute\">memmap_attribute</a>, <a class=\"id\" href=\"#attr\">attr</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_memmap_entry\">to_memmap_entry</a>(<a class=\"id\" href=\"#obj\">obj</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#obj\">obj</a>, struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a>, <a class=\"id\" href=\"#kobj\">kobj</a>)", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#memmap_attr_show\">memmap_attr_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#to_memmap_entry\">to_memmap_entry</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memmap_attribute\">memmap_attribute</a> *<a class=\"id\" href=\"#memmap_attr\">memmap_attr</a> = <a class=\"id\" href=\"#to_memmap_attr\">to_memmap_attr</a>(<a class=\"id\" href=\"#attr\">attr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#memmap_attr\">memmap_attr</a>-><a class=\"id\" href=\"#show\">show</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialises stuff and adds the entries in the map_entries list to</span>", 
"<span class=\"comment\"> * sysfs. Important is that firmware_map_add() and firmware_map_add_early()</span>", 
"<span class=\"comment\"> * must be called before late_initcall. That's just because that function</span>", 
"<span class=\"comment\"> * is called as late_initcall() function, which means that if you call</span>", 
"<span class=\"comment\"> * firmware_map_add() or firmware_map_add_early() afterwards, the entries</span>", 
"<span class=\"comment\"> * are not added to sysfs.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#memmap_init\">memmap_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#firmware_map_entry\">firmware_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>, &amp;<a class=\"id\" href=\"#map_entries\">map_entries</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_sysfs_fw_map_entry\">add_sysfs_fw_map_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#memmap_init\">memmap_init</a>);", 
"", 
];
xr_frag_insert('l/f9/37aa298f8b3c1fa58b264d390839430e7c5bfc.xr', __xr_tmp);
