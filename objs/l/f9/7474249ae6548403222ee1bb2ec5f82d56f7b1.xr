var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_NETFILTER_H\">__LINUX_NETFILTER_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_NETFILTER_H\">__LINUX_NETFILTER_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#net\">net</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/if.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in6\">in6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Responses from hook functions. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_DROP\">NF_DROP</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_ACCEPT\">NF_ACCEPT</a> 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_STOLEN\">NF_STOLEN</a> 2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_QUEUE\">NF_QUEUE</a> 3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_REPEAT\">NF_REPEAT</a> 4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_STOP\">NF_STOP</a> 5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_MAX_VERDICT\">NF_MAX_VERDICT</a> <a class=\"id\" href=\"#NF_STOP\">NF_STOP</a>", 
"", 
"<span class=\"comment\">/* we overload the higher bits for encoding auxiliary data such as the queue</span>", 
"<span class=\"comment\"> * number. Not nice, but better than additional function arguments. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_VERDICT_MASK\">NF_VERDICT_MASK</a> 0x0000ffff", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_VERDICT_BITS\">NF_VERDICT_BITS</a> 16", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_VERDICT_QMASK\">NF_VERDICT_QMASK</a> 0xffff0000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_VERDICT_QBITS\">NF_VERDICT_QBITS</a> 16", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_QUEUE_NR\">NF_QUEUE_NR</a>(<a class=\"id\" href=\"#x\">x</a>) ((((<a class=\"id\" href=\"#x\">x</a>) << <a class=\"id\" href=\"#NF_VERDICT_BITS\">NF_VERDICT_BITS</a>) &amp; <a class=\"id\" href=\"#NF_VERDICT_QMASK\">NF_VERDICT_QMASK</a>) | <a class=\"id\" href=\"#NF_QUEUE\">NF_QUEUE</a>)", 
"", 
"<span class=\"comment\">/* only for userspace compatibility */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"<span class=\"comment\">/* Generic cache responses from hook functions.</span>", 
"<span class=\"comment\">   &lt;= 0x2000 is used for protocol-flags. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NFC_UNKNOWN\">NFC_UNKNOWN</a> 0x4000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NFC_ALTERED\">NFC_ALTERED</a> 0x8000", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"enum <a class=\"id\" href=\"#nf_inet_hooks\">nf_inet_hooks</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_INET_PRE_ROUTING\">NF_INET_PRE_ROUTING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_INET_LOCAL_IN\">NF_INET_LOCAL_IN</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_INET_FORWARD\">NF_INET_FORWARD</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_INET_LOCAL_OUT\">NF_INET_LOCAL_OUT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_INET_POST_ROUTING\">NF_INET_POST_ROUTING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_INET_NUMHOOKS\">NF_INET_NUMHOOKS</a>", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NFPROTO_UNSPEC\">NFPROTO_UNSPEC</a> =  0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NFPROTO_IPV4\">NFPROTO_IPV4</a>   =  2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NFPROTO_ARP\">NFPROTO_ARP</a>    =  3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NFPROTO_BRIDGE\">NFPROTO_BRIDGE</a> =  7,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NFPROTO_IPV6\">NFPROTO_IPV6</a>   = 10,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NFPROTO_DECNET\">NFPROTO_DECNET</a> = 12,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NFPROTO_NUMPROTO\">NFPROTO_NUMPROTO</a>,", 
"};", 
"", 
"union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#all\">all</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip6\">ip6</a>[4];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#in_addr\">in_addr</a><span class=\"ts\"/><a class=\"id\" href=\"#in\">in</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a><span class=\"ts\"/><a class=\"id\" href=\"#in6\">in6</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NETFILTER\">CONFIG_NETFILTER</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#nf_inet_addr_cmp\">nf_inet_addr_cmp</a>(const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#a1\">a1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#a2\">a2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#a1\">a1</a>-><a class=\"id\" href=\"#all\">all</a>[0] == <a class=\"id\" href=\"#a2\">a2</a>-><a class=\"id\" href=\"#all\">all</a>[0] &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#a1\">a1</a>-><a class=\"id\" href=\"#all\">all</a>[1] == <a class=\"id\" href=\"#a2\">a2</a>-><a class=\"id\" href=\"#all\">all</a>[1] &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#a1\">a1</a>-><a class=\"id\" href=\"#all\">all</a>[2] == <a class=\"id\" href=\"#a2\">a2</a>-><a class=\"id\" href=\"#all\">all</a>[2] &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#a1\">a1</a>-><a class=\"id\" href=\"#all\">all</a>[3] == <a class=\"id\" href=\"#a2\">a2</a>-><a class=\"id\" href=\"#all\">all</a>[3];", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#netfilter_init\">netfilter_init</a>(void);", 
"", 
"<span class=\"comment\">/* Largest hook number + 1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_MAX_HOOKS\">NF_MAX_HOOKS</a> 8", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>;", 
"", 
"typedef unsigned int <a class=\"id\" href=\"#nf_hookfn\">nf_hookfn</a>(unsigned int <a class=\"id\" href=\"#hooknum\">hooknum</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#in\">in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int (*<a class=\"id\" href=\"#okfn\">okfn</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *));", 
"", 
"struct <a class=\"id\" href=\"#nf_hook_ops\">nf_hook_ops</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* User fills in from here down. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_hookfn\">nf_hookfn</a> *<a class=\"id\" href=\"#hook\">hook</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#pf\">pf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hooknum\">hooknum</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Hooks are ordered in ascending priority. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#priority\">priority</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#nf_sockopt_ops\">nf_sockopt_ops</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#pf\">pf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Non-inclusive ranges: use 0/0/NULL to never get called. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#set_optmin\">set_optmin</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#set_optmax\">set_optmax</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#set\">set</a>)(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#optval\">optval</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user\">user</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#compat_set\">compat_set</a>)(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#optval\">optval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user\">user</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#get_optmin\">get_optmin</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#get_optmax\">get_optmax</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get\">get</a>)(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#optval\">optval</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user\">user</a>, int *<a class=\"id\" href=\"#len\">len</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#compat_get\">compat_get</a>)(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#optval\">optval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user\">user</a>, int *<a class=\"id\" href=\"#len\">len</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Use the module struct to lock set/get code in place */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Function to register/unregister hook points. */</span>", 
"int <a class=\"id\" href=\"#nf_register_hook\">nf_register_hook</a>(struct <a class=\"id\" href=\"#nf_hook_ops\">nf_hook_ops</a> *<a class=\"id\" href=\"#reg\">reg</a>);", 
"void <a class=\"id\" href=\"#nf_unregister_hook\">nf_unregister_hook</a>(struct <a class=\"id\" href=\"#nf_hook_ops\">nf_hook_ops</a> *<a class=\"id\" href=\"#reg\">reg</a>);", 
"int <a class=\"id\" href=\"#nf_register_hooks\">nf_register_hooks</a>(struct <a class=\"id\" href=\"#nf_hook_ops\">nf_hook_ops</a> *<a class=\"id\" href=\"#reg\">reg</a>, unsigned int <a class=\"id\" href=\"#n\">n</a>);", 
"void <a class=\"id\" href=\"#nf_unregister_hooks\">nf_unregister_hooks</a>(struct <a class=\"id\" href=\"#nf_hook_ops\">nf_hook_ops</a> *<a class=\"id\" href=\"#reg\">reg</a>, unsigned int <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"comment\">/* Functions to register get/setsockopt ranges (non-inclusive).  You</span>", 
"<span class=\"comment\">   need to check permissions yourself! */</span>", 
"int <a class=\"id\" href=\"#nf_register_sockopt\">nf_register_sockopt</a>(struct <a class=\"id\" href=\"#nf_sockopt_ops\">nf_sockopt_ops</a> *<a class=\"id\" href=\"#reg\">reg</a>);", 
"void <a class=\"id\" href=\"#nf_unregister_sockopt\">nf_unregister_sockopt</a>(struct <a class=\"id\" href=\"#nf_sockopt_ops\">nf_sockopt_ops</a> *<a class=\"id\" href=\"#reg\">reg</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"<span class=\"comment\">/* Sysctl registration */</span>", 
"extern struct <a class=\"id\" href=\"#ctl_path\">ctl_path</a> <a class=\"id\" href=\"#nf_net_netfilter_sysctl_path\">nf_net_netfilter_sysctl_path</a>[];", 
"extern struct <a class=\"id\" href=\"#ctl_path\">ctl_path</a> <a class=\"id\" href=\"#nf_net_ipv4_netfilter_sysctl_path\">nf_net_ipv4_netfilter_sysctl_path</a>[];", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SYSCTL */</span>", 
"", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#nf_hooks\">nf_hooks</a>[<a class=\"id\" href=\"#NFPROTO_NUMPROTO\">NFPROTO_NUMPROTO</a>][<a class=\"id\" href=\"#NF_MAX_HOOKS\">NF_MAX_HOOKS</a>];", 
"", 
"int <a class=\"id\" href=\"#nf_hook_slow\">nf_hook_slow</a>(<a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, unsigned int <a class=\"id\" href=\"#hook\">hook</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#indev\">indev</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#outdev\">outdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> int (*<a class=\"id\" href=\"#okfn\">okfn</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *), int <a class=\"id\" href=\"#thresh\">thresh</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>nf_hook_thresh - call a netfilter hook</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/></span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 1 if the hook has allowed the packet to pass.  The function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>okfn must be invoked by the caller in this case.  Any other return</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>value indicates the packet has been consumed by the hook.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#nf_hook_thresh\">nf_hook_thresh</a>(<a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, unsigned int <a class=\"id\" href=\"#hook\">hook</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#indev\">indev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#outdev\">outdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int (*<a class=\"id\" href=\"#okfn\">okfn</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *), int <a class=\"id\" href=\"#thresh\">thresh</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NETFILTER_DEBUG\">CONFIG_NETFILTER_DEBUG</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#nf_hooks\">nf_hooks</a>[<a class=\"id\" href=\"#pf\">pf</a>][<a class=\"id\" href=\"#hook\">hook</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nf_hook_slow\">nf_hook_slow</a>(<a class=\"id\" href=\"#pf\">pf</a>, <a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#indev\">indev</a>, <a class=\"id\" href=\"#outdev\">outdev</a>, <a class=\"id\" href=\"#okfn\">okfn</a>, <a class=\"id\" href=\"#thresh\">thresh</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#nf_hook\">nf_hook</a>(<a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, unsigned int <a class=\"id\" href=\"#hook\">hook</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#indev\">indev</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#outdev\">outdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int (*<a class=\"id\" href=\"#okfn\">okfn</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *))", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nf_hook_thresh\">nf_hook_thresh</a>(<a class=\"id\" href=\"#pf\">pf</a>, <a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#indev\">indev</a>, <a class=\"id\" href=\"#outdev\">outdev</a>, <a class=\"id\" href=\"#okfn\">okfn</a>, <a class=\"id\" href=\"#INT_MIN\">INT_MIN</a>);", 
"}", 
"                   ", 
"<span class=\"comment\">/* Activate hook; either okfn or kfree_skb called, unless a hook</span>", 
"<span class=\"comment\">   returns NF_STOLEN (in which case, it's up to the hook to deal with</span>", 
"<span class=\"comment\">   the consequences).</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Returns -ERRNO if packet dropped.  Zero means queued, stolen or</span>", 
"<span class=\"comment\">   accepted.</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"<span class=\"comment\">/* RR:</span>", 
"<span class=\"comment\">   &gt; I don't want nf_hook to return anything because people might forget</span>", 
"<span class=\"comment\">   &gt; about async and trust the return value to mean \"packet was ok\".</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   AK:</span>", 
"<span class=\"comment\">   Just document it clearly, then you can expect some sense from kernel</span>", 
"<span class=\"comment\">   coders :)</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#NF_HOOK_THRESH\">NF_HOOK_THRESH</a>(<a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, unsigned int <a class=\"id\" href=\"#hook\">hook</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/>       struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#in\">in</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/>       int (*<a class=\"id\" href=\"#okfn\">okfn</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *), int <a class=\"id\" href=\"#thresh\">thresh</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#nf_hook_thresh\">nf_hook_thresh</a>(<a class=\"id\" href=\"#pf\">pf</a>, <a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#okfn\">okfn</a>, <a class=\"id\" href=\"#thresh\">thresh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#okfn\">okfn</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#NF_HOOK_COND\">NF_HOOK_COND</a>(<a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, unsigned int <a class=\"id\" href=\"#hook\">hook</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/>     struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#in\">in</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/>     int (*<a class=\"id\" href=\"#okfn\">okfn</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *), <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cond\">cond</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cond\">cond</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#nf_hook_thresh\">nf_hook_thresh</a>(<a class=\"id\" href=\"#pf\">pf</a>, <a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#okfn\">okfn</a>, <a class=\"id\" href=\"#INT_MIN\">INT_MIN</a>) == 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#okfn\">okfn</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#NF_HOOK\">NF_HOOK</a>(<a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, unsigned int <a class=\"id\" href=\"#hook\">hook</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#in\">in</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#okfn\">okfn</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *))", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NF_HOOK_THRESH\">NF_HOOK_THRESH</a>(<a class=\"id\" href=\"#pf\">pf</a>, <a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#okfn\">okfn</a>, <a class=\"id\" href=\"#INT_MIN\">INT_MIN</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Call setsockopt() */</span>", 
"int <a class=\"id\" href=\"#nf_setsockopt\">nf_setsockopt</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, int <a class=\"id\" href=\"#optval\">optval</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#opt\">opt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"int <a class=\"id\" href=\"#nf_getsockopt\">nf_getsockopt</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, int <a class=\"id\" href=\"#optval\">optval</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#opt\">opt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  int *<a class=\"id\" href=\"#len\">len</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"int <a class=\"id\" href=\"#compat_nf_setsockopt\">compat_nf_setsockopt</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, int <a class=\"id\" href=\"#optval\">optval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#opt\">opt</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"int <a class=\"id\" href=\"#compat_nf_getsockopt\">compat_nf_getsockopt</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, int <a class=\"id\" href=\"#optval\">optval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#opt\">opt</a>, int *<a class=\"id\" href=\"#len\">len</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Call this before modifying an existing packet: ensures it is</span>", 
"<span class=\"comment\">   modifiable and linear to the point you care about (writable_len).</span>", 
"<span class=\"comment\">   Returns true or false. */</span>", 
"extern int <a class=\"id\" href=\"#skb_make_writable\">skb_make_writable</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#writable_len\">writable_len</a>);", 
"", 
"struct <a class=\"id\" href=\"#flowi\">flowi</a>;", 
"struct <a class=\"id\" href=\"#nf_queue_entry\">nf_queue_entry</a>;", 
"", 
"struct <a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a> {", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><a class=\"id\" href=\"#family\">family</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sum16\">__sum16</a><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#checksum\">checksum</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#hook\">hook</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#dataoff\">dataoff</a>, <a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#protocol\">protocol</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sum16\">__sum16</a><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#checksum_partial\">checksum_partial</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#hook\">hook</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#dataoff\">dataoff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#protocol\">protocol</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#route\">route</a>)(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> **<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#saveroute\">saveroute</a>)(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#nf_queue_entry\">nf_queue_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#reroute\">reroute</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#nf_queue_entry\">nf_queue_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#route_key_size\">route_key_size</a>;", 
"};", 
"", 
"extern const struct <a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a> *<a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a>[<a class=\"id\" href=\"#NFPROTO_NUMPROTO\">NFPROTO_NUMPROTO</a>];", 
"static <a class=\"id\" href=\"#inline\">inline</a> const struct <a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a> *<a class=\"id\" href=\"#nf_get_afinfo\">nf_get_afinfo</a>(unsigned short <a class=\"id\" href=\"#family\">family</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a>[<a class=\"id\" href=\"#family\">family</a>]);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__sum16\">__sum16</a>", 
"<a class=\"id\" href=\"#nf_checksum\">nf_checksum</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#hook\">hook</a>, unsigned int <a class=\"id\" href=\"#dataoff\">dataoff</a>,", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#protocol\">protocol</a>, unsigned short <a class=\"id\" href=\"#family\">family</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a> *<a class=\"id\" href=\"#afinfo\">afinfo</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sum16\">__sum16</a> <a class=\"id\" href=\"#csum\">csum</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#afinfo\">afinfo</a> = <a class=\"id\" href=\"#nf_get_afinfo\">nf_get_afinfo</a>(<a class=\"id\" href=\"#family\">family</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#afinfo\">afinfo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#checksum\">checksum</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#dataoff\">dataoff</a>, <a class=\"id\" href=\"#protocol\">protocol</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#csum\">csum</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__sum16\">__sum16</a>", 
"<a class=\"id\" href=\"#nf_checksum_partial\">nf_checksum_partial</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#hook\">hook</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#dataoff\">dataoff</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#protocol\">protocol</a>, unsigned short <a class=\"id\" href=\"#family\">family</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a> *<a class=\"id\" href=\"#afinfo\">afinfo</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sum16\">__sum16</a> <a class=\"id\" href=\"#csum\">csum</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#afinfo\">afinfo</a> = <a class=\"id\" href=\"#nf_get_afinfo\">nf_get_afinfo</a>(<a class=\"id\" href=\"#family\">family</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#afinfo\">afinfo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#afinfo\">afinfo</a>-><a class=\"id\" href=\"#checksum_partial\">checksum_partial</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#dataoff\">dataoff</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#csum\">csum</a>;", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#nf_register_afinfo\">nf_register_afinfo</a>(const struct <a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a> *<a class=\"id\" href=\"#afinfo\">afinfo</a>);", 
"extern void <a class=\"id\" href=\"#nf_unregister_afinfo\">nf_unregister_afinfo</a>(const struct <a class=\"id\" href=\"#nf_afinfo\">nf_afinfo</a> *<a class=\"id\" href=\"#afinfo\">afinfo</a>);", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#flow\">flow</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"extern void (*<a class=\"id\" href=\"#ip_nat_decode_session\">ip_nat_decode_session</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *, struct <a class=\"id\" href=\"#flowi\">flowi</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#nf_nat_decode_session\">nf_nat_decode_session</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#family\">family</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NF_NAT_NEEDED\">CONFIG_NF_NAT_NEEDED</a>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#decodefn\">decodefn</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *, struct <a class=\"id\" href=\"#flowi\">flowi</a> *);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#family\">family</a> == <a class=\"id\" href=\"#AF_INET\">AF_INET</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#decodefn\">decodefn</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#ip_nat_decode_session\">ip_nat_decode_session</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#decodefn\">decodefn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#decodefn\">decodefn</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"extern struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_net_netfilter\">proc_net_netfilter</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#else <span class=\"comment\">/* !CONFIG_NETFILTER */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_HOOK\">NF_HOOK</a>(<a class=\"id\" href=\"#pf\">pf</a>, <a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#indev\">indev</a>, <a class=\"id\" href=\"#outdev\">outdev</a>, <a class=\"id\" href=\"#okfn\">okfn</a>) (<a class=\"id\" href=\"#okfn\">okfn</a>)(<a class=\"id\" href=\"#skb\">skb</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NF_HOOK_COND\">NF_HOOK_COND</a>(<a class=\"id\" href=\"#pf\">pf</a>, <a class=\"id\" href=\"#hook\">hook</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#indev\">indev</a>, <a class=\"id\" href=\"#outdev\">outdev</a>, <a class=\"id\" href=\"#okfn\">okfn</a>, <a class=\"id\" href=\"#cond\">cond</a>) (<a class=\"id\" href=\"#okfn\">okfn</a>)(<a class=\"id\" href=\"#skb\">skb</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#nf_hook_thresh\">nf_hook_thresh</a>(<a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, unsigned int <a class=\"id\" href=\"#hook\">hook</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#indev\">indev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#outdev\">outdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int (*<a class=\"id\" href=\"#okfn\">okfn</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *), int <a class=\"id\" href=\"#thresh\">thresh</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#okfn\">okfn</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#nf_hook\">nf_hook</a>(<a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#pf\">pf</a>, unsigned int <a class=\"id\" href=\"#hook\">hook</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#indev\">indev</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#outdev\">outdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int (*<a class=\"id\" href=\"#okfn\">okfn</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *))", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"struct <a class=\"id\" href=\"#flowi\">flowi</a>;", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#nf_nat_decode_session\">nf_nat_decode_session</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#u_int8_t\">u_int8_t</a> <a class=\"id\" href=\"#family\">family</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/*CONFIG_NETFILTER*/</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK\">CONFIG_NF_CONNTRACK</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK_MODULE\">CONFIG_NF_CONNTRACK_MODULE</a>)", 
"extern void (*<a class=\"id\" href=\"#ip_ct_attach\">ip_ct_attach</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *);", 
"extern void <a class=\"id\" href=\"#nf_ct_attach\">nf_ct_attach</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *);", 
"extern void (*<a class=\"id\" href=\"#nf_ct_destroy\">nf_ct_destroy</a>)(struct <a class=\"id\" href=\"#nf_conntrack\">nf_conntrack</a> *);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#nf_ct_attach\">nf_ct_attach</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/*__KERNEL__*/</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/*__LINUX_NETFILTER_H*/</span>", 
];
xr_frag_insert('l/f9/7474249ae6548403222ee1bb2ec5f82d56f7b1.xr', __xr_tmp);
