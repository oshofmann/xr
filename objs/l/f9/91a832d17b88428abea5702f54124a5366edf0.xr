var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pud_none\">pud_none</a>(*<a class=\"id\" href=\"#pud\">pud</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd_none\">pmd_none</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#pte_offset_map\">pte_offset_map</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_present\">pte_present</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pte_page\">pte_page</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map a vmalloc()-space virtual address to the physical page frame number.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#vmalloc_to_pfn\">vmalloc_to_pfn</a>(const void *<a class=\"id\" href=\"#vmalloc_addr\">vmalloc_addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#vmalloc_addr\">vmalloc_addr</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vmalloc_to_pfn\">vmalloc_to_pfn</a>);", 
"", 
"", 
"<span class=\"comment\">/*** Global kva allocator ***/</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_LAZY_FREE\">VM_LAZY_FREE</a><span class=\"ts\"/>0x01", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_LAZY_FREEING\">VM_LAZY_FREEING</a><span class=\"ts\"/>0x02", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VM_VM_AREA\">VM_VM_AREA</a><span class=\"ts\"/>0x04", 
"", 
"struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#va_start\">va_start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#va_end\">va_end</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> <a class=\"id\" href=\"#rb_node\">rb_node</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* address sorted rbtree */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* address sorted list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#purge_list\">purge_list</a>;<span class=\"ts\"/><span class=\"comment\">/* \"lazy purge\" list */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"static struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#vmap_area_root\">vmap_area_root</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>;", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#vmap_area_list\">vmap_area_list</a>);", 
"static unsigned long <a class=\"id\" href=\"#vmap_area_pcpu_hole\">vmap_area_pcpu_hole</a>;", 
"", 
"static struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#__find_vmap_area\">__find_vmap_area</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#vmap_area_root\">vmap_area_root</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a>, <a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#addr\">addr</a> &gt; <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__insert_vmap_area\">__insert_vmap_area</a>(struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#vmap_area_root\">vmap_area_root</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a>, <a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a> &lt; <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#va_end\">va_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a> &gt; <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#va_start\">va_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>, &amp;<a class=\"id\" href=\"#vmap_area_root\">vmap_area_root</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* address-sort this list so it is usable like the vmlist */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#rb_prev\">rb_prev</a>(&amp;<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a>, <a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#vmap_area_list\">vmap_area_list</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#purge_vmap_area_lazy\">purge_vmap_area_lazy</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a region of KVA of the specified size and alignment, within the</span>", 
"<span class=\"comment\"> * vstart and vend.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#alloc_vmap_area\">alloc_vmap_area</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vstart\">vstart</a>, unsigned long <a class=\"id\" href=\"#vend\">vend</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#purged\">purged</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#size\">size</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(sizeof(struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#va\">va</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#vstart\">vstart</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a> - 1 &lt; <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#overflow\">overflow</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX: could have a last_hole cache */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#vmap_area_root\">vmap_area_root</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a>, <a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#va_end\">va_end</a> >= <a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#first\">first</a> && <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#va_start\">va_start</a> &lt; <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#va_end\">va_end</a> &lt; <a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a>, <a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#va_start\">va_start</a> && <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#vend\">vend</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#va_end\">va_end</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a> - 1 &lt; <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#overflow\">overflow</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a>, <a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#vend\">vend</a>) {", 
"<a class=\"id\" href=\"#overflow\">overflow</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#purged\">purged</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#purge_vmap_area_lazy\">purge_vmap_area_lazy</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#purged\">purged</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"vmap allocation for size %lu failed: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"use vmalloc=<size> to increase size.\\n\", <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EBUSY\">EBUSY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#addr\">addr</a> &amp; (<a class=\"id\" href=\"#align\">align</a>-1));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__insert_vmap_area\">__insert_vmap_area</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#va\">va</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rcu_free_va\">rcu_free_va</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__free_vmap_area\">__free_vmap_area</a>(struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#RB_EMPTY_NODE\">RB_EMPTY_NODE</a>(&amp;<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>, &amp;<a class=\"id\" href=\"#vmap_area_root\">vmap_area_root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_CLEAR_NODE\">RB_CLEAR_NODE</a>(&amp;<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Track the highest possible candidate for pcpu area</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation.  Areas outside of vmalloc area can be returned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here too, consider only end addresses which fall inside</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * vmalloc area proper.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a> &gt; <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a> && <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a> <= <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmap_area_pcpu_hole\">vmap_area_pcpu_hole</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#vmap_area_pcpu_hole\">vmap_area_pcpu_hole</a>, <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#rcu_free_va\">rcu_free_va</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free a region of KVA allocated by alloc_vmap_area</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_vmap_area\">free_vmap_area</a>(struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_vmap_area\">__free_vmap_area</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clear the pagetable entries of a given vmap_area</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#unmap_vmap_area\">unmap_vmap_area</a>(struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vunmap_page_range\">vunmap_page_range</a>(<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>, <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#vmap_debug_free_range\">vmap_debug_free_range</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unmap page tables and force a TLB flush immediately if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CONFIG_DEBUG_PAGEALLOC is set. This catches use after free</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bugs similarly to those in linear kernel virtual address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * space after a page has been freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * All the lazy freeing logic is still retained, in order to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * minimise intrusiveness of this debugging feature.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is going to be *slow* (linear kernel virtual address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * debugging doesn't do a broadcast TLB flush so it is a lot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * faster).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PAGEALLOC\">CONFIG_DEBUG_PAGEALLOC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vunmap_page_range\">vunmap_page_range</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_kernel_range\">flush_tlb_kernel_range</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lazy_max_pages is the maximum amount of virtual address space we gather up</span>", 
"<span class=\"comment\"> * before attempting to purge with a TLB flush.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is a tradeoff here: a larger number will cover more kernel page tables</span>", 
"<span class=\"comment\"> * and take slightly longer to purge, but it will linearly reduce the number of</span>", 
"<span class=\"comment\"> * global TLB flushes that must be performed. It would seem natural to scale</span>", 
"<span class=\"comment\"> * this number up linearly with the number of CPUs (because vmapping activity</span>", 
"<span class=\"comment\"> * could also scale linearly with the number of CPUs), however it is likely</span>", 
"<span class=\"comment\"> * that in practice, workloads might be constrained in other ways that mean</span>", 
"<span class=\"comment\"> * vmap activity will not scale linearly with CPUs. Also, I want to be</span>", 
"<span class=\"comment\"> * conservative and not introduce a big latency on huge systems, so go with</span>", 
"<span class=\"comment\"> * a less aggressive log scale. It will still be an improvement over the old</span>", 
"<span class=\"comment\"> * code, and it will be simple to change the scale factor if we find that it</span>", 
"<span class=\"comment\"> * becomes a problem on bigger systems.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#lazy_max_pages\">lazy_max_pages</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#log\">log</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vmap_lazy_unmap\">vmap_lazy_unmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#log\">log</a> = <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>());", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#log\">log</a> * (32UL * 1024 * 1024 / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#vmap_lazy_nr\">vmap_lazy_nr</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"", 
"<span class=\"comment\">/* for per-CPU blocks */</span>", 
"static void <a class=\"id\" href=\"#purge_fragmented_blocks_allcpus\">purge_fragmented_blocks_allcpus</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Purges all lazily-freed vmap areas.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If sync is 0 then don't purge if there is already a purge in progress.</span>", 
"<span class=\"comment\"> * If force_flush is 1, then flush kernel TLBs between *start and *end even</span>", 
"<span class=\"comment\"> * if we found no lazy vmap areas to unmap (callers can use this to optimise</span>", 
"<span class=\"comment\"> * their own TLB flushing).</span>", 
"<span class=\"comment\"> * Returns with *start = min(*start, lowest purged address)</span>", 
"<span class=\"comment\"> *              *end = max(*end, highest purged address)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__purge_vmap_area_lazy\">__purge_vmap_area_lazy</a>(unsigned long *<a class=\"id\" href=\"#start\">start</a>, unsigned long *<a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#sync\">sync</a>, int <a class=\"id\" href=\"#force_flush\">force_flush</a>)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#purge_lock\">purge_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#valist\">valist</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#n_va\">n_va</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If sync is 0 but force_flush is 1, we'll go sync anyway but callers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should not expect such behaviour. This just simplifies locking for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the case that isn't actually used at the moment anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sync\">sync</a> && !<a class=\"id\" href=\"#force_flush\">force_flush</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#spin_trylock\">spin_trylock</a>(&amp;<a class=\"id\" href=\"#purge_lock\">purge_lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#purge_lock\">purge_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sync\">sync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#purge_fragmented_blocks_allcpus\">purge_fragmented_blocks_allcpus</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#va\">va</a>, &amp;<a class=\"id\" href=\"#vmap_area_list\">vmap_area_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_LAZY_FREE\">VM_LAZY_FREE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a> &lt; *<a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a> &gt; *<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> += (<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a> - <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_vmap_area\">unmap_vmap_area</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#purge_list\">purge_list</a>, &amp;<a class=\"id\" href=\"#valist\">valist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#VM_LAZY_FREEING\">VM_LAZY_FREEING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#VM_LAZY_FREE\">VM_LAZY_FREE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#vmap_lazy_nr\">vmap_lazy_nr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> || <a class=\"id\" href=\"#force_flush\">force_flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_kernel_range\">flush_tlb_kernel_range</a>(*<a class=\"id\" href=\"#start\">start</a>, *<a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#va\">va</a>, <a class=\"id\" href=\"#n_va\">n_va</a>, &amp;<a class=\"id\" href=\"#valist\">valist</a>, <a class=\"id\" href=\"#purge_list\">purge_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_vmap_area\">__free_vmap_area</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#purge_lock\">purge_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kick off a purge of the outstanding lazy areas. Don't bother if somebody</span>", 
"<span class=\"comment\"> * is already purging.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#try_purge_vmap_area_lazy\">try_purge_vmap_area_lazy</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>, <a class=\"id\" href=\"#end\">end</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__purge_vmap_area_lazy\">__purge_vmap_area_lazy</a>(&amp;<a class=\"id\" href=\"#start\">start</a>, &amp;<a class=\"id\" href=\"#end\">end</a>, 0, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kick off a purge of the outstanding lazy areas.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#purge_vmap_area_lazy\">purge_vmap_area_lazy</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>, <a class=\"id\" href=\"#end\">end</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__purge_vmap_area_lazy\">__purge_vmap_area_lazy</a>(&amp;<a class=\"id\" href=\"#start\">start</a>, &amp;<a class=\"id\" href=\"#end\">end</a>, 1, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free and unmap a vmap area, caller ensuring flush_cache_vunmap had been</span>", 
"<span class=\"comment\"> * called for the correct range previously.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_unmap_vmap_area_noflush\">free_unmap_vmap_area_noflush</a>(struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#VM_LAZY_FREE\">VM_LAZY_FREE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>((<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a> - <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, &amp;<a class=\"id\" href=\"#vmap_lazy_nr\">vmap_lazy_nr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#vmap_lazy_nr\">vmap_lazy_nr</a>) &gt; <a class=\"id\" href=\"#lazy_max_pages\">lazy_max_pages</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_purge_vmap_area_lazy\">try_purge_vmap_area_lazy</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free and unmap a vmap area</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_unmap_vmap_area\">free_unmap_vmap_area</a>(struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_vunmap\">flush_cache_vunmap</a>(<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>, <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_unmap_vmap_area_noflush\">free_unmap_vmap_area_noflush</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#find_vmap_area\">find_vmap_area</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#__find_vmap_area\">__find_vmap_area</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vmap_area_lock\">vmap_area_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#va\">va</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_unmap_vmap_area_addr\">free_unmap_vmap_area_addr</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#find_vmap_area\">find_vmap_area</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_unmap_vmap_area\">free_unmap_vmap_area</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*** Per cpu kva allocator ***/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vmap space is limited especially on 32 bit architectures. Ensure there is</span>", 
"<span class=\"comment\"> * room for at least 16 percpu vmap blocks per CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If we had a constant VMALLOC_START and VMALLOC_END, we'd like to be able</span>", 
"<span class=\"comment\"> * to #define VMALLOC_SPACE<span class=\"ts\"/><span class=\"ts\"/>(VMALLOC_END-VMALLOC_START). Guess</span>", 
"<span class=\"comment\"> * instead (we just need a rough idea)</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMALLOC_SPACE\">VMALLOC_SPACE</a><span class=\"ts\"/><span class=\"ts\"/>(128UL*1024*1024)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMALLOC_SPACE\">VMALLOC_SPACE</a><span class=\"ts\"/><span class=\"ts\"/>(128UL*1024*1024*1024)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMALLOC_PAGES\">VMALLOC_PAGES</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#VMALLOC_SPACE\">VMALLOC_SPACE</a> / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMAP_MAX_ALLOC\">VMAP_MAX_ALLOC</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a><span class=\"ts\"/><span class=\"comment\">/* 256K with 4K pages */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMAP_BBMAP_BITS_MAX\">VMAP_BBMAP_BITS_MAX</a><span class=\"ts\"/>1024<span class=\"ts\"/><span class=\"comment\">/* 4MB with 4K pages */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMAP_BBMAP_BITS_MIN\">VMAP_BBMAP_BITS_MIN</a><span class=\"ts\"/>(<a class=\"id\" href=\"#VMAP_MAX_ALLOC\">VMAP_MAX_ALLOC</a>*2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMAP_MIN\">VMAP_MIN</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>) &lt; (<a class=\"id\" href=\"#y\">y</a>) ? (<a class=\"id\" href=\"#x\">x</a>) : (<a class=\"id\" href=\"#y\">y</a>)) <span class=\"comment\">/* can't use min() */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMAP_MAX\">VMAP_MAX</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#x\">x</a>) &gt; (<a class=\"id\" href=\"#y\">y</a>) ? (<a class=\"id\" href=\"#x\">x</a>) : (<a class=\"id\" href=\"#y\">y</a>)) <span class=\"comment\">/* can't use max() */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VMAP_MIN\">VMAP_MIN</a>(<a class=\"id\" href=\"#VMAP_BBMAP_BITS_MAX\">VMAP_BBMAP_BITS_MAX</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VMAP_MAX\">VMAP_MAX</a>(<a class=\"id\" href=\"#VMAP_BBMAP_BITS_MIN\">VMAP_BBMAP_BITS_MIN</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VMALLOC_PAGES\">VMALLOC_PAGES</a> / <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> / 16))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMAP_BLOCK_SIZE\">VMAP_BLOCK_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#vmap_initialized\">vmap_initialized</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"struct <a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#free\">free</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a> *<a class=\"id\" href=\"#vbq\">vbq</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#free\">free</a>, <a class=\"id\" href=\"#dirty\">dirty</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#alloc_map\">alloc_map</a>, <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#dirty_map\">dirty_map</a>, <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#free_list\">free_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#purge\">purge</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Queue of free and dirty vmap blocks, for allocation and flushing purposes */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a>, <a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Radix tree of vmap blocks, indexed by address, to quickly find a vmap block</span>", 
"<span class=\"comment\"> * in the free path. Could get rid of this if we change the API to return a</span>", 
"<span class=\"comment\"> * \"cookie\" from alloc, to be passed to free. But no big deal yet.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#vmap_block_tree_lock\">vmap_block_tree_lock</a>);", 
"static <a class=\"id\" href=\"#RADIX_TREE\">RADIX_TREE</a>(<a class=\"id\" href=\"#vmap_block_tree\">vmap_block_tree</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We should probably have a fallback mechanism to allocate virtual memory</span>", 
"<span class=\"comment\"> * out of partially filled vmap blocks. However vmap block sizing should be</span>", 
"<span class=\"comment\"> * fairly reasonable according to the vmalloc size, so it shouldn't be a</span>", 
"<span class=\"comment\"> * big problem.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static unsigned long <a class=\"id\" href=\"#addr_to_vb_idx\">addr_to_vb_idx</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> -= <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a> &amp; ~(<a class=\"id\" href=\"#VMAP_BLOCK_SIZE\">VMAP_BLOCK_SIZE</a>-1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> /= <a class=\"id\" href=\"#VMAP_BLOCK_SIZE\">VMAP_BLOCK_SIZE</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a> *<a class=\"id\" href=\"#new_vmap_block\">new_vmap_block</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a> *<a class=\"id\" href=\"#vbq\">vbq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a> *<a class=\"id\" href=\"#vb\">vb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vb_idx\">vb_idx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(sizeof(struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#vb\">vb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#alloc_vmap_area\">alloc_vmap_area</a>(<a class=\"id\" href=\"#VMAP_BLOCK_SIZE\">VMAP_BLOCK_SIZE</a>, <a class=\"id\" href=\"#VMAP_BLOCK_SIZE\">VMAP_BLOCK_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>, <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#va\">va</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vb\">vb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_CAST\">ERR_CAST</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#err\">err</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vb\">vb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_vmap_area\">free_vmap_area</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty\">dirty</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#alloc_map\">alloc_map</a>, <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty_map\">dirty_map</a>, <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free_list\">free_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb_idx\">vb_idx</a> = <a class=\"id\" href=\"#addr_to_vb_idx\">addr_to_vb_idx</a>(<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vmap_block_tree_lock\">vmap_block_tree_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#radix_tree_insert\">radix_tree_insert</a>(&amp;<a class=\"id\" href=\"#vmap_block_tree\">vmap_block_tree</a>, <a class=\"id\" href=\"#vb_idx\">vb_idx</a>, <a class=\"id\" href=\"#vb\">vb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vmap_block_tree_lock\">vmap_block_tree_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_preload_end\">radix_tree_preload_end</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vbq\">vbq</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#vbq\">vbq</a> = <a class=\"id\" href=\"#vbq\">vbq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vbq\">vbq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free_list\">free_list</a>, &amp;<a class=\"id\" href=\"#vbq\">vbq</a>-><a class=\"id\" href=\"#free\">free</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vbq\">vbq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vb\">vb</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rcu_free_vb\">rcu_free_vb</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a> *<a class=\"id\" href=\"#vb\">vb</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vb\">vb</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_vmap_block\">free_vmap_block</a>(struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a> *<a class=\"id\" href=\"#vb\">vb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vb_idx\">vb_idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb_idx\">vb_idx</a> = <a class=\"id\" href=\"#addr_to_vb_idx\">addr_to_vb_idx</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vmap_block_tree_lock\">vmap_block_tree_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#radix_tree_delete\">radix_tree_delete</a>(&amp;<a class=\"id\" href=\"#vmap_block_tree\">vmap_block_tree</a>, <a class=\"id\" href=\"#vb_idx\">vb_idx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vmap_block_tree_lock\">vmap_block_tree_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#tmp\">tmp</a> != <a class=\"id\" href=\"#vb\">vb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_unmap_vmap_area_noflush\">free_unmap_vmap_area_noflush</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#rcu_free_vb\">rcu_free_vb</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#purge_fragmented_blocks\">purge_fragmented_blocks</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#purge\">purge</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a> *<a class=\"id\" href=\"#vb\">vb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a> *<a class=\"id\" href=\"#n_vb\">n_vb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a> *<a class=\"id\" href=\"#vbq\">vbq</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#vb\">vb</a>, &amp;<a class=\"id\" href=\"#vbq\">vbq</a>-><a class=\"id\" href=\"#free\">free</a>, <a class=\"id\" href=\"#free_list\">free_list</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free\">free</a> + <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty\">dirty</a> == <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a> && <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty\">dirty</a> != <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free\">free</a> + <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty\">dirty</a> == <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a> && <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty\">dirty</a> != <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free\">free</a> = 0; <span class=\"comment\">/* prevent further allocs after releasing lock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty\">dirty</a> = <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>; <span class=\"comment\">/* prevent purging it again */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_fill\">bitmap_fill</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#alloc_map\">alloc_map</a>, <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_fill\">bitmap_fill</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty_map\">dirty_map</a>, <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vbq\">vbq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vbq\">vbq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#purge\">purge</a>, &amp;<a class=\"id\" href=\"#purge\">purge</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#vb\">vb</a>, <a class=\"id\" href=\"#n_vb\">n_vb</a>, &amp;<a class=\"id\" href=\"#purge\">purge</a>, <a class=\"id\" href=\"#purge\">purge</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#purge\">purge</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_vmap_block\">free_vmap_block</a>(<a class=\"id\" href=\"#vb\">vb</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#purge_fragmented_blocks_thiscpu\">purge_fragmented_blocks_thiscpu</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#purge_fragmented_blocks\">purge_fragmented_blocks</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"}", 
"", 
"static void <a class=\"id\" href=\"#purge_fragmented_blocks_allcpus\">purge_fragmented_blocks_allcpus</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#purge_fragmented_blocks\">purge_fragmented_blocks</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#vb_alloc\">vb_alloc</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a> *<a class=\"id\" href=\"#vbq\">vbq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a> *<a class=\"id\" href=\"#vb\">vb</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#purge\">purge</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#size\">size</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>*<a class=\"id\" href=\"#VMAP_MAX_ALLOC\">VMAP_MAX_ALLOC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vbq\">vbq</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#vb\">vb</a>, &amp;<a class=\"id\" href=\"#vbq\">vbq</a>-><a class=\"id\" href=\"#free\">free</a>, <a class=\"id\" href=\"#free_list\">free_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free\">free</a> &lt; 1UL << <a class=\"id\" href=\"#order\">order</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#bitmap_find_free_region\">bitmap_find_free_region</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#alloc_map\">alloc_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free\">free</a> + <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty\">dirty</a> == <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fragmented and no outstanding allocations */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty\">dirty</a> != <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#purge\">purge</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a> + (<a class=\"id\" href=\"#i\">i</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#addr_to_vb_idx\">addr_to_vb_idx</a>(<a class=\"id\" href=\"#addr\">addr</a>) !=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr_to_vb_idx\">addr_to_vb_idx</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free\">free</a> -= 1UL << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free\">free</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vbq\">vbq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vbq\">vbq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<a class=\"id\" href=\"#next\">next</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#purge\">purge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#purge_fragmented_blocks_thiscpu\">purge_fragmented_blocks_thiscpu</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a> = <a class=\"id\" href=\"#new_vmap_block\">new_vmap_block</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#vb\">vb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#vb\">vb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (void *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#vb_free\">vb_free</a>(const void *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vb_idx\">vb_idx</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a> *<a class=\"id\" href=\"#vb\">vb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#size\">size</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>*<a class=\"id\" href=\"#VMAP_MAX_ALLOC\">VMAP_MAX_ALLOC</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_vunmap\">flush_cache_vunmap</a>((unsigned long)<a class=\"id\" href=\"#addr\">addr</a>, (unsigned long)<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (unsigned long)<a class=\"id\" href=\"#addr\">addr</a> &amp; (<a class=\"id\" href=\"#VMAP_BLOCK_SIZE\">VMAP_BLOCK_SIZE</a> - 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb_idx\">vb_idx</a> = <a class=\"id\" href=\"#addr_to_vb_idx\">addr_to_vb_idx</a>((unsigned long)<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a> = <a class=\"id\" href=\"#radix_tree_lookup\">radix_tree_lookup</a>(&amp;<a class=\"id\" href=\"#vmap_block_tree\">vmap_block_tree</a>, <a class=\"id\" href=\"#vb_idx\">vb_idx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#vb\">vb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bitmap_allocate_region\">bitmap_allocate_region</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty_map\">dirty_map</a>, <a class=\"id\" href=\"#offset\">offset</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#order\">order</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty\">dirty</a> += 1UL << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty\">dirty</a> == <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#free\">free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_vmap_block\">free_vmap_block</a>(<a class=\"id\" href=\"#vb\">vb</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vm_unmap_aliases - unmap outstanding lazy aliases in the vmap layer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The vmap/vmalloc layer lazily flushes kernel virtual mappings primarily</span>", 
"<span class=\"comment\"> * to amortize TLB flushing overheads. What this means is that any page you</span>", 
"<span class=\"comment\"> * have now, may, in a former life, have been mapped into kernel virtual</span>", 
"<span class=\"comment\"> * address by the vmap layer and so there might be some CPUs with TLB entries</span>", 
"<span class=\"comment\"> * still referencing that page (additional to the regular 1:1 kernel mapping).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * vm_unmap_aliases flushes all such lazy mappings. After it returns, we can</span>", 
"<span class=\"comment\"> * be sure that none of the pages we have control over will have any aliases</span>", 
"<span class=\"comment\"> * from the vmap layer.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#vm_unmap_aliases\">vm_unmap_aliases</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>, <a class=\"id\" href=\"#end\">end</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flush\">flush</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#vmap_initialized\">vmap_initialized</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a> *<a class=\"id\" href=\"#vbq\">vbq</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block\">vmap_block</a> *<a class=\"id\" href=\"#vb\">vb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#vb\">vb</a>, &amp;<a class=\"id\" href=\"#vbq\">vbq</a>-><a class=\"id\" href=\"#free\">free</a>, <a class=\"id\" href=\"#free_list\">free_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty_map\">dirty_map</a>, <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#e\">e</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty_map\">dirty_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a> + (<a class=\"id\" href=\"#i\">i</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a> + (<a class=\"id\" href=\"#j\">j</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vunmap_page_range\">vunmap_page_range</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#e\">e</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush\">flush</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> &lt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#e\">e</a> &gt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#e\">e</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#dirty_map\">dirty_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VMAP_BBMAP_BITS\">VMAP_BBMAP_BITS</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vb\">vb</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__purge_vmap_area_lazy\">__purge_vmap_area_lazy</a>(&amp;<a class=\"id\" href=\"#start\">start</a>, &amp;<a class=\"id\" href=\"#end\">end</a>, 1, <a class=\"id\" href=\"#flush\">flush</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#vm_unmap_aliases\">vm_unmap_aliases</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vm_unmap_ram - unmap linear kernel address space set up by vm_map_ram</span>", 
"<span class=\"comment\"> * @mem: the pointer returned by vm_map_ram</span>", 
"<span class=\"comment\"> * @count: the count passed to that vm_map_ram call (cannot unmap partial)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#vm_unmap_ram\">vm_unmap_ram</a>(const void *<a class=\"id\" href=\"#mem\">mem</a>, unsigned int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#count\">count</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#mem\">mem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#addr\">addr</a> &gt; <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#addr\">addr</a> &amp; (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-1));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_locks_freed\">debug_check_no_locks_freed</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmap_debug_free_range\">vmap_debug_free_range</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a>+<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#count\">count</a> <= <a class=\"id\" href=\"#VMAP_MAX_ALLOC\">VMAP_MAX_ALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vb_free\">vb_free</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_unmap_vmap_area_addr\">free_unmap_vmap_area_addr</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vm_unmap_ram\">vm_unmap_ram</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vm_map_ram - map pages linearly into kernel virtual address (vmalloc space)</span>", 
"<span class=\"comment\"> * @pages: an array of pointers to the pages to be mapped</span>", 
"<span class=\"comment\"> * @count: number of pages</span>", 
"<span class=\"comment\"> * @node: prefer to allocate data structures on this node</span>", 
"<span class=\"comment\"> * @prot: memory protection to use. PAGE_KERNEL for regular RAM</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: a pointer to the address that has been mapped, or %NULL on failure</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#vm_map_ram\">vm_map_ram</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, unsigned int <a class=\"id\" href=\"#count\">count</a>, int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#count\">count</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#mem\">mem</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#count\">count</a> <= <a class=\"id\" href=\"#VMAP_MAX_ALLOC\">VMAP_MAX_ALLOC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#vb_alloc\">vb_alloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#mem\">mem</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#alloc_vmap_area\">alloc_vmap_area</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>, <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#va\">va</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = (void *)<a class=\"id\" href=\"#addr\">addr</a>;", 
];
xr_frag_insert('l/f9/91a832d17b88428abea5702f54124a5366edf0.xr', __xr_tmp);
