var __xr_tmp = [
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pkt_debugfs_root\">pkt_debugfs_root</a> = <a class=\"id\" href=\"#debugfs_create_dir\">debugfs_create_dir</a>(<a class=\"id\" href=\"#DRIVER_NAME\">DRIVER_NAME</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#pkt_debugfs_root\">pkt_debugfs_root</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt_debugfs_root\">pkt_debugfs_root</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pkt_debugfs_cleanup\">pkt_debugfs_cleanup</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pkt_debugfs_root\">pkt_debugfs_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(<a class=\"id\" href=\"#pkt_debugfs_root\">pkt_debugfs_root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pkt_debugfs_root\">pkt_debugfs_root</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* ----------------------------------------------------------*/</span>", 
"", 
"", 
"static void <a class=\"id\" href=\"#pkt_bio_finished\">pkt_bio_finished</a>(struct <a class=\"id\" href=\"#pktcdvd_device\">pktcdvd_device</a> *<a class=\"id\" href=\"#pd\">pd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#cdrw\">cdrw</a>.<a class=\"id\" href=\"#pending_bios\">pending_bios</a>) <= 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#cdrw\">cdrw</a>.<a class=\"id\" href=\"#pending_bios\">pending_bios</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(<a class=\"id\" href=\"#DRIVER_NAME\">DRIVER_NAME</a>\": queue empty\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#attention\">attention</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#wqueue\">wqueue</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pkt_bio_destructor\">pkt_bio_destructor</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#pkt_bio_alloc\">pkt_bio_alloc</a>(int <a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvl\">bvl</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#bio\">bio</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_bio\">no_bio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_init\">bio_init</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bvl\">bvl</a> = <a class=\"id\" href=\"#kcalloc\">kcalloc</a>(<a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a>, sizeof(struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bvl\">bvl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_bvl\">no_bvl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_max_vecs\">bi_max_vecs</a> = <a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a> = <a class=\"id\" href=\"#bvl\">bvl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_destructor\">bi_destructor</a> = <a class=\"id\" href=\"#pkt_bio_destructor\">pkt_bio_destructor</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
" <a class=\"id\" href=\"#no_bvl\">no_bvl</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
" <a class=\"id\" href=\"#no_bio\">no_bio</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a packet_data struct</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#packet_data\">packet_data</a> *<a class=\"id\" href=\"#pkt_alloc_packet_data\">pkt_alloc_packet_data</a>(int <a class=\"id\" href=\"#frames\">frames</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#packet_data\">packet_data</a> *<a class=\"id\" href=\"#pkt\">pkt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#packet_data\">packet_data</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pkt\">pkt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_pkt\">no_pkt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#frames\">frames</a> = <a class=\"id\" href=\"#frames\">frames</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#w_bio\">w_bio</a> = <a class=\"id\" href=\"#pkt_bio_alloc\">pkt_bio_alloc</a>(<a class=\"id\" href=\"#frames\">frames</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#w_bio\">w_bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_bio\">no_bio</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#frames\">frames</a> / <a class=\"id\" href=\"#FRAMES_PER_PAGE\">FRAMES_PER_PAGE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#alloc_page\">alloc_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>|<a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_page\">no_page</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_list_init\">bio_list_init</a>(&amp;<a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#orig_bios\">orig_bios</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#frames\">frames</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#pkt_bio_alloc\">pkt_bio_alloc</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_rd_bio\">no_rd_bio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#r_bios\">r_bios</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pkt\">pkt</a>;", 
"", 
"<a class=\"id\" href=\"#no_rd_bio\">no_rd_bio</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#frames\">frames</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#r_bios\">r_bios</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#no_page\">no_page</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#frames\">frames</a> / <a class=\"id\" href=\"#FRAMES_PER_PAGE\">FRAMES_PER_PAGE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#w_bio\">w_bio</a>);", 
"<a class=\"id\" href=\"#no_bio\">no_bio</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pkt\">pkt</a>);", 
"<a class=\"id\" href=\"#no_pkt\">no_pkt</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free a packet_data struct</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pkt_free_packet_data\">pkt_free_packet_data</a>(struct <a class=\"id\" href=\"#packet_data\">packet_data</a> *<a class=\"id\" href=\"#pkt\">pkt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#frames\">frames</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#r_bios\">r_bios</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#frames\">frames</a> / <a class=\"id\" href=\"#FRAMES_PER_PAGE\">FRAMES_PER_PAGE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#w_bio\">w_bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pkt\">pkt</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pkt_shrink_pktlist\">pkt_shrink_pktlist</a>(struct <a class=\"id\" href=\"#pktcdvd_device\">pktcdvd_device</a> *<a class=\"id\" href=\"#pd\">pd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#packet_data\">packet_data</a> *<a class=\"id\" href=\"#pkt\">pkt</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#cdrw\">cdrw</a>.<a class=\"id\" href=\"#pkt_active_list\">pkt_active_list</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#pkt\">pkt</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#cdrw\">cdrw</a>.<a class=\"id\" href=\"#pkt_free_list\">pkt_free_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt_free_packet_data\">pkt_free_packet_data</a>(<a class=\"id\" href=\"#pkt\">pkt</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#cdrw\">cdrw</a>.<a class=\"id\" href=\"#pkt_free_list\">pkt_free_list</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pkt_grow_pktlist\">pkt_grow_pktlist</a>(struct <a class=\"id\" href=\"#pktcdvd_device\">pktcdvd_device</a> *<a class=\"id\" href=\"#pd\">pd</a>, int <a class=\"id\" href=\"#nr_packets\">nr_packets</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#packet_data\">packet_data</a> *<a class=\"id\" href=\"#pkt\">pkt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#cdrw\">cdrw</a>.<a class=\"id\" href=\"#pkt_free_list\">pkt_free_list</a>));", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_packets\">nr_packets</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a> = <a class=\"id\" href=\"#pkt_alloc_packet_data\">pkt_alloc_packet_data</a>(<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#settings\">settings</a>.<a class=\"id\" href=\"#size\">size</a> >> 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pkt\">pkt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt_shrink_pktlist\">pkt_shrink_pktlist</a>(<a class=\"id\" href=\"#pd\">pd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#nr_packets\">nr_packets</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#pd\">pd</a> = <a class=\"id\" href=\"#pd\">pd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pkt\">pkt</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#cdrw\">cdrw</a>.<a class=\"id\" href=\"#pkt_free_list\">pkt_free_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_packets\">nr_packets</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#pkt_rb_node\">pkt_rb_node</a> *<a class=\"id\" href=\"#pkt_rbtree_next\">pkt_rbtree_next</a>(struct <a class=\"id\" href=\"#pkt_rb_node\">pkt_rb_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#pkt_rb_node\">pkt_rb_node</a>, <a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pkt_rbtree_erase\">pkt_rbtree_erase</a>(struct <a class=\"id\" href=\"#pktcdvd_device\">pktcdvd_device</a> *<a class=\"id\" href=\"#pd\">pd</a>, struct <a class=\"id\" href=\"#pkt_rb_node\">pkt_rb_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>, &amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#bio_queue\">bio_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#rb_pool\">rb_pool</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#bio_queue_size\">bio_queue_size</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#bio_queue_size\">bio_queue_size</a> &lt; 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Find the first node in the pd-&gt;bio_queue rb tree with a starting sector &gt;= s.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#pkt_rb_node\">pkt_rb_node</a> *<a class=\"id\" href=\"#pkt_rbtree_find\">pkt_rbtree_find</a>(struct <a class=\"id\" href=\"#pktcdvd_device\">pktcdvd_device</a> *<a class=\"id\" href=\"#pd\">pd</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#bio_queue\">bio_queue</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pkt_rb_node\">pkt_rb_node</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#bio_queue_size\">bio_queue_size</a> &gt; 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#pkt_rb_node\">pkt_rb_node</a>, <a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> <= <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> &gt; <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#pkt_rbtree_next\">pkt_rbtree_next</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#s\">s</a> &gt; <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Insert a node into the pd-&gt;bio_queue rb tree.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pkt_rbtree_insert\">pkt_rbtree_insert</a>(struct <a class=\"id\" href=\"#pktcdvd_device\">pktcdvd_device</a> *<a class=\"id\" href=\"#pd\">pd</a>, struct <a class=\"id\" href=\"#pkt_rb_node\">pkt_rb_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#bio_queue\">bio_queue</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pkt_rb_node\">pkt_rb_node</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#pkt_rb_node\">pkt_rb_node</a>, <a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> &lt; <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>, &amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#bio_queue\">bio_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#bio_queue_size\">bio_queue_size</a>++;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Send a packet_command to the underlying block device and</span>", 
"<span class=\"comment\"> * wait for completion.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pkt_generic_packet\">pkt_generic_packet</a>(struct <a class=\"id\" href=\"#pktcdvd_device\">pktcdvd_device</a> *<a class=\"id\" href=\"#pd\">pd</a>, struct <a class=\"id\" href=\"#packet_command\">packet_command</a> *<a class=\"id\" href=\"#cgc\">cgc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#blk_get_request\">blk_get_request</a>(<a class=\"id\" href=\"#q\">q</a>, (<a class=\"id\" href=\"#cgc\">cgc</a>-><a class=\"id\" href=\"#data_direction\">data_direction</a> == <a class=\"id\" href=\"#CGC_DATA_WRITE\">CGC_DATA_WRITE</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#WRITE\">WRITE</a> : <a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgc\">cgc</a>-><a class=\"id\" href=\"#buflen\">buflen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_map_kern\">blk_rq_map_kern</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#cgc\">cgc</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cgc\">cgc</a>-><a class=\"id\" href=\"#buflen\">buflen</a>, <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> = <a class=\"id\" href=\"#COMMAND_SIZE\">COMMAND_SIZE</a>(<a class=\"id\" href=\"#cgc\">cgc</a>-><a class=\"id\" href=\"#cmd\">cmd</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#cgc\">cgc</a>-><a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#CDROM_PACKET_SIZE\">CDROM_PACKET_SIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#timeout\">timeout</a> = 60*<a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> = <a class=\"id\" href=\"#REQ_TYPE_BLOCK_PC\">REQ_TYPE_BLOCK_PC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgc\">cgc</a>-><a class=\"id\" href=\"#quiet\">quiet</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_QUIET\">REQ_QUIET</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_execute_rq\">blk_execute_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>, <a class=\"id\" href=\"#rq\">rq</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#errors\">errors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_put_request\">blk_put_request</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A generic sense dump / resolve mechanism should be implemented across</span>", 
"<span class=\"comment\"> * all ATAPI + SCSI devices.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pkt_dump_sense\">pkt_dump_sense</a>(struct <a class=\"id\" href=\"#packet_command\">packet_command</a> *<a class=\"id\" href=\"#cgc\">cgc</a>)", 
"{", 
"<span class=\"ts\"/>static char *<a class=\"id\" href=\"#info\">info</a>[9] = { \"No sense\", \"Recovered error\", \"Not ready\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"Medium error\", \"Hardware error\", \"Illegal request\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"Unit attention\", \"Data protect\", \"Blank check\" };", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_sense\">request_sense</a> *<a class=\"id\" href=\"#sense\">sense</a> = <a class=\"id\" href=\"#cgc\">cgc</a>-><a class=\"id\" href=\"#sense\">sense</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#DRIVER_NAME\">DRIVER_NAME</a>\":\");", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CDROM_PACKET_SIZE\">CDROM_PACKET_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" %02x\", <a class=\"id\" href=\"#cgc\">cgc</a>-><a class=\"id\" href=\"#cmd\">cmd</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" - \");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sense\">sense</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"no sense\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"sense %02x.%02x.%02x\", <a class=\"id\" href=\"#sense\">sense</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a>, <a class=\"id\" href=\"#sense\">sense</a>-><a class=\"id\" href=\"#asc\">asc</a>, <a class=\"id\" href=\"#sense\">sense</a>-><a class=\"id\" href=\"#ascq\">ascq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sense\">sense</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a> &gt; 8) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" (INVALID)\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" (%s)\\n\", <a class=\"id\" href=\"#info\">info</a>[<a class=\"id\" href=\"#sense\">sense</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a>]);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * flush the drive cache to media</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pkt_flush_cache\">pkt_flush_cache</a>(struct <a class=\"id\" href=\"#pktcdvd_device\">pktcdvd_device</a> *<a class=\"id\" href=\"#pd\">pd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#packet_command\">packet_command</a> <a class=\"id\" href=\"#cgc\">cgc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_cdrom_command\">init_cdrom_command</a>(&amp;<a class=\"id\" href=\"#cgc\">cgc</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, <a class=\"id\" href=\"#CGC_DATA_NONE\">CGC_DATA_NONE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgc\">cgc</a>.<a class=\"id\" href=\"#cmd\">cmd</a>[0] = <a class=\"id\" href=\"#GPCMD_FLUSH_CACHE\">GPCMD_FLUSH_CACHE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgc\">cgc</a>.<a class=\"id\" href=\"#quiet\">quiet</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the IMMED bit -- we default to not setting it, although that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * would allow a much faster close, this is safer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#if 0", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgc\">cgc</a>.<a class=\"id\" href=\"#cmd\">cmd</a>[1] = 1 << 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pkt_generic_packet\">pkt_generic_packet</a>(<a class=\"id\" href=\"#pd\">pd</a>, &amp;<a class=\"id\" href=\"#cgc\">cgc</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * speed is given as the normal factor, e.g. 4 for 4x</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> int <a class=\"id\" href=\"#pkt_set_speed\">pkt_set_speed</a>(struct <a class=\"id\" href=\"#pktcdvd_device\">pktcdvd_device</a> *<a class=\"id\" href=\"#pd\">pd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#write_speed\">write_speed</a>, unsigned <a class=\"id\" href=\"#read_speed\">read_speed</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#packet_command\">packet_command</a> <a class=\"id\" href=\"#cgc\">cgc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_sense\">request_sense</a> <a class=\"id\" href=\"#sense\">sense</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_cdrom_command\">init_cdrom_command</a>(&amp;<a class=\"id\" href=\"#cgc\">cgc</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, <a class=\"id\" href=\"#CGC_DATA_NONE\">CGC_DATA_NONE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgc\">cgc</a>.<a class=\"id\" href=\"#sense\">sense</a> = &amp;<a class=\"id\" href=\"#sense\">sense</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgc\">cgc</a>.<a class=\"id\" href=\"#cmd\">cmd</a>[0] = <a class=\"id\" href=\"#GPCMD_SET_SPEED\">GPCMD_SET_SPEED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgc\">cgc</a>.<a class=\"id\" href=\"#cmd\">cmd</a>[2] = (<a class=\"id\" href=\"#read_speed\">read_speed</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgc\">cgc</a>.<a class=\"id\" href=\"#cmd\">cmd</a>[3] = <a class=\"id\" href=\"#read_speed\">read_speed</a> &amp; 0xff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgc\">cgc</a>.<a class=\"id\" href=\"#cmd\">cmd</a>[4] = (<a class=\"id\" href=\"#write_speed\">write_speed</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgc\">cgc</a>.<a class=\"id\" href=\"#cmd\">cmd</a>[5] = <a class=\"id\" href=\"#write_speed\">write_speed</a> &amp; 0xff;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pkt_generic_packet\">pkt_generic_packet</a>(<a class=\"id\" href=\"#pd\">pd</a>, &amp;<a class=\"id\" href=\"#cgc\">cgc</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt_dump_sense\">pkt_dump_sense</a>(&amp;<a class=\"id\" href=\"#cgc\">cgc</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Queue a bio for processing by the low-level CD device. Must be called</span>", 
"<span class=\"comment\"> * from process context.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pkt_queue_bio\">pkt_queue_bio</a>(struct <a class=\"id\" href=\"#pktcdvd_device\">pktcdvd_device</a> *<a class=\"id\" href=\"#pd\">pd</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#bio\">bio</a>) == <a class=\"id\" href=\"#READ\">READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_list_add\">bio_list_add</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#read_queue\">read_queue</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_list_add\">bio_list_add</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#write_queue\">write_queue</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#attention\">attention</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#wqueue\">wqueue</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Process the queued read/write requests. This function handles special</span>", 
"<span class=\"comment\"> * requirements for CDRW drives:</span>", 
"<span class=\"comment\"> * - A cache flush command must be inserted before a read request if the</span>", 
"<span class=\"comment\"> *   previous request was a write.</span>", 
"<span class=\"comment\"> * - Switching between reading and writing is slow, so don't do it more often</span>", 
"<span class=\"comment\"> *   than necessary.</span>", 
"<span class=\"comment\"> * - Optimize for throughput at the expense of latency. This means that streaming</span>", 
"<span class=\"comment\"> *   writes will never be interrupted by a read, but if the drive has to seek</span>", 
"<span class=\"comment\"> *   before the next write, switch to reading instead if there are any pending</span>", 
"<span class=\"comment\"> *   read requests.</span>", 
"<span class=\"comment\"> * - Set the read speed according to current usage pattern. When only reading</span>", 
"<span class=\"comment\"> *   from the device, it's best to use the highest possible read speed, but</span>", 
"<span class=\"comment\"> *   when switching often between reading and writing, it's better to have the</span>", 
"<span class=\"comment\"> *   same read and write speeds.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pkt_iosched_process_queue\">pkt_iosched_process_queue</a>(struct <a class=\"id\" href=\"#pktcdvd_device\">pktcdvd_device</a> *<a class=\"id\" href=\"#pd\">pd</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#attention\">attention</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#attention\">attention</a>, 0);", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#reads_queued\">reads_queued</a>, <a class=\"id\" href=\"#writes_queued\">writes_queued</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reads_queued\">reads_queued</a> = !<a class=\"id\" href=\"#bio_list_empty\">bio_list_empty</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#read_queue\">read_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writes_queued\">writes_queued</a> = !<a class=\"id\" href=\"#bio_list_empty\">bio_list_empty</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#write_queue\">write_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#reads_queued\">reads_queued</a> && !<a class=\"id\" href=\"#writes_queued\">writes_queued</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#iosched\">iosched</a>.<a class=\"id\" href=\"#writing\">writing</a>) {", 
];
xr_frag_insert('l/f9/c079ec77582cdbc5c73c11dc114091d4854962.xr', __xr_tmp);
