var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#filler_t\">filler_t</a> *<a class=\"id\" href=\"#filler\">filler</a> = (<a class=\"id\" href=\"#filler_t\">filler_t</a> *)<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#readpage\">readpage</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#read_cache_page_async\">read_cache_page_async</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#filler\">filler</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#read_mapping_page\">read_mapping_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filler_t\">filler_t</a> *<a class=\"id\" href=\"#filler\">filler</a> = (<a class=\"id\" href=\"#filler_t\">filler_t</a> *)<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#readpage\">readpage</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#read_cache_page\">read_cache_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#filler\">filler</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return byte-offset into filesystem object for page.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#page_offset\">page_offset</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#loff_t\">loff_t</a>)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>) << <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"}", 
"", 
"extern <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#linear_hugepage_index\">linear_hugepage_index</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#linear_page_index\">linear_page_index</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#linear_hugepage_index\">linear_hugepage_index</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> = (<a class=\"id\" href=\"#address\">address</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> += <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pgoff\">pgoff</a> >> (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#__lock_page\">__lock_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"extern int <a class=\"id\" href=\"#__lock_page_killable\">__lock_page_killable</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"extern void <a class=\"id\" href=\"#__lock_page_nosync\">__lock_page_nosync</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"extern void <a class=\"id\" href=\"#unlock_page\">unlock_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__set_page_locked\">__set_page_locked</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#PG_locked\">PG_locked</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__clear_page_locked\">__clear_page_locked</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#PG_locked\">PG_locked</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#trylock_page\">trylock_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#test_and_set_bit_lock\">test_and_set_bit_lock</a>(<a class=\"id\" href=\"#PG_locked\">PG_locked</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>)));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lock_page may only be called if we have the page's inode pinned.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#lock_page\">lock_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__lock_page\">__lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lock_page_killable is like lock_page but can be interrupted by fatal</span>", 
"<span class=\"comment\"> * signals.  It returns 0 if it locked the page and -EINTR if it was</span>", 
"<span class=\"comment\"> * killed while waiting.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#lock_page_killable\">lock_page_killable</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__lock_page_killable\">__lock_page_killable</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lock_page_nosync should only be used if we can't pin the page's inode.</span>", 
"<span class=\"comment\"> * Doesn't play quite so well with block device plugging.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#lock_page_nosync\">lock_page_nosync</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__lock_page_nosync\">__lock_page_nosync</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"<span class=\"ts\"/>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is exported only for wait_on_page_locked/wait_on_page_writeback.</span>", 
"<span class=\"comment\"> * Never use this directly!</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#wait_on_page_bit\">wait_on_page_bit</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#bit_nr\">bit_nr</a>);", 
"", 
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> * Wait for a page to be unlocked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This must be called with the caller \"holding\" the page,</span>", 
"<span class=\"comment\"> * ie with increased \"page-&gt;count\" so that the page won't</span>", 
"<span class=\"comment\"> * go away during the wait..</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#wait_on_page_locked\">wait_on_page_locked</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_bit\">wait_on_page_bit</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#PG_locked\">PG_locked</a>);", 
"}", 
"", 
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> * Wait for a page to complete writeback</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_bit\">wait_on_page_bit</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#PG_writeback\">PG_writeback</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#end_page_writeback\">end_page_writeback</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add an arbitrary waiter to a page's wait queue</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#add_page_wait_queue\">add_page_wait_queue</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#waiter\">waiter</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fault a userspace page into pagetables.  Return non-zero on a fault.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This assumes that two userspace pages are always sufficient.  That's</span>", 
"<span class=\"comment\"> * not true if PAGE_CACHE_SIZE &gt; PAGE_SIZE.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fault_in_pages_writeable\">fault_in_pages_writeable</a>(char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#size\">size</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Writing zeroes into userspace here is OK, because we know that if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the zero gets there, we'll be overwriting it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__put_user\">__put_user</a>(0, <a class=\"id\" href=\"#uaddr\">uaddr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#uaddr\">uaddr</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the page was already mapped, this will get a cache miss</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for sure, so try to avoid doing it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (((unsigned long)<a class=\"id\" href=\"#uaddr\">uaddr</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) !=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((unsigned long)<a class=\"id\" href=\"#end\">end</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/> <span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__put_user\">__put_user</a>(0, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fault_in_pages_readable\">fault_in_pages_readable</a>(const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>volatile char <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#size\">size</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#uaddr\">uaddr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#uaddr\">uaddr</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (((unsigned long)<a class=\"id\" href=\"#uaddr\">uaddr</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) !=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((unsigned long)<a class=\"id\" href=\"#end\">end</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/> <span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#add_to_page_cache_locked\">add_to_page_cache_locked</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"int <a class=\"id\" href=\"#add_to_page_cache_lru\">add_to_page_cache_lru</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"extern void <a class=\"id\" href=\"#remove_from_page_cache\">remove_from_page_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"extern void <a class=\"id\" href=\"#__remove_from_page_cache\">__remove_from_page_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Like add_to_page_cache_locked, but used to add newly allocated pages:</span>", 
"<span class=\"comment\"> * the page is new, so we can just run __set_page_locked() against it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#add_to_page_cache\">add_to_page_cache</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_page_locked\">__set_page_locked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#add_to_page_cache_locked\">add_to_page_cache_locked</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_page_locked\">__clear_page_locked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_PAGEMAP_H */</span>", 
];
xr_frag_insert('l/f9/e6718ceb75d3acd07fed36a79121429f2a9438.xr', __xr_tmp);
