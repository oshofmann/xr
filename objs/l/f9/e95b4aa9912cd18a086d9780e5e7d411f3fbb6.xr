var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This file contains the procedures for the handling of select and poll</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Created for Linux based loosely upon Mathius Lattner's minix</span>", 
"<span class=\"comment\"> * patches by Peter MacDonald. Heavily edited by Linus.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  4 February 1994</span>", 
"<span class=\"comment\"> *     COFF/ELF binary emulation. If the process has the STICKY_TIMEOUTS</span>", 
"<span class=\"comment\"> *     flag set in its personality we do *not* modify the given timeout</span>", 
"<span class=\"comment\"> *     parameter to reflect time remaining.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  24 January 2000</span>", 
"<span class=\"comment\"> *     Changed sys_poll()/do_poll() to use PAGE_SIZE chunk-based allocation </span>", 
"<span class=\"comment\"> *     of fds to overcome nfds &lt; 16390 descriptors limit (Tigran Aivazian).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#personality\">personality</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* for STICKY_TIMEOUTS */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fdtable\">fdtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hrtimer\">hrtimer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Estimate expected accuracy in ns from a timeval.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After quite a bit of churning around, we've settled on</span>", 
"<span class=\"comment\"> * a simple thing of taking 0.1% of the timeout as the</span>", 
"<span class=\"comment\"> * slack, with a cap of 100 msec.</span>", 
"<span class=\"comment\"> * \"nice\" tasks get a 0.5% slack instead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Consider this comment an open invitation to come up with even</span>", 
"<span class=\"comment\"> * better solutions..</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_SLACK\">MAX_SLACK</a><span class=\"ts\"/>(100 * <a class=\"id\" href=\"#NSEC_PER_MSEC\">NSEC_PER_MSEC</a>)", 
"", 
"static long <a class=\"id\" href=\"#__estimate_accuracy\">__estimate_accuracy</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tv\">tv</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#slack\">slack</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#divfactor\">divfactor</a> = 1000;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tv\">tv</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_nice\">task_nice</a>(<a class=\"id\" href=\"#current\">current</a>) &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#divfactor\">divfactor</a> = <a class=\"id\" href=\"#divfactor\">divfactor</a> / 5;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tv\">tv</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> &gt; <a class=\"id\" href=\"#MAX_SLACK\">MAX_SLACK</a> / (<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>/<a class=\"id\" href=\"#divfactor\">divfactor</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#MAX_SLACK\">MAX_SLACK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slack\">slack</a> = <a class=\"id\" href=\"#tv\">tv</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> / <a class=\"id\" href=\"#divfactor\">divfactor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slack\">slack</a> += <a class=\"id\" href=\"#tv\">tv</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> * (<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>/<a class=\"id\" href=\"#divfactor\">divfactor</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slack\">slack</a> &gt; <a class=\"id\" href=\"#MAX_SLACK\">MAX_SLACK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#MAX_SLACK\">MAX_SLACK</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#slack\">slack</a>;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#estimate_accuracy\">estimate_accuracy</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tv\">tv</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Realtime tasks get a slack of 0 for obvious reasons.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_task\">rt_task</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_get_ts\">ktime_get_ts</a>(&amp;<a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#timespec_sub\">timespec_sub</a>(*<a class=\"id\" href=\"#tv\">tv</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__estimate_accuracy\">__estimate_accuracy</a>(&amp;<a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#timer_slack_ns\">timer_slack_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#timer_slack_ns\">timer_slack_ns</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"", 
"struct <a class=\"id\" href=\"#poll_table_page\">poll_table_page</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_table_page\">poll_table_page</a> * <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_table_entry\">poll_table_entry</a> * <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_table_entry\">poll_table_entry</a> <a class=\"id\" href=\"#entries\">entries</a>[0];", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#POLL_TABLE_FULL\">POLL_TABLE_FULL</a>(<a class=\"id\" href=\"#table\">table</a>) \\", 
"<span class=\"ts\"/>((unsigned long)((<a class=\"id\" href=\"#table\">table</a>)-><a class=\"id\" href=\"#entry\">entry</a>+1) &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> + (unsigned long)(<a class=\"id\" href=\"#table\">table</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ok, Peter made a complicated, but straightforward multiple_wait() function.</span>", 
"<span class=\"comment\"> * I have rewritten this, taking some shortcuts: This code may not be easy to</span>", 
"<span class=\"comment\"> * follow, but it should be free of race-conditions, and it's practical. If you</span>", 
"<span class=\"comment\"> * understand what I'm doing here, then you understand how the linux</span>", 
"<span class=\"comment\"> * sleep/wakeup mechanism works.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Two very simple procedures, poll_wait() and poll_freewait() make all the</span>", 
"<span class=\"comment\"> * work.  poll_wait() is an inline-function defined in &lt;linux/poll.h&gt;,</span>", 
"<span class=\"comment\"> * as all select/poll functions have to call it to add an entry to the</span>", 
"<span class=\"comment\"> * poll table.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__pollwait\">__pollwait</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wait_address\">wait_address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"void <a class=\"id\" href=\"#poll_initwait\">poll_initwait</a>(struct <a class=\"id\" href=\"#poll_wqueues\">poll_wqueues</a> *<a class=\"id\" href=\"#pwq\">pwq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_poll_funcptr\">init_poll_funcptr</a>(&amp;<a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#pt\">pt</a>, <a class=\"id\" href=\"#__pollwait\">__pollwait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#polling_task\">polling_task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#triggered\">triggered</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#inline_index\">inline_index</a> = 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#poll_initwait\">poll_initwait</a>);", 
"", 
"static void <a class=\"id\" href=\"#free_poll_entry\">free_poll_entry</a>(struct <a class=\"id\" href=\"#poll_table_entry\">poll_table_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#wait_address\">wait_address</a>, &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#filp\">filp</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#poll_freewait\">poll_freewait</a>(struct <a class=\"id\" href=\"#poll_wqueues\">poll_wqueues</a> *<a class=\"id\" href=\"#pwq\">pwq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_table_page\">poll_table_page</a> * <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#inline_index\">inline_index</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_poll_entry\">free_poll_entry</a>(<a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#inline_entries\">inline_entries</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_table_entry\">poll_table_entry</a> * <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_table_page\">poll_table_page</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_poll_entry\">free_poll_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#entry\">entry</a> &gt; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#entries\">entries</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long) <a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#poll_freewait\">poll_freewait</a>);", 
"", 
"static struct <a class=\"id\" href=\"#poll_table_entry\">poll_table_entry</a> *<a class=\"id\" href=\"#poll_get_entry\">poll_get_entry</a>(struct <a class=\"id\" href=\"#poll_wqueues\">poll_wqueues</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_table_page\">poll_table_page</a> *<a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#table\">table</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inline_index\">inline_index</a> &lt; <a class=\"id\" href=\"#N_INLINE_POLL_ENTRIES\">N_INLINE_POLL_ENTRIES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inline_entries\">inline_entries</a> + <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#inline_index\">inline_index</a>++;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#table\">table</a> || <a class=\"id\" href=\"#POLL_TABLE_FULL\">POLL_TABLE_FULL</a>(<a class=\"id\" href=\"#table\">table</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_table_page\">poll_table_page</a> *<a class=\"id\" href=\"#new_table\">new_table</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_table\">new_table</a> = (struct <a class=\"id\" href=\"#poll_table_page\">poll_table_page</a> *) <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_table\">new_table</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_table\">new_table</a>-><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#new_table\">new_table</a>-><a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_table\">new_table</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#new_table\">new_table</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#new_table\">new_table</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#entry\">entry</a>++;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__pollwake\">__pollwake</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, unsigned <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#sync\">sync</a>, void *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_wqueues\">poll_wqueues</a> *<a class=\"id\" href=\"#pwq\">pwq</a> = <a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#dummy_wait\">dummy_wait</a>, <a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#polling_task\">polling_task</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Although this function is called under waitqueue lock, LOCK</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doesn't imply write barrier and the users expect write</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * barrier semantics on wakeup functions.  The following</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * smp_wmb() is equivalent to smp_wmb() in try_to_wake_up()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and is paired with set_mb() in poll_schedule_timeout.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#triggered\">triggered</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Perform the default wake up operation using a dummy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * waitqueue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TODO: This is hacky but there currently is no interface to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pass in @sync.  @sync is scheduled to be removed and once</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that happens, wake_up_process() can be used directly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#default_wake_function\">default_wake_function</a>(&amp;<a class=\"id\" href=\"#dummy_wait\">dummy_wait</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#sync\">sync</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pollwake\">pollwake</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, unsigned <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#sync\">sync</a>, void *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_table_entry\">poll_table_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#wait\">wait</a>, struct <a class=\"id\" href=\"#poll_table_entry\">poll_table_entry</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a> && !((unsigned long)<a class=\"id\" href=\"#key\">key</a> &amp; <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#key\">key</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pollwake\">__pollwake</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#sync\">sync</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Add a new entry */</span>", 
"static void <a class=\"id\" href=\"#__pollwait\">__pollwait</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wait_address\">wait_address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_wqueues\">poll_wqueues</a> *<a class=\"id\" href=\"#pwq\">pwq</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#poll_wqueues\">poll_wqueues</a>, <a class=\"id\" href=\"#pt\">pt</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poll_table_entry\">poll_table_entry</a> *<a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#poll_get_entry\">poll_get_entry</a>(<a class=\"id\" href=\"#pwq\">pwq</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_file\">get_file</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#wait_address\">wait_address</a> = <a class=\"id\" href=\"#wait_address\">wait_address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_func_entry\">init_waitqueue_func_entry</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#pollwake\">pollwake</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#pwq\">pwq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>(<a class=\"id\" href=\"#wait_address\">wait_address</a>, &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#poll_schedule_timeout\">poll_schedule_timeout</a>(struct <a class=\"id\" href=\"#poll_wqueues\">poll_wqueues</a> *<a class=\"id\" href=\"#pwq\">pwq</a>, int <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ktime_t\">ktime_t</a> *<a class=\"id\" href=\"#expires\">expires</a>, unsigned long <a class=\"id\" href=\"#slack\">slack</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#triggered\">triggered</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#schedule_hrtimeout_range\">schedule_hrtimeout_range</a>(<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#slack\">slack</a>, <a class=\"id\" href=\"#HRTIMER_MODE_ABS\">HRTIMER_MODE_ABS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Prepare for the next iteration.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The following set_mb() serves two purposes.  First, it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the counterpart rmb of the wmb in pollwake() such that data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * written before wake up is always visible after wake up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Second, the full barrier guarantees that triggered clearing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doesn't pass event check of the next iteration.  Note that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this problem doesn't exist for the first iteration as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * add_wait_queue() has full barrier semantics.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_mb\">set_mb</a>(<a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#triggered\">triggered</a>, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#poll_schedule_timeout\">poll_schedule_timeout</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * poll_select_set_timeout - helper function to setup the timeout value</span>", 
"<span class=\"comment\"> * @to:<span class=\"ts\"/><span class=\"ts\"/>pointer to timespec variable for the final timeout</span>", 
"<span class=\"comment\"> * @sec:<span class=\"ts\"/>seconds (from user space)</span>", 
"<span class=\"comment\"> * @nsec:<span class=\"ts\"/>nanoseconds (from user space)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, we do not use a timespec for the user space value here, That</span>", 
"<span class=\"comment\"> * way we can use the function for timeval and compat interfaces as well.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -EINVAL if sec/nsec are not normalized. Otherwise 0.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#poll_select_set_timeout\">poll_select_set_timeout</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#to\">to</a>, long <a class=\"id\" href=\"#sec\">sec</a>, long <a class=\"id\" href=\"#nsec\">nsec</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a> = {.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#sec\">sec</a>, .<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#nsec\">nsec</a>};", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#timespec_valid\">timespec_valid</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Optimize for the zero timeout value here */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sec\">sec</a> && !<a class=\"id\" href=\"#nsec\">nsec</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktime_get_ts\">ktime_get_ts</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#timespec_add_safe\">timespec_add_safe</a>(*<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#ts\">ts</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#poll_select_copy_remaining\">poll_select_copy_remaining</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#end_time\">end_time</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#timeval\">timeval</a>, int <a class=\"id\" href=\"#ret\">ret</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#rts\">rts</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#rtv\">rtv</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> &amp; <a class=\"id\" href=\"#STICKY_TIMEOUTS\">STICKY_TIMEOUTS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#sticky\">sticky</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No update for zero timeout */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#end_time\">end_time</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> && !<a class=\"id\" href=\"#end_time\">end_time</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_get_ts\">ktime_get_ts</a>(&amp;<a class=\"id\" href=\"#rts\">rts</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rts\">rts</a> = <a class=\"id\" href=\"#timespec_sub\">timespec_sub</a>(*<a class=\"id\" href=\"#end_time\">end_time</a>, <a class=\"id\" href=\"#rts\">rts</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rts\">rts</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rts\">rts</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#rts\">rts</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeval\">timeval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtv\">rtv</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#rts\">rts</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtv\">rtv</a>.<a class=\"id\" href=\"#tv_usec\">tv_usec</a> = <a class=\"id\" href=\"#rts\">rts</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> / <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#rtv\">rtv</a>, sizeof(<a class=\"id\" href=\"#rtv\">rtv</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#rts\">rts</a>, sizeof(<a class=\"id\" href=\"#rts\">rts</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If an application puts its timeval in read-only memory, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't want the Linux-specific update to the timeval to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cause a fault after the select has completed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * successfully. However, because we're not updating the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timeval, we can't restart the system call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<a class=\"id\" href=\"#sticky\">sticky</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ERESTARTNOHAND\">ERESTARTNOHAND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FDS_IN\">FDS_IN</a>(<a class=\"id\" href=\"#fds\">fds</a>, <a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#fds\">fds</a>-><a class=\"id\" href=\"#in\">in</a> + <a class=\"id\" href=\"#n\">n</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FDS_OUT\">FDS_OUT</a>(<a class=\"id\" href=\"#fds\">fds</a>, <a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#fds\">fds</a>-><a class=\"id\" href=\"#out\">out</a> + <a class=\"id\" href=\"#n\">n</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FDS_EX\">FDS_EX</a>(<a class=\"id\" href=\"#fds\">fds</a>, <a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#fds\">fds</a>-><a class=\"id\" href=\"#ex\">ex</a> + <a class=\"id\" href=\"#n\">n</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BITS\">BITS</a>(<a class=\"id\" href=\"#fds\">fds</a>, <a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/>(*<a class=\"id\" href=\"#FDS_IN\">FDS_IN</a>(<a class=\"id\" href=\"#fds\">fds</a>, <a class=\"id\" href=\"#n\">n</a>)|*<a class=\"id\" href=\"#FDS_OUT\">FDS_OUT</a>(<a class=\"id\" href=\"#fds\">fds</a>, <a class=\"id\" href=\"#n\">n</a>)|*<a class=\"id\" href=\"#FDS_EX\">FDS_EX</a>(<a class=\"id\" href=\"#fds\">fds</a>, <a class=\"id\" href=\"#n\">n</a>))", 
"", 
"static int <a class=\"id\" href=\"#max_select_fd\">max_select_fd</a>(unsigned long <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#fd_set_bits\">fd_set_bits</a> *<a class=\"id\" href=\"#fds\">fds</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#open_fds\">open_fds</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#set\">set</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* handle last in-complete long-word first */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a> = ~(~0UL << (<a class=\"id\" href=\"#n\">n</a> &amp; (<a class=\"id\" href=\"#__NFDBITS\">__NFDBITS</a>-1)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> /= <a class=\"id\" href=\"#__NFDBITS\">__NFDBITS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_fds\">open_fds</a> = <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>+<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#set\">set</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a> &= <a class=\"id\" href=\"#BITS\">BITS</a>(<a class=\"id\" href=\"#fds\">fds</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#set\">set</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#set\">set</a> &amp; ~*<a class=\"id\" href=\"#open_fds\">open_fds</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#get_max\">get_max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#open_fds\">open_fds</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#BITS\">BITS</a>(<a class=\"id\" href=\"#fds\">fds</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#set\">set</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#set\">set</a> &amp; ~*<a class=\"id\" href=\"#open_fds\">open_fds</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
];
xr_frag_insert('l/f9/e95b4aa9912cd18a086d9780e5e7d411f3fbb6.xr', __xr_tmp);
