var __xr_tmp = [
"<span class=\"comment\">/* find_next_bit.c: fallback find next bit implementation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2004 Red Hat, Inc. All Rights Reserved.</span>", 
"<span class=\"comment\"> * Written by David Howells (dhowells@redhat.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> * 2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BITOP_WORD\">BITOP_WORD</a>(<a class=\"id\" href=\"#nr\">nr</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#nr\">nr</a>) / <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_FIND_NEXT_BIT\">CONFIG_GENERIC_FIND_NEXT_BIT</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Find the next set bit in a memory region.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(const unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#BITOP_WORD\">BITOP_WORD</a>(<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#offset\">offset</a> &amp; ~(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>-1);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> %= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = *(<a class=\"id\" href=\"#p\">p</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> &= (~0UL << <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_first\">found_first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_middle\">found_middle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a> &amp; ~(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>-1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#tmp\">tmp</a> = *(<a class=\"id\" href=\"#p\">p</a>++)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_middle\">found_middle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<a class=\"id\" href=\"#found_first\">found_first</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> &= (~0UL >> (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> == 0UL)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Are any bits set? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#size\">size</a>;<span class=\"ts\"/><span class=\"comment\">/* Nope. */</span>", 
"<a class=\"id\" href=\"#found_middle\">found_middle</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#__ffs\">__ffs</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This implementation of find_{first,next}_zero_bit was stolen from</span>", 
"<span class=\"comment\"> * Linus' asm-alpha/bitops.h.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>(const unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#BITOP_WORD\">BITOP_WORD</a>(<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#offset\">offset</a> &amp; ~(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>-1);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> %= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = *(<a class=\"id\" href=\"#p\">p</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> |= ~0UL >> (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_first\">found_first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (~<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_middle\">found_middle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a> &amp; ~(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>-1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (~(<a class=\"id\" href=\"#tmp\">tmp</a> = *(<a class=\"id\" href=\"#p\">p</a>++)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_middle\">found_middle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<a class=\"id\" href=\"#found_first\">found_first</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> |= ~0UL << <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> == ~0UL)<span class=\"ts\"/><span class=\"comment\">/* Are any bits zero? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#size\">size</a>;<span class=\"ts\"/><span class=\"comment\">/* Nope. */</span>", 
"<a class=\"id\" href=\"#found_middle\">found_middle</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#ffz\">ffz</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_GENERIC_FIND_NEXT_BIT */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_FIND_FIRST_BIT\">CONFIG_GENERIC_FIND_FIRST_BIT</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Find the first set bit in a memory region.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>(const unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a> &amp; ~(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>-1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#tmp\">tmp</a> = *(<a class=\"id\" href=\"#p\">p</a>++)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = (*<a class=\"id\" href=\"#p\">p</a>) &amp; (~0UL >> (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> == 0UL)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Are any bits set? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#size\">size</a>;<span class=\"ts\"/><span class=\"comment\">/* Nope. */</span>", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#__ffs\">__ffs</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Find the first cleared bit in a memory region.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#find_first_zero_bit\">find_first_zero_bit</a>(const unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a> &amp; ~(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>-1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (~(<a class=\"id\" href=\"#tmp\">tmp</a> = *(<a class=\"id\" href=\"#p\">p</a>++)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = (*<a class=\"id\" href=\"#p\">p</a>) | (~0UL << <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> == ~0UL)<span class=\"ts\"/><span class=\"comment\">/* Are any bits zero? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#size\">size</a>;<span class=\"ts\"/><span class=\"comment\">/* Nope. */</span>", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#ffz\">ffz</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#find_first_zero_bit\">find_first_zero_bit</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_GENERIC_FIND_FIRST_BIT */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__BIG_ENDIAN\">__BIG_ENDIAN</a>", 
"", 
"<span class=\"comment\">/* include/linux/byteorder does not support \"unsigned long\" type */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#ext2_swabp\">ext2_swabp</a>(const unsigned long * <a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64", 
"<span class=\"ts\"/>return (unsigned long) <a class=\"id\" href=\"#__swab64p\">__swab64p</a>((<a class=\"id\" href=\"#u64\">u64</a> *) <a class=\"id\" href=\"#x\">x</a>);", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<span class=\"ts\"/>return (unsigned long) <a class=\"id\" href=\"#__swab32p\">__swab32p</a>((<a class=\"id\" href=\"#u32\">u32</a> *) <a class=\"id\" href=\"#x\">x</a>);", 
"#else", 
"#<a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> <a class=\"id\" href=\"#not\">not</a> <a class=\"id\" href=\"#defined\">defined</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/* include/linux/byteorder doesn't support \"unsigned long\" type */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#ext2_swab\">ext2_swab</a>(const unsigned long <a class=\"id\" href=\"#y\">y</a>)", 
"{", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64", 
"<span class=\"ts\"/>return (unsigned long) <a class=\"id\" href=\"#__swab64\">__swab64</a>((<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#y\">y</a>);", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<span class=\"ts\"/>return (unsigned long) <a class=\"id\" href=\"#__swab32\">__swab32</a>((<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#y\">y</a>);", 
"#else", 
"#<a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> <a class=\"id\" href=\"#not\">not</a> <a class=\"id\" href=\"#defined\">defined</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#generic_find_next_zero_le_bit\">generic_find_next_zero_le_bit</a>(const unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, unsigned", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#BITOP_WORD\">BITOP_WORD</a>(<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#offset\">offset</a> &amp; ~(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> &= (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1UL);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#ext2_swabp\">ext2_swabp</a>(<a class=\"id\" href=\"#p\">p</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> |= (~0UL >> (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#offset\">offset</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_first\">found_first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (~<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_middle\">found_middle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a> &amp; ~(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (~(<a class=\"id\" href=\"#tmp\">tmp</a> = *(<a class=\"id\" href=\"#p\">p</a>++)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_middle_swap\">found_middle_swap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#ext2_swabp\">ext2_swabp</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<a class=\"id\" href=\"#found_first\">found_first</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> |= ~0UL << <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> == ~0UL)<span class=\"ts\"/><span class=\"comment\">/* Are any bits zero? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#size\">size</a>; <span class=\"comment\">/* Nope. Skip ffz */</span>", 
"<a class=\"id\" href=\"#found_middle\">found_middle</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#ffz\">ffz</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<a class=\"id\" href=\"#found_middle_swap\">found_middle_swap</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#ffz\">ffz</a>(<a class=\"id\" href=\"#ext2_swab\">ext2_swab</a>(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_find_next_zero_le_bit\">generic_find_next_zero_le_bit</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#generic_find_next_le_bit\">generic_find_next_le_bit</a>(const unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, unsigned", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#BITOP_WORD\">BITOP_WORD</a>(<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#offset\">offset</a> &amp; ~(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> &= (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1UL);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#ext2_swabp\">ext2_swabp</a>(<a class=\"id\" href=\"#p\">p</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> &= (~0UL << <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_first\">found_first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_middle\">found_middle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a> &amp; ~(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = *(<a class=\"id\" href=\"#p\">p</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_middle_swap\">found_middle_swap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#ext2_swabp\">ext2_swabp</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<a class=\"id\" href=\"#found_first\">found_first</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> &= (~0UL >> (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> == 0UL)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Are any bits set? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#size\">size</a>; <span class=\"comment\">/* Nope. */</span>", 
"<a class=\"id\" href=\"#found_middle\">found_middle</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#__ffs\">__ffs</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<a class=\"id\" href=\"#found_middle_swap\">found_middle_swap</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> + <a class=\"id\" href=\"#__ffs\">__ffs</a>(<a class=\"id\" href=\"#ext2_swab\">ext2_swab</a>(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_find_next_le_bit\">generic_find_next_le_bit</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __BIG_ENDIAN */</span>", 
];
xr_frag_insert('l/fa/1dc0ca4e21c3c57b66167741a71e991c66d3c0.xr', __xr_tmp);
