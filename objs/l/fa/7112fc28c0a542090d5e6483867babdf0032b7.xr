var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_FS_H\">_LINUX_FS_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_FS_H\">_LINUX_FS_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This file has definitions for some important file table</span>", 
"<span class=\"comment\"> * structures etc.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioctl\">ioctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blk_types\">blk_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * It's silly to have NR_OPEN bigger than NR_FILE, but you can change</span>", 
"<span class=\"comment\"> * the file limit at runtime and only root can increase the per-process</span>", 
"<span class=\"comment\"> * nr_file rlimit, so it's safe to set up a ridiculously high absolute</span>", 
"<span class=\"comment\"> * upper limit on files-per-process.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Some programs (notably those using select()) may have to be </span>", 
"<span class=\"comment\"> * recompiled to take full advantage of the new limits..  </span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Fixed constants first: */</span>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#NR_OPEN\">NR_OPEN</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INR_OPEN\">INR_OPEN</a> 1024<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Initial setting for nfile rlimits */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLOCK_SIZE_BITS\">BLOCK_SIZE_BITS</a> 10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLOCK_SIZE\">BLOCK_SIZE</a> (1<<<a class=\"id\" href=\"#BLOCK_SIZE_BITS\">BLOCK_SIZE_BITS</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEEK_SET\">SEEK_SET</a><span class=\"ts\"/>0<span class=\"ts\"/><span class=\"comment\">/* seek relative to beginning of file */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEEK_CUR\">SEEK_CUR</a><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* seek relative to current file position */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEEK_END\">SEEK_END</a><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"comment\">/* seek relative to end of file */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEEK_MAX\">SEEK_MAX</a><span class=\"ts\"/><a class=\"id\" href=\"#SEEK_END\">SEEK_END</a>", 
"", 
"<span class=\"comment\">/* And dynamically-tunable limits and defaults: */</span>", 
"struct <a class=\"id\" href=\"#files_stat_struct\">files_stat_struct</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_files\">nr_files</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* read only */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_free_files\">nr_free_files</a>;<span class=\"ts\"/><span class=\"comment\">/* read only */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_files\">max_files</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* tunable */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#inodes_stat_t\">inodes_stat_t</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_inodes\">nr_inodes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_unused\">nr_unused</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dummy\">dummy</a>[5];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* padding for sysctl ABI compatibility */</span>", 
"};", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NR_FILE\">NR_FILE</a>  8192<span class=\"ts\"/><span class=\"comment\">/* this can well be larger on a larger system */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a> 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a> 2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a> 4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAY_APPEND\">MAY_APPEND</a> 8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAY_ACCESS\">MAY_ACCESS</a> 16", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAY_OPEN\">MAY_OPEN</a> 32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAY_CHDIR\">MAY_CHDIR</a> 64", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * flags in file.f_mode.  Note that FMODE_READ and FMODE_WRITE must correspond</span>", 
"<span class=\"comment\"> * to O_WRONLY and O_RDWR via the strange trick in __dentry_open()</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* file is open for reading */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)0x1)", 
"<span class=\"comment\">/* file is open for writing */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)0x2)", 
"<span class=\"comment\">/* file is seekable */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FMODE_LSEEK\">FMODE_LSEEK</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)0x4)", 
"<span class=\"comment\">/* file can be accessed using pread */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FMODE_PREAD\">FMODE_PREAD</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)0x8)", 
"<span class=\"comment\">/* file can be accessed using pwrite */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FMODE_PWRITE\">FMODE_PWRITE</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)0x10)", 
"<span class=\"comment\">/* File is opened for execution with sys_execve / sys_uselib */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FMODE_EXEC\">FMODE_EXEC</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)0x20)", 
"<span class=\"comment\">/* File is opened with O_NDELAY (only set for block devices) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FMODE_NDELAY\">FMODE_NDELAY</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)0x40)", 
"<span class=\"comment\">/* File is opened with O_EXCL (only set for block devices) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FMODE_EXCL\">FMODE_EXCL</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)0x80)", 
"<span class=\"comment\">/* File is opened using open(.., 3, ..) and is writeable only for ioctls</span>", 
"<span class=\"comment\">   (specialy hack for floppy.c) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FMODE_WRITE_IOCTL\">FMODE_WRITE_IOCTL</a><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)0x100)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Don't update ctime and mtime.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Currently a special hack for the XFS open_by_handle ioctl, but we'll</span>", 
"<span class=\"comment\"> * hopefully graduate it to a proper O_CMTIME flag supported by open(2) soon.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FMODE_NOCMTIME\">FMODE_NOCMTIME</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)0x800)", 
"", 
"<span class=\"comment\">/* Expect random access pattern */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FMODE_RANDOM\">FMODE_RANDOM</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)0x1000)", 
"", 
"<span class=\"comment\">/* File was opened by fanotify and shouldn't generate fanotify events */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FMODE_NONOTIFY\">FMODE_NONOTIFY</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>)0x1000000)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The below are the various read and write types that we support. Some of</span>", 
"<span class=\"comment\"> * them include behavioral modifiers that send information down to the</span>", 
"<span class=\"comment\"> * block layer and IO scheduler. Terminology:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The block layer uses device plugging to defer IO a little bit, in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the hope that we will see more IO very shortly. This increases</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>coalescing of adjacent IO and thus reduces the number of IOs we</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>have to send to the device. It also allows for better queuing,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if the IO isn't mergeable. If the caller is going to be waiting</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for the IO, then he must ensure that the device is unplugged so</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that the IO is dispatched to the driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>All IO is handled async in Linux. This is fine for background</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>writes, but for reads or writes that someone waits for completion</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on, we want to notify the block layer and IO scheduler so that they</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>know about it. That allows them to make better scheduling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>decisions. So when the below references 'sync' and 'async', it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is referencing this priority hint.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * With that in mind, the available types are:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * READ<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>A normal read operation. Device will be plugged.</span>", 
"<span class=\"comment\"> * READ_SYNC<span class=\"ts\"/><span class=\"ts\"/>A synchronous read. Device is not plugged, caller can</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>immediately wait on this read without caring about</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unplugging.</span>", 
"<span class=\"comment\"> * READA<span class=\"ts\"/><span class=\"ts\"/>Used for read-ahead operations. Lower priority, and the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>block layer could (in theory) choose to ignore this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>request if it runs into resource problems.</span>", 
"<span class=\"comment\"> * WRITE<span class=\"ts\"/><span class=\"ts\"/>A normal async write. Device will be plugged.</span>", 
"<span class=\"comment\"> * WRITE_SYNC_PLUG<span class=\"ts\"/>Synchronous write. Identical to WRITE, but passes down</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the hint that someone will be waiting on this IO</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>shortly. The device must still be unplugged explicitly,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>WRITE_SYNC_PLUG does not do this as we could be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>submitting more writes before we actually wait on any</span>", 
];
xr_frag_insert('l/fa/7112fc28c0a542090d5e6483867babdf0032b7.xr', __xr_tmp);
