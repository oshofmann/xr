var __xr_tmp = [
"static void <a class=\"id\" href=\"#__tty_buffer_flush\">__tty_buffer_flush</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_buffer\">tty_buffer</a> *<a class=\"id\" href=\"#thead\">thead</a>;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#thead\">thead</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#head\">head</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#thead\">thead</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_buffer_free\">tty_buffer_free</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#thead\">thead</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tty_buffer_flush<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>flush full tty buffers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tty: tty to flush</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>flush all the buffers containing receive data. If the buffer is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>being processed by flush_to_ldisc then we defer the processing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to that function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: none</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#tty_buffer_flush\">tty_buffer_flush</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the data is being pushed to the tty layer then we can't</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   process it here. Instead set a flag and the flush_to_ldisc</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   path will process the flush request before it exits */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#TTY_FLUSHING\">TTY_FLUSHING</a>, &amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#TTY_FLUSHPENDING\">TTY_FLUSHPENDING</a>, &amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_event\">wait_event</a>(<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#read_wait\">read_wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#TTY_FLUSHPENDING\">TTY_FLUSHPENDING</a>, &amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#flags\">flags</a>) == 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__tty_buffer_flush\">__tty_buffer_flush</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tty_buffer_find<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>find a free tty buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tty: tty owning the buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: characters wanted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locate an existing suitable tty buffer or if we are lacking one then</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocate a new one. We round our buffers off in 256 character chunks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to get better allocation behaviour.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: Caller must hold tty-&gt;buf.lock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#tty_buffer\">tty_buffer</a> *<a class=\"id\" href=\"#tty_buffer_find\">tty_buffer_find</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_buffer\">tty_buffer</a> **<a class=\"id\" href=\"#tbh\">tbh</a> = &amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/>while ((*<a class=\"id\" href=\"#tbh\">tbh</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_buffer\">tty_buffer</a> *<a class=\"id\" href=\"#t\">t</a> = *<a class=\"id\" href=\"#tbh\">tbh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tbh\">tbh</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#used\">used</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#commit\">commit</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#read\">read</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#memory_used\">memory_used</a> += <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tbh\">tbh</a> = &amp;((*<a class=\"id\" href=\"#tbh\">tbh</a>)-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Round the buffer size out */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = (<a class=\"id\" href=\"#size\">size</a> + 0xFF) &amp; ~0xFF;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tty_buffer_alloc\">tty_buffer_alloc</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Should possibly check if this fails for the largest buffer we</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   have queued and recycle that ? */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tty_buffer_request_room<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>grow tty buffer if needed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tty: tty structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: size desired</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Make at least size bytes of linear space available for the tty</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>buffer. If we fail return the size we managed to find.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: Takes tty-&gt;buf.lock</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tty_buffer_request_room\">tty_buffer_request_room</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_buffer\">tty_buffer</a> *<a class=\"id\" href=\"#b\">b</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* OPTIMISATION: We could keep a per tty \"zero\" sized buffer to</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   remove this conditional if its worth it. This would be invisible</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   to the callers */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#used\">used</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a> &lt; <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is the slow path - looking for new buffers to use */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#tty_buffer_find\">tty_buffer_find</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#size\">size</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#commit\">commit</a> = <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#used\">used</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tty_buffer_request_room\">tty_buffer_request_room</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tty_insert_flip_string_fixed_flag - Add characters to the tty buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tty: tty structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chars: characters</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flag: flag value for each character</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Queue a series of bytes to the tty buffering. All the characters</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>passed are marked with the supplied flag. Returns the number added.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: Called functions may take tty-&gt;buf.lock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#tty_insert_flip_string_fixed_flag\">tty_insert_flip_string_fixed_flag</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#chars\">chars</a>, char <a class=\"id\" href=\"#flag\">flag</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#copied\">copied</a> = 0;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#TTY_BUFFER_PAGE\">TTY_BUFFER_PAGE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#space\">space</a> = <a class=\"id\" href=\"#tty_buffer_request_room\">tty_buffer_request_room</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#goal\">goal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_buffer\">tty_buffer</a> *<a class=\"id\" href=\"#tb\">tb</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If there is no space then tb may be NULL */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#space\">space</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#char_buf_ptr\">char_buf_ptr</a> + <a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#used\">used</a>, <a class=\"id\" href=\"#chars\">chars</a>, <a class=\"id\" href=\"#space\">space</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#flag_buf_ptr\">flag_buf_ptr</a> + <a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#used\">used</a>, <a class=\"id\" href=\"#flag\">flag</a>, <a class=\"id\" href=\"#space\">space</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#used\">used</a> += <a class=\"id\" href=\"#space\">space</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> += <a class=\"id\" href=\"#space\">space</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chars\">chars</a> += <a class=\"id\" href=\"#space\">space</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There is a small chance that we need to split the data over</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   several buffers. If this is the case we must loop */</span>", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#copied\">copied</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tty_insert_flip_string_fixed_flag\">tty_insert_flip_string_fixed_flag</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tty_insert_flip_string_flags<span class=\"ts\"/>-<span class=\"ts\"/>Add characters to the tty buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tty: tty structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chars: characters</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags: flag bytes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Queue a series of bytes to the tty buffering. For each character</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the flags array indicates the status of the character. Returns the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>number added.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: Called functions may take tty-&gt;buf.lock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#tty_insert_flip_string_flags\">tty_insert_flip_string_flags</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#chars\">chars</a>, const char *<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#copied\">copied</a> = 0;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#TTY_BUFFER_PAGE\">TTY_BUFFER_PAGE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#space\">space</a> = <a class=\"id\" href=\"#tty_buffer_request_room\">tty_buffer_request_room</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#goal\">goal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_buffer\">tty_buffer</a> *<a class=\"id\" href=\"#tb\">tb</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If there is no space then tb may be NULL */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#space\">space</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#char_buf_ptr\">char_buf_ptr</a> + <a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#used\">used</a>, <a class=\"id\" href=\"#chars\">chars</a>, <a class=\"id\" href=\"#space\">space</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#flag_buf_ptr\">flag_buf_ptr</a> + <a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#used\">used</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#space\">space</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#used\">used</a> += <a class=\"id\" href=\"#space\">space</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> += <a class=\"id\" href=\"#space\">space</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chars\">chars</a> += <a class=\"id\" href=\"#space\">space</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> += <a class=\"id\" href=\"#space\">space</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There is a small chance that we need to split the data over</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   several buffers. If this is the case we must loop */</span>", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#copied\">copied</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tty_insert_flip_string_flags\">tty_insert_flip_string_flags</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tty_schedule_flip<span class=\"ts\"/>-<span class=\"ts\"/>push characters to ldisc</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tty: tty to push from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Takes any pending buffers and transfers their ownership to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ldisc side of the queue. It then schedules those characters for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>processing by the line discipline.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: Takes tty-&gt;buf.lock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#tty_schedule_flip\">tty_schedule_flip</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#commit\">commit</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#used\">used</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#work\">work</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tty_schedule_flip\">tty_schedule_flip</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tty_prepare_flip_string<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>make room for characters</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tty: tty</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chars: return pointer for character write area</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: desired size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Prepare a block of space in the buffer for data. Returns the length</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>available and buffer pointer to the space which is now allocated and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>accounted for as ready for normal characters. This is used for drivers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that need their own block copy routines into the buffer. There is no</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>guarantee the buffer is a DMA target!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: May call functions taking tty-&gt;buf.lock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#tty_prepare_flip_string\">tty_prepare_flip_string</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>, unsigned char **<a class=\"id\" href=\"#chars\">chars</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#space\">space</a> = <a class=\"id\" href=\"#tty_buffer_request_room\">tty_buffer_request_room</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#space\">space</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_buffer\">tty_buffer</a> *<a class=\"id\" href=\"#tb\">tb</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#chars\">chars</a> = <a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#char_buf_ptr\">char_buf_ptr</a> + <a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#used\">used</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#flag_buf_ptr\">flag_buf_ptr</a> + <a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#used\">used</a>, <a class=\"id\" href=\"#TTY_NORMAL\">TTY_NORMAL</a>, <a class=\"id\" href=\"#space\">space</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#used\">used</a> += <a class=\"id\" href=\"#space\">space</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#space\">space</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tty_prepare_flip_string\">tty_prepare_flip_string</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tty_prepare_flip_string_flags<span class=\"ts\"/>-<span class=\"ts\"/>make room for characters</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tty: tty</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chars: return pointer for character write area</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags: return pointer for status flag write area</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: desired size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Prepare a block of space in the buffer for data. Returns the length</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>available and buffer pointer to the space which is now allocated and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>accounted for as ready for characters. This is used for drivers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that need their own block copy routines into the buffer. There is no</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>guarantee the buffer is a DMA target!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: May call functions taking tty-&gt;buf.lock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#tty_prepare_flip_string_flags\">tty_prepare_flip_string_flags</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char **<a class=\"id\" href=\"#chars\">chars</a>, char **<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#space\">space</a> = <a class=\"id\" href=\"#tty_buffer_request_room\">tty_buffer_request_room</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#space\">space</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_buffer\">tty_buffer</a> *<a class=\"id\" href=\"#tb\">tb</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#chars\">chars</a> = <a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#char_buf_ptr\">char_buf_ptr</a> + <a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#used\">used</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#flag_buf_ptr\">flag_buf_ptr</a> + <a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#used\">used</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tb\">tb</a>-><a class=\"id\" href=\"#used\">used</a> += <a class=\"id\" href=\"#space\">space</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#space\">space</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tty_prepare_flip_string_flags\">tty_prepare_flip_string_flags</a>);", 
"", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>flush_to_ldisc</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@work: tty structure passed from work queue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This routine is called out of the software interrupt to flush data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from the buffer chain to the line discipline.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: holds tty-&gt;buf.lock to guard buffer list. Drops the lock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>while invoking the line discipline receive_buf method. The</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>receive_buf method is single threaded for each tty instance.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#flush_to_ldisc\">flush_to_ldisc</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a>, <a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#work\">work</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>unsigned long <span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_ldisc\">tty_ldisc</a> *<a class=\"id\" href=\"#disc\">disc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disc\">disc</a> = <a class=\"id\" href=\"#tty_ldisc_ref\">tty_ldisc_ref</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disc\">disc</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)<span class=\"ts\"/><span class=\"comment\">/*  !TTY_LDISC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#TTY_FLUSHING\">TTY_FLUSHING</a>, &amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_buffer\">tty_buffer</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#head\">head</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#char_buf\">char_buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#flag_buf\">flag_buf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#commit\">commit</a> - <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_buffer_free\">tty_buffer_free</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ldisc or user is trying to flush the buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   we are feeding to the ldisc, stop feeding the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   line discipline as we want to empty the queue */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#TTY_FLUSHPENDING\">TTY_FLUSHPENDING</a>, &amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#receive_room\">receive_room</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#work\">work</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#receive_room\">receive_room</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#receive_room\">receive_room</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#char_buf\">char_buf</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#char_buf_ptr\">char_buf_ptr</a> + <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flag_buf\">flag_buf</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#flag_buf_ptr\">flag_buf_ptr</a> + <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#read\">read</a> += <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disc\">disc</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#receive_buf\">receive_buf</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#char_buf\">char_buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flag_buf\">flag_buf</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#TTY_FLUSHING\">TTY_FLUSHING</a>, &amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We may have a deferred request to flush the input buffer,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   if so pull the chain under the lock and empty the queue */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#TTY_FLUSHPENDING\">TTY_FLUSHPENDING</a>, &amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__tty_buffer_flush\">__tty_buffer_flush</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#TTY_FLUSHPENDING\">TTY_FLUSHPENDING</a>, &amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#read_wait\">read_wait</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty_ldisc_deref\">tty_ldisc_deref</a>(<a class=\"id\" href=\"#disc\">disc</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tty_flush_to_ldisc</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tty: tty to push</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Push the terminal flip buffers to the line discipline.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must not be called from IRQ context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tty_flush_to_ldisc\">tty_flush_to_ldisc</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_delayed_work\">flush_delayed_work</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tty_flip_buffer_push<span class=\"ts\"/>-<span class=\"ts\"/>terminal</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tty: tty to push</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Queue a push of the terminal flip buffers to the line discipline. This</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function must not be called from IRQ context if tty-&gt;low_latency is set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In the event of the queue being busy for flipping the work will be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>held off and retried later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: tty buffer lock. Driver locks in low latency mode.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#tty_flip_buffer_push\">tty_flip_buffer_push</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#commit\">commit</a> = <a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#used\">used</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#low_latency\">low_latency</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_to_ldisc\">flush_to_ldisc</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#work\">work</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#work\">work</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tty_flip_buffer_push\">tty_flip_buffer_push</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tty_buffer_init<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>prepare a tty buffer structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tty: tty to initialise</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Set up the initial state of the buffer management for a tty device.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must be called before the other tty buffer functions are used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Locking: none</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#tty_buffer_init\">tty_buffer_init</a>(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#memory_used\">memory_used</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_DELAYED_WORK\">INIT_DELAYED_WORK</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#buf\">buf</a>.<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#flush_to_ldisc\">flush_to_ldisc</a>);", 
"}", 
"", 
];
xr_frag_insert('l/fa/dfc71e0bd667267e67ccde3260f3d36bcf0bd0.xr', __xr_tmp);
