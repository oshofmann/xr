var __xr_tmp = [
"<span class=\"comment\"> * @DMA_PREP_CONTINUE - indicate to a driver that it is reusing buffers as</span>", 
"<span class=\"comment\"> *  sources that were the result of a previous operation, in the case of a PQ</span>", 
"<span class=\"comment\"> *  operation it continues the calculation with new sources</span>", 
"<span class=\"comment\"> * @DMA_PREP_FENCE - tell the driver that subsequent operations depend</span>", 
"<span class=\"comment\"> *  on the result of this operation</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#dma_ctrl_flags\">dma_ctrl_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_PREP_INTERRUPT\">DMA_PREP_INTERRUPT</a> = (1 << 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_CTRL_ACK\">DMA_CTRL_ACK</a> = (1 << 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_COMPL_SKIP_SRC_UNMAP\">DMA_COMPL_SKIP_SRC_UNMAP</a> = (1 << 2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_COMPL_SKIP_DEST_UNMAP\">DMA_COMPL_SKIP_DEST_UNMAP</a> = (1 << 3),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_COMPL_SRC_UNMAP_SINGLE\">DMA_COMPL_SRC_UNMAP_SINGLE</a> = (1 << 4),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_COMPL_DEST_UNMAP_SINGLE\">DMA_COMPL_DEST_UNMAP_SINGLE</a> = (1 << 5),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_PREP_PQ_DISABLE_P\">DMA_PREP_PQ_DISABLE_P</a> = (1 << 6),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_PREP_PQ_DISABLE_Q\">DMA_PREP_PQ_DISABLE_Q</a> = (1 << 7),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_PREP_CONTINUE\">DMA_PREP_CONTINUE</a> = (1 << 8),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_PREP_FENCE\">DMA_PREP_FENCE</a> = (1 << 9),", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum dma_ctrl_cmd - DMA operations that can optionally be exercised</span>", 
"<span class=\"comment\"> * on a running channel.</span>", 
"<span class=\"comment\"> * @DMA_TERMINATE_ALL: terminate all ongoing transfers</span>", 
"<span class=\"comment\"> * @DMA_PAUSE: pause ongoing transfers</span>", 
"<span class=\"comment\"> * @DMA_RESUME: resume paused transfer</span>", 
"<span class=\"comment\"> * @DMA_SLAVE_CONFIG: this command is only implemented by DMA controllers</span>", 
"<span class=\"comment\"> * that need to runtime reconfigure the slave channels (as opposed to passing</span>", 
"<span class=\"comment\"> * configuration data in statically from the platform). An additional</span>", 
"<span class=\"comment\"> * argument of struct dma_slave_config must be passed in with this</span>", 
"<span class=\"comment\"> * command.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#dma_ctrl_cmd\">dma_ctrl_cmd</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_TERMINATE_ALL\">DMA_TERMINATE_ALL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_PAUSE\">DMA_PAUSE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_RESUME\">DMA_RESUME</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_SLAVE_CONFIG\">DMA_SLAVE_CONFIG</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum sum_check_bits - bit position of pq_check_flags</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#sum_check_bits\">sum_check_bits</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SUM_CHECK_P\">SUM_CHECK_P</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SUM_CHECK_Q\">SUM_CHECK_Q</a> = 1,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum pq_check_flags - result of async_{xor,pq}_zero_sum operations</span>", 
"<span class=\"comment\"> * @SUM_CHECK_P_RESULT - 1 if xor zero sum error, 0 otherwise</span>", 
"<span class=\"comment\"> * @SUM_CHECK_Q_RESULT - 1 if reed-solomon zero sum error, 0 otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#sum_check_flags\">sum_check_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SUM_CHECK_P_RESULT\">SUM_CHECK_P_RESULT</a> = (1 << <a class=\"id\" href=\"#SUM_CHECK_P\">SUM_CHECK_P</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SUM_CHECK_Q_RESULT\">SUM_CHECK_Q_RESULT</a> = (1 << <a class=\"id\" href=\"#SUM_CHECK_Q\">SUM_CHECK_Q</a>),", 
"};", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_cap_mask_t - capabilities bitmap modeled after cpumask_t.</span>", 
"<span class=\"comment\"> * See linux/cpumask.h</span>", 
"<span class=\"comment\"> */</span>", 
"typedef struct { <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#DMA_TX_TYPE_END\">DMA_TX_TYPE_END</a>); } <a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct dma_chan_percpu - the per-CPU part of struct dma_chan</span>", 
"<span class=\"comment\"> * @memcpy_count: transaction counter</span>", 
"<span class=\"comment\"> * @bytes_transferred: byte counter</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#dma_chan_percpu\">dma_chan_percpu</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* stats */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#memcpy_count\">memcpy_count</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bytes_transferred\">bytes_transferred</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct dma_chan - devices supply DMA channels, clients use them</span>", 
"<span class=\"comment\"> * @device: ptr to the dma device who supplies this channel, always !%NULL</span>", 
"<span class=\"comment\"> * @cookie: last cookie value returned to client</span>", 
"<span class=\"comment\"> * @chan_id: channel ID for sysfs</span>", 
"<span class=\"comment\"> * @dev: class device for sysfs</span>", 
"<span class=\"comment\"> * @device_node: used to add this to the device chan list</span>", 
"<span class=\"comment\"> * @local: per-cpu pointer to a struct dma_chan_percpu</span>", 
"<span class=\"comment\"> * @client-count: how many clients are using this channel</span>", 
"<span class=\"comment\"> * @table_count: number of appearances in the mem-to-mem allocation table</span>", 
"<span class=\"comment\"> * @private: private data for certain client-channel associations</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sysfs */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#chan_id\">chan_id</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan_dev\">dma_chan_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#device_node\">device_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan_percpu\">dma_chan_percpu</a> <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#local\">local</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#client_count\">client_count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#table_count\">table_count</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct dma_chan_dev - relate sysfs device node to backing channel device</span>", 
"<span class=\"comment\"> * @chan - driver channel device</span>", 
"<span class=\"comment\"> * @device - sysfs device</span>", 
"<span class=\"comment\"> * @dev_id - parent dma_device dev_id</span>", 
"<span class=\"comment\"> * @idr_ref - reference count to gate release of dma_device dev_id</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dma_chan_dev\">dma_chan_dev</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dev_id\">dev_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#idr_ref\">idr_ref</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum dma_slave_buswidth - defines bus with of the DMA slave</span>", 
"<span class=\"comment\"> * device, source or target buses</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#dma_slave_buswidth\">dma_slave_buswidth</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_SLAVE_BUSWIDTH_UNDEFINED\">DMA_SLAVE_BUSWIDTH_UNDEFINED</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_SLAVE_BUSWIDTH_1_BYTE\">DMA_SLAVE_BUSWIDTH_1_BYTE</a> = 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_SLAVE_BUSWIDTH_2_BYTES\">DMA_SLAVE_BUSWIDTH_2_BYTES</a> = 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_SLAVE_BUSWIDTH_4_BYTES\">DMA_SLAVE_BUSWIDTH_4_BYTES</a> = 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DMA_SLAVE_BUSWIDTH_8_BYTES\">DMA_SLAVE_BUSWIDTH_8_BYTES</a> = 8,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct dma_slave_config - dma slave channel runtime config</span>", 
"<span class=\"comment\"> * @direction: whether the data shall go in or out on this slave</span>", 
"<span class=\"comment\"> * channel, right now. DMA_TO_DEVICE and DMA_FROM_DEVICE are</span>", 
"<span class=\"comment\"> * legal values, DMA_BIDIRECTIONAL is not acceptable since we</span>", 
"<span class=\"comment\"> * need to differentiate source and target addresses.</span>", 
"<span class=\"comment\"> * @src_addr: this is the physical address where DMA slave data</span>", 
"<span class=\"comment\"> * should be read (RX), if the source is memory this argument is</span>", 
"<span class=\"comment\"> * ignored.</span>", 
"<span class=\"comment\"> * @dst_addr: this is the physical address where DMA slave data</span>", 
"<span class=\"comment\"> * should be written (TX), if the source is memory this argument</span>", 
"<span class=\"comment\"> * is ignored.</span>", 
"<span class=\"comment\"> * @src_addr_width: this is the width in bytes of the source (RX)</span>", 
"<span class=\"comment\"> * register where DMA data shall be read. If the source</span>", 
"<span class=\"comment\"> * is memory this may be ignored depending on architecture.</span>", 
"<span class=\"comment\"> * Legal values: 1, 2, 4, 8.</span>", 
"<span class=\"comment\"> * @dst_addr_width: same as src_addr_width but for destination</span>", 
"<span class=\"comment\"> * target (TX) mutatis mutandis.</span>", 
"<span class=\"comment\"> * @src_maxburst: the maximum number of words (note: words, as in</span>", 
"<span class=\"comment\"> * units of the src_addr_width member, not bytes) that can be sent</span>", 
"<span class=\"comment\"> * in one burst to the device. Typically something like half the</span>", 
"<span class=\"comment\"> * FIFO depth on I/O peripherals so you don't overflow it. This</span>", 
"<span class=\"comment\"> * may or may not be applicable on memory sources.</span>", 
"<span class=\"comment\"> * @dst_maxburst: same as src_maxburst but for destination target</span>", 
"<span class=\"comment\"> * mutatis mutandis.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This struct is passed in as configuration data to a DMA engine</span>", 
"<span class=\"comment\"> * in order to set up a certain channel for DMA transport at runtime.</span>", 
"<span class=\"comment\"> * The DMA device/engine has to provide support for an additional</span>", 
"<span class=\"comment\"> * command in the channel config interface, DMA_SLAVE_CONFIG</span>", 
"<span class=\"comment\"> * and this struct will then be passed in as an argument to the</span>", 
"<span class=\"comment\"> * DMA engine device_control() function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The rationale for adding configuration information to this struct</span>", 
"<span class=\"comment\"> * is as follows: if it is likely that most DMA slave controllers in</span>", 
"<span class=\"comment\"> * the world will support the configuration option, then make it</span>", 
"<span class=\"comment\"> * generic. If not: if it is fixed so that it be sent in static from</span>", 
"<span class=\"comment\"> * the platform data, then prefer to do that. Else, if it is neither</span>", 
"<span class=\"comment\"> * fixed at runtime, nor generic enough (such as bus mastership on</span>", 
"<span class=\"comment\"> * some CPU family and whatnot) then create a custom slave config</span>", 
"<span class=\"comment\"> * struct and pass that, then make this config a member of that</span>", 
"<span class=\"comment\"> * struct, if applicable.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dma_slave_config\">dma_slave_config</a> {", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#direction\">direction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#src_addr\">src_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dst_addr\">dst_addr</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_slave_buswidth\">dma_slave_buswidth</a> <a class=\"id\" href=\"#src_addr_width\">src_addr_width</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_slave_buswidth\">dma_slave_buswidth</a> <a class=\"id\" href=\"#dst_addr_width\">dst_addr_width</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#src_maxburst\">src_maxburst</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#dst_maxburst\">dst_maxburst</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> const char *<a class=\"id\" href=\"#dma_chan_name\">dma_chan_name</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_name\">dev_name</a>(&amp;<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#dma_chan_cleanup\">dma_chan_cleanup</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * typedef dma_filter_fn - callback filter for dma_request_channel</span>", 
"<span class=\"comment\"> * @chan: channel to be reviewed</span>", 
"<span class=\"comment\"> * @filter_param: opaque parameter passed through dma_request_channel</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When this optional parameter is specified in a call to dma_request_channel a</span>", 
"<span class=\"comment\"> * suitable channel is passed to this routine for further dispositioning before</span>", 
"<span class=\"comment\"> * being returned.  Where 'suitable' indicates a non-busy channel that</span>", 
"<span class=\"comment\"> * satisfies the given capability mask.  It returns 'true' to indicate that the</span>", 
"<span class=\"comment\"> * channel is suitable.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef <a class=\"id\" href=\"#bool\">bool</a> (*<a class=\"id\" href=\"#dma_filter_fn\">dma_filter_fn</a>)(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, void *<a class=\"id\" href=\"#filter_param\">filter_param</a>);", 
"", 
"typedef void (*<a class=\"id\" href=\"#dma_async_tx_callback\">dma_async_tx_callback</a>)(void *<a class=\"id\" href=\"#dma_async_param\">dma_async_param</a>);", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct dma_async_tx_descriptor - async transaction descriptor</span>", 
"<span class=\"comment\"> * ---dma generic offload fields---</span>", 
"<span class=\"comment\"> * @cookie: tracking cookie for this transaction, set to -EBUSY if</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this tx is sitting on a dependency list</span>", 
"<span class=\"comment\"> * @flags: flags to augment operation preparation, control completion, and</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>communicate status</span>", 
"<span class=\"comment\"> * @phys: physical address of the descriptor</span>", 
"<span class=\"comment\"> * @chan: target channel for this operation</span>", 
"<span class=\"comment\"> * @tx_submit: set the prepared descriptor(s) to be executed by the engine</span>", 
"<span class=\"comment\"> * @callback: routine to call after this operation is complete</span>", 
"<span class=\"comment\"> * @callback_param: general parameter to pass to the callback routine</span>", 
"<span class=\"comment\"> * ---async_tx api specific fields---</span>", 
"<span class=\"comment\"> * @next: at completion submit this descriptor</span>", 
"<span class=\"comment\"> * @parent: pointer to the next level up in the dependency chain</span>", 
"<span class=\"comment\"> * @lock: protect the parent and next pointers</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_ctrl_flags\">dma_ctrl_flags</a> <a class=\"id\" href=\"#flags\">flags</a>; <span class=\"comment\">/* not a 'long' to pack with cookie */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> (*<a class=\"id\" href=\"#tx_submit\">tx_submit</a>)(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_async_tx_callback\">dma_async_tx_callback</a> <a class=\"id\" href=\"#callback\">callback</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#callback_param\">callback_param</a>;", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_ASYNC_TX_DISABLE_CHANNEL_SWITCH\">CONFIG_ASYNC_TX_DISABLE_CHANNEL_SWITCH</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ASYNC_TX_DISABLE_CHANNEL_SWITCH\">CONFIG_ASYNC_TX_DISABLE_CHANNEL_SWITCH</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#txd_lock\">txd_lock</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#txd_unlock\">txd_unlock</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#txd_chain\">txd_chain</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>, struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#txd_clear_parent\">txd_clear_parent</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#txd_clear_next\">txd_clear_next</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd_next\">txd_next</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd_parent\">txd_parent</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#txd_lock\">txd_lock</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#txd\">txd</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#txd_unlock\">txd_unlock</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#txd\">txd</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#txd_chain\">txd_chain</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>, struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#txd\">txd</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#txd\">txd</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#txd_clear_parent\">txd_clear_parent</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#txd\">txd</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#txd_clear_next\">txd_clear_next</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#txd\">txd</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd_parent\">txd_parent</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#txd\">txd</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd_next\">txd_next</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#txd\">txd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#txd\">txd</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct dma_tx_state - filled in to report the status of</span>", 
"<span class=\"comment\"> * a transfer.</span>", 
"<span class=\"comment\"> * @last: last completed DMA cookie</span>", 
"<span class=\"comment\"> * @used: last issued DMA cookie (i.e. the one in progress)</span>", 
"<span class=\"comment\"> * @residue: the remaining number of bytes left to transmit</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on the selected transfer for states DMA_IN_PROGRESS and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>DMA_PAUSED if this is implemented in the driver, else 0</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dma_tx_state\">dma_tx_state</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#used\">used</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#residue\">residue</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct dma_device - info on the entity supplying DMA services</span>", 
"<span class=\"comment\"> * @chancnt: how many DMA channels are supported</span>", 
"<span class=\"comment\"> * @privatecnt: how many DMA channels are requested by dma_request_channel</span>", 
"<span class=\"comment\"> * @channels: the list of struct dma_chan</span>", 
"<span class=\"comment\"> * @global_node: list_head for global dma_device_list</span>", 
"<span class=\"comment\"> * @cap_mask: one or more dma_capability flags</span>", 
"<span class=\"comment\"> * @max_xor: maximum number of xor sources, 0 if no capability</span>", 
"<span class=\"comment\"> * @max_pq: maximum number of PQ sources and PQ-continue capability</span>", 
"<span class=\"comment\"> * @copy_align: alignment shift for memcpy operations</span>", 
"<span class=\"comment\"> * @xor_align: alignment shift for xor operations</span>", 
"<span class=\"comment\"> * @pq_align: alignment shift for pq operations</span>", 
"<span class=\"comment\"> * @fill_align: alignment shift for memset operations</span>", 
"<span class=\"comment\"> * @dev_id: unique device ID</span>", 
"<span class=\"comment\"> * @dev: struct device reference for dma mapping api</span>", 
"<span class=\"comment\"> * @device_alloc_chan_resources: allocate resources and return the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>number of allocated descriptors</span>", 
"<span class=\"comment\"> * @device_free_chan_resources: release DMA channel's resources</span>", 
"<span class=\"comment\"> * @device_prep_dma_memcpy: prepares a memcpy operation</span>", 
"<span class=\"comment\"> * @device_prep_dma_xor: prepares a xor operation</span>", 
"<span class=\"comment\"> * @device_prep_dma_xor_val: prepares a xor validation operation</span>", 
"<span class=\"comment\"> * @device_prep_dma_pq: prepares a pq operation</span>", 
"<span class=\"comment\"> * @device_prep_dma_pq_val: prepares a pqzero_sum operation</span>", 
"<span class=\"comment\"> * @device_prep_dma_memset: prepares a memset operation</span>", 
"<span class=\"comment\"> * @device_prep_dma_interrupt: prepares an end of chain interrupt operation</span>", 
"<span class=\"comment\"> * @device_prep_slave_sg: prepares a slave dma operation</span>", 
"<span class=\"comment\"> * @device_control: manipulate all pending operations on a channel, returns</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>zero or error code</span>", 
"<span class=\"comment\"> * @device_tx_status: poll for transaction completion, the optional</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>txstate parameter can be supplied with a pointer to get a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct with auxilary transfer status information, otherwise the call</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will just return a simple status code</span>", 
"<span class=\"comment\"> * @device_issue_pending: push pending transactions to hardware</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dma_device\">dma_device</a> {", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#chancnt\">chancnt</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#privatecnt\">privatecnt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#channels\">channels</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#global_node\">global_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a>  <a class=\"id\" href=\"#cap_mask\">cap_mask</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#max_xor\">max_xor</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#max_pq\">max_pq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#copy_align\">copy_align</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#xor_align\">xor_align</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pq_align\">pq_align</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#fill_align\">fill_align</a>;", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_HAS_PQ_CONTINUE\">DMA_HAS_PQ_CONTINUE</a> (1 << 15)", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dev_id\">dev_id</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#device_alloc_chan_resources\">device_alloc_chan_resources</a>)(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#device_free_chan_resources\">device_free_chan_resources</a>)(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *(*<a class=\"id\" href=\"#device_prep_dma_memcpy\">device_prep_dma_memcpy</a>)(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *(*<a class=\"id\" href=\"#device_prep_dma_xor\">device_prep_dma_xor</a>)(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#src_cnt\">src_cnt</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *(*<a class=\"id\" href=\"#device_prep_dma_xor_val\">device_prep_dma_xor_val</a>)(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#src\">src</a>,<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#src_cnt\">src_cnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, enum <a class=\"id\" href=\"#sum_check_flags\">sum_check_flags</a> *<a class=\"id\" href=\"#result\">result</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *(*<a class=\"id\" href=\"#device_prep_dma_pq\">device_prep_dma_pq</a>)(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#src_cnt\">src_cnt</a>, const unsigned char *<a class=\"id\" href=\"#scf\">scf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *(*<a class=\"id\" href=\"#device_prep_dma_pq_val\">device_prep_dma_pq_val</a>)(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#pq\">pq</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#src_cnt\">src_cnt</a>, const unsigned char *<a class=\"id\" href=\"#scf\">scf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#sum_check_flags\">sum_check_flags</a> *<a class=\"id\" href=\"#pqres\">pqres</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *(*<a class=\"id\" href=\"#device_prep_dma_memset\">device_prep_dma_memset</a>)(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dest\">dest</a>, int <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *(*<a class=\"id\" href=\"#device_prep_dma_interrupt\">device_prep_dma_interrupt</a>)(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *(*<a class=\"id\" href=\"#device_prep_slave_sg\">device_prep_slave_sg</a>)(", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sg_len\">sg_len</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#direction\">direction</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#device_control\">device_control</a>)(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, enum <a class=\"id\" href=\"#dma_ctrl_cmd\">dma_ctrl_cmd</a> <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_status\">dma_status</a> (*<a class=\"id\" href=\"#device_tx_status\">device_tx_status</a>)(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#dma_tx_state\">dma_tx_state</a> *<a class=\"id\" href=\"#txstate\">txstate</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#device_issue_pending\">device_issue_pending</a>)(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>);", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dmaengine_check_align\">dmaengine_check_align</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#off1\">off1</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#off2\">off2</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#align\">align</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = (1 << <a class=\"id\" href=\"#align\">align</a>) - 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &amp; (<a class=\"id\" href=\"#off1\">off1</a> | <a class=\"id\" href=\"#off2\">off2</a> | <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_dma_copy_aligned\">is_dma_copy_aligned</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#off1\">off1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#off2\">off2</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dmaengine_check_align\">dmaengine_check_align</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#copy_align\">copy_align</a>, <a class=\"id\" href=\"#off1\">off1</a>, <a class=\"id\" href=\"#off2\">off2</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_dma_xor_aligned\">is_dma_xor_aligned</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#off1\">off1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#off2\">off2</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dmaengine_check_align\">dmaengine_check_align</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#xor_align\">xor_align</a>, <a class=\"id\" href=\"#off1\">off1</a>, <a class=\"id\" href=\"#off2\">off2</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_dma_pq_aligned\">is_dma_pq_aligned</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#off1\">off1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#off2\">off2</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dmaengine_check_align\">dmaengine_check_align</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pq_align\">pq_align</a>, <a class=\"id\" href=\"#off1\">off1</a>, <a class=\"id\" href=\"#off2\">off2</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_dma_fill_aligned\">is_dma_fill_aligned</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#off1\">off1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#off2\">off2</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dmaengine_check_align\">dmaengine_check_align</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#fill_align\">fill_align</a>, <a class=\"id\" href=\"#off1\">off1</a>, <a class=\"id\" href=\"#off2\">off2</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#dma_set_maxpq\">dma_set_maxpq</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#dma\">dma</a>, int <a class=\"id\" href=\"#maxpq\">maxpq</a>, int <a class=\"id\" href=\"#has_pq_continue\">has_pq_continue</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma\">dma</a>-><a class=\"id\" href=\"#max_pq\">max_pq</a> = <a class=\"id\" href=\"#maxpq\">maxpq</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#has_pq_continue\">has_pq_continue</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma\">dma</a>-><a class=\"id\" href=\"#max_pq\">max_pq</a> |= <a class=\"id\" href=\"#DMA_HAS_PQ_CONTINUE\">DMA_HAS_PQ_CONTINUE</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dmaf_continue\">dmaf_continue</a>(enum <a class=\"id\" href=\"#dma_ctrl_flags\">dma_ctrl_flags</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DMA_PREP_CONTINUE\">DMA_PREP_CONTINUE</a>) == <a class=\"id\" href=\"#DMA_PREP_CONTINUE\">DMA_PREP_CONTINUE</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dmaf_p_disabled_continue\">dmaf_p_disabled_continue</a>(enum <a class=\"id\" href=\"#dma_ctrl_flags\">dma_ctrl_flags</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_ctrl_flags\">dma_ctrl_flags</a> <a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#DMA_PREP_CONTINUE\">DMA_PREP_CONTINUE</a> | <a class=\"id\" href=\"#DMA_PREP_PQ_DISABLE_P\">DMA_PREP_PQ_DISABLE_P</a>;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>) == <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dma_dev_has_pq_continue\">dma_dev_has_pq_continue</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#dma\">dma</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dma\">dma</a>-><a class=\"id\" href=\"#max_pq\">max_pq</a> &amp; <a class=\"id\" href=\"#DMA_HAS_PQ_CONTINUE\">DMA_HAS_PQ_CONTINUE</a>) == <a class=\"id\" href=\"#DMA_HAS_PQ_CONTINUE\">DMA_HAS_PQ_CONTINUE</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned short <a class=\"id\" href=\"#dma_dev_to_maxpq\">dma_dev_to_maxpq</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#dma\">dma</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dma\">dma</a>-><a class=\"id\" href=\"#max_pq\">max_pq</a> &amp; ~<a class=\"id\" href=\"#DMA_HAS_PQ_CONTINUE\">DMA_HAS_PQ_CONTINUE</a>;", 
"}", 
"", 
"<span class=\"comment\">/* dma_maxpq - reduce maxpq in the face of continued operations</span>", 
"<span class=\"comment\"> * @dma - dma device with PQ capability</span>", 
"<span class=\"comment\"> * @flags - to check if DMA_PREP_CONTINUE and DMA_PREP_PQ_DISABLE_P are set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When an engine does not support native continuation we need 3 extra</span>", 
"<span class=\"comment\"> * source slots to reuse P and Q with the following coefficients:</span>", 
"<span class=\"comment\"> * 1/ {00} * P : remove P from Q', but use it as a source for P'</span>", 
"<span class=\"comment\"> * 2/ {01} * Q : use Q to continue Q' calculation</span>", 
"<span class=\"comment\"> * 3/ {00} * Q : subtract Q from P' to cancel (2)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In the case where P is disabled we only need 1 extra source:</span>", 
"<span class=\"comment\"> * 1/ {01} * Q : use Q to continue Q' calculation</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#dma_maxpq\">dma_maxpq</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#dma\">dma</a>, enum <a class=\"id\" href=\"#dma_ctrl_flags\">dma_ctrl_flags</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_dev_has_pq_continue\">dma_dev_has_pq_continue</a>(<a class=\"id\" href=\"#dma\">dma</a>) || !<a class=\"id\" href=\"#dmaf_continue\">dmaf_continue</a>(<a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dma_dev_to_maxpq\">dma_dev_to_maxpq</a>(<a class=\"id\" href=\"#dma\">dma</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#dmaf_p_disabled_continue\">dmaf_p_disabled_continue</a>(<a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dma_dev_to_maxpq\">dma_dev_to_maxpq</a>(<a class=\"id\" href=\"#dma\">dma</a>) - 1;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#dmaf_continue\">dmaf_continue</a>(<a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dma_dev_to_maxpq\">dma_dev_to_maxpq</a>(<a class=\"id\" href=\"#dma\">dma</a>) - 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"<span class=\"comment\">/* --- public DMA engine API --- */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DMA_ENGINE\">CONFIG_DMA_ENGINE</a>", 
"void <a class=\"id\" href=\"#dmaengine_get\">dmaengine_get</a>(void);", 
"void <a class=\"id\" href=\"#dmaengine_put\">dmaengine_put</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dmaengine_get\">dmaengine_get</a>(void)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dmaengine_put\">dmaengine_put</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_DMA\">CONFIG_NET_DMA</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#net_dmaengine_get\">net_dmaengine_get</a>()<span class=\"ts\"/><a class=\"id\" href=\"#dmaengine_get\">dmaengine_get</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#net_dmaengine_put\">net_dmaengine_put</a>()<span class=\"ts\"/><a class=\"id\" href=\"#dmaengine_put\">dmaengine_put</a>()", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#net_dmaengine_get\">net_dmaengine_get</a>(void)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#net_dmaengine_put\">net_dmaengine_put</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ASYNC_TX_DMA\">CONFIG_ASYNC_TX_DMA</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#async_dmaengine_get\">async_dmaengine_get</a>()<span class=\"ts\"/><a class=\"id\" href=\"#dmaengine_get\">dmaengine_get</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#async_dmaengine_put\">async_dmaengine_put</a>()<span class=\"ts\"/><a class=\"id\" href=\"#dmaengine_put\">dmaengine_put</a>()", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ASYNC_TX_DISABLE_CHANNEL_SWITCH\">CONFIG_ASYNC_TX_DISABLE_CHANNEL_SWITCH</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#async_dma_find_channel\">async_dma_find_channel</a>(<a class=\"id\" href=\"#type\">type</a>) <a class=\"id\" href=\"#dma_find_channel\">dma_find_channel</a>(<a class=\"id\" href=\"#DMA_ASYNC_TX\">DMA_ASYNC_TX</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#async_dma_find_channel\">async_dma_find_channel</a>(<a class=\"id\" href=\"#type\">type</a>) <a class=\"id\" href=\"#dma_find_channel\">dma_find_channel</a>(<a class=\"id\" href=\"#type\">type</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ASYNC_TX_DISABLE_CHANNEL_SWITCH */</span>", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#async_dmaengine_get\">async_dmaengine_get</a>(void)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#async_dmaengine_put\">async_dmaengine_put</a>(void)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *", 
"<a class=\"id\" href=\"#async_dma_find_channel\">async_dma_find_channel</a>(enum <a class=\"id\" href=\"#dma_transaction_type\">dma_transaction_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ASYNC_TX_DMA */</span>", 
"", 
"<a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#dma_async_memcpy_buf_to_buf\">dma_async_memcpy_buf_to_buf</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>,", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#dest\">dest</a>, void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"<a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#dma_async_memcpy_buf_to_pg\">dma_async_memcpy_buf_to_pg</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int <a class=\"id\" href=\"#offset\">offset</a>, void *<a class=\"id\" href=\"#kdata\">kdata</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"<a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#dma_async_memcpy_pg_to_pg\">dma_async_memcpy_pg_to_pg</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#dest_pg\">dest_pg</a>, unsigned int <a class=\"id\" href=\"#dest_off\">dest_off</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#src_pg\">src_pg</a>,", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#src_off\">src_off</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"void <a class=\"id\" href=\"#dma_async_tx_descriptor_init\">dma_async_tx_descriptor_init</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#async_tx_ack\">async_tx_ack</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#DMA_CTRL_ACK\">DMA_CTRL_ACK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#async_tx_clear_ack\">async_tx_clear_ack</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#DMA_CTRL_ACK\">DMA_CTRL_ACK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#async_tx_test_ack\">async_tx_test_ack</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DMA_CTRL_ACK\">DMA_CTRL_ACK</a>) == <a class=\"id\" href=\"#DMA_CTRL_ACK\">DMA_CTRL_ACK</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#first_dma_cap\">first_dma_cap</a>(<a class=\"id\" href=\"#mask\">mask</a>) <a class=\"id\" href=\"#__first_dma_cap\">__first_dma_cap</a>(&amp;(<a class=\"id\" href=\"#mask\">mask</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__first_dma_cap\">__first_dma_cap</a>(const <a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#DMA_TX_TYPE_END\">DMA_TX_TYPE_END</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>(<a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#DMA_TX_TYPE_END\">DMA_TX_TYPE_END</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#next_dma_cap\">next_dma_cap</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#mask\">mask</a>) <a class=\"id\" href=\"#__next_dma_cap\">__next_dma_cap</a>((<a class=\"id\" href=\"#n\">n</a>), &amp;(<a class=\"id\" href=\"#mask\">mask</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__next_dma_cap\">__next_dma_cap</a>(int <a class=\"id\" href=\"#n\">n</a>, const <a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#DMA_TX_TYPE_END\">DMA_TX_TYPE_END</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#DMA_TX_TYPE_END\">DMA_TX_TYPE_END</a>, <a class=\"id\" href=\"#n\">n</a>+1));", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dma_cap_set\">dma_cap_set</a>(<a class=\"id\" href=\"#tx\">tx</a>, <a class=\"id\" href=\"#mask\">mask</a>) <a class=\"id\" href=\"#__dma_cap_set\">__dma_cap_set</a>((<a class=\"id\" href=\"#tx\">tx</a>), &amp;(<a class=\"id\" href=\"#mask\">mask</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__dma_cap_set\">__dma_cap_set</a>(enum <a class=\"id\" href=\"#dma_transaction_type\">dma_transaction_type</a> <a class=\"id\" href=\"#tx_type\">tx_type</a>, <a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#tx_type\">tx_type</a>, <a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dma_cap_clear\">dma_cap_clear</a>(<a class=\"id\" href=\"#tx\">tx</a>, <a class=\"id\" href=\"#mask\">mask</a>) <a class=\"id\" href=\"#__dma_cap_clear\">__dma_cap_clear</a>((<a class=\"id\" href=\"#tx\">tx</a>), &amp;(<a class=\"id\" href=\"#mask\">mask</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__dma_cap_clear\">__dma_cap_clear</a>(enum <a class=\"id\" href=\"#dma_transaction_type\">dma_transaction_type</a> <a class=\"id\" href=\"#tx_type\">tx_type</a>, <a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#tx_type\">tx_type</a>, <a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dma_cap_zero\">dma_cap_zero</a>(<a class=\"id\" href=\"#mask\">mask</a>) <a class=\"id\" href=\"#__dma_cap_zero\">__dma_cap_zero</a>(&amp;(<a class=\"id\" href=\"#mask\">mask</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__dma_cap_zero\">__dma_cap_zero</a>(<a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#DMA_TX_TYPE_END\">DMA_TX_TYPE_END</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#tx\">tx</a>, <a class=\"id\" href=\"#mask\">mask</a>) <a class=\"id\" href=\"#__dma_has_cap\">__dma_has_cap</a>((<a class=\"id\" href=\"#tx\">tx</a>), &amp;(<a class=\"id\" href=\"#mask\">mask</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#__dma_has_cap\">__dma_has_cap</a>(enum <a class=\"id\" href=\"#dma_transaction_type\">dma_transaction_type</a> <a class=\"id\" href=\"#tx_type\">tx_type</a>, <a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#tx_type\">tx_type</a>, <a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_dma_cap_mask\">for_each_dma_cap_mask</a>(<a class=\"id\" href=\"#cap\">cap</a>, <a class=\"id\" href=\"#mask\">mask</a>) \\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cap\">cap</a>) = <a class=\"id\" href=\"#first_dma_cap\">first_dma_cap</a>(<a class=\"id\" href=\"#mask\">mask</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cap\">cap</a>) &lt; <a class=\"id\" href=\"#DMA_TX_TYPE_END\">DMA_TX_TYPE_END</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cap\">cap</a>) = <a class=\"id\" href=\"#next_dma_cap\">next_dma_cap</a>((<a class=\"id\" href=\"#cap\">cap</a>), (<a class=\"id\" href=\"#mask\">mask</a>)))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_async_issue_pending - flush pending transactions to HW</span>", 
"<span class=\"comment\"> * @chan: target DMA channel</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This allows drivers to push copies to HW in batches,</span>", 
"<span class=\"comment\"> * reducing MMIO writes where possible.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dma_async_issue_pending\">dma_async_issue_pending</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_issue_pending\">device_issue_pending</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dma_async_memcpy_issue_pending\">dma_async_memcpy_issue_pending</a>(<a class=\"id\" href=\"#chan\">chan</a>) <a class=\"id\" href=\"#dma_async_issue_pending\">dma_async_issue_pending</a>(<a class=\"id\" href=\"#chan\">chan</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_async_is_tx_complete - poll for transaction completion</span>", 
"<span class=\"comment\"> * @chan: DMA channel</span>", 
"<span class=\"comment\"> * @cookie: transaction identifier to check status of</span>", 
"<span class=\"comment\"> * @last: returns last completed cookie, can be NULL</span>", 
"<span class=\"comment\"> * @used: returns last issued cookie, can be NULL</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @last and @used are passed in, upon return they reflect the driver</span>", 
"<span class=\"comment\"> * internal state and can be used with dma_async_is_complete() to check</span>", 
"<span class=\"comment\"> * the status of multiple cookies without re-checking hardware state.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> enum <a class=\"id\" href=\"#dma_status\">dma_status</a> <a class=\"id\" href=\"#dma_async_is_tx_complete\">dma_async_is_tx_complete</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> *<a class=\"id\" href=\"#last\">last</a>, <a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> *<a class=\"id\" href=\"#used\">used</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_tx_state\">dma_tx_state</a> <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_status\">dma_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_tx_status\">device_tx_status</a>(<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#cookie\">cookie</a>, &amp;<a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#used\">used</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#used\">used</a> = <a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#used\">used</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dma_async_memcpy_complete\">dma_async_memcpy_complete</a>(<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#last\">last</a>, <a class=\"id\" href=\"#used\">used</a>)\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_async_is_tx_complete\">dma_async_is_tx_complete</a>(<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#last\">last</a>, <a class=\"id\" href=\"#used\">used</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_async_is_complete - test a cookie against chan state</span>", 
"<span class=\"comment\"> * @cookie: transaction identifier to test status of</span>", 
"<span class=\"comment\"> * @last_complete: last know completed transaction</span>", 
"<span class=\"comment\"> * @last_used: last cookie value handed out</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * dma_async_is_complete() is used in dma_async_memcpy_complete()</span>", 
"<span class=\"comment\"> * the test logic is separated for lightweight testing of multiple cookies</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> enum <a class=\"id\" href=\"#dma_status\">dma_status</a> <a class=\"id\" href=\"#dma_async_is_complete\">dma_async_is_complete</a>(<a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#last_complete\">last_complete</a>, <a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#last_used\">last_used</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#last_complete\">last_complete</a> <= <a class=\"id\" href=\"#last_used\">last_used</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cookie\">cookie</a> <= <a class=\"id\" href=\"#last_complete\">last_complete</a>) || (<a class=\"id\" href=\"#cookie\">cookie</a> &gt; <a class=\"id\" href=\"#last_used\">last_used</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_SUCCESS\">DMA_SUCCESS</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cookie\">cookie</a> <= <a class=\"id\" href=\"#last_complete\">last_complete</a>) && (<a class=\"id\" href=\"#cookie\">cookie</a> &gt; <a class=\"id\" href=\"#last_used\">last_used</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_SUCCESS\">DMA_SUCCESS</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_IN_PROGRESS\">DMA_IN_PROGRESS</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#dma_set_tx_state\">dma_set_tx_state</a>(struct <a class=\"id\" href=\"#dma_tx_state\">dma_tx_state</a> *<a class=\"id\" href=\"#st\">st</a>, <a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#last\">last</a>, <a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#used\">used</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#residue\">residue</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#st\">st</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#used\">used</a> = <a class=\"id\" href=\"#used\">used</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#residue\">residue</a> = <a class=\"id\" href=\"#residue\">residue</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"enum <a class=\"id\" href=\"#dma_status\">dma_status</a> <a class=\"id\" href=\"#dma_sync_wait\">dma_sync_wait</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DMA_ENGINE\">CONFIG_DMA_ENGINE</a>", 
"enum <a class=\"id\" href=\"#dma_status\">dma_status</a> <a class=\"id\" href=\"#dma_wait_for_async_tx\">dma_wait_for_async_tx</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>);", 
"void <a class=\"id\" href=\"#dma_issue_pending_all\">dma_issue_pending_all</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> enum <a class=\"id\" href=\"#dma_status\">dma_status</a> <a class=\"id\" href=\"#dma_wait_for_async_tx\">dma_wait_for_async_tx</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_SUCCESS\">DMA_SUCCESS</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dma_issue_pending_all\">dma_issue_pending_all</a>(void)", 
"{", 
"<span class=\"ts\"/>do { } while (0);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* --- DMA device --- */</span>", 
"", 
"int <a class=\"id\" href=\"#dma_async_device_register\">dma_async_device_register</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>);", 
"void <a class=\"id\" href=\"#dma_async_device_unregister\">dma_async_device_unregister</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>);", 
"void <a class=\"id\" href=\"#dma_run_dependencies\">dma_run_dependencies</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>);", 
"struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#dma_find_channel\">dma_find_channel</a>(enum <a class=\"id\" href=\"#dma_transaction_type\">dma_transaction_type</a> <a class=\"id\" href=\"#tx_type\">tx_type</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dma_request_channel\">dma_request_channel</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>) <a class=\"id\" href=\"#__dma_request_channel\">__dma_request_channel</a>(&amp;(<a class=\"id\" href=\"#mask\">mask</a>), <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>)", 
"struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#__dma_request_channel\">__dma_request_channel</a>(<a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#dma_filter_fn\">dma_filter_fn</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#fn_param\">fn_param</a>);", 
"void <a class=\"id\" href=\"#dma_release_channel\">dma_release_channel</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>);", 
"", 
"<span class=\"comment\">/* --- Helper iov-locking functions --- */</span>", 
"", 
"struct <a class=\"id\" href=\"#dma_page_list\">dma_page_list</a> {", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#base_address\">base_address</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dma_pinned_list\">dma_pinned_list</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_page_list\">dma_page_list</a> <a class=\"id\" href=\"#page_list\">page_list</a>[0];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dma_pinned_list\">dma_pinned_list</a> *<a class=\"id\" href=\"#dma_pin_iovec_pages\">dma_pin_iovec_pages</a>(struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"void <a class=\"id\" href=\"#dma_unpin_iovec_pages\">dma_unpin_iovec_pages</a>(struct <a class=\"id\" href=\"#dma_pinned_list\">dma_pinned_list</a>* <a class=\"id\" href=\"#pinned_list\">pinned_list</a>);", 
"", 
"<a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#dma_memcpy_to_iovec\">dma_memcpy_to_iovec</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_pinned_list\">dma_pinned_list</a> *<a class=\"id\" href=\"#pinned_list\">pinned_list</a>, unsigned char *<a class=\"id\" href=\"#kdata\">kdata</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"<a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#dma_memcpy_pg_to_iovec\">dma_memcpy_pg_to_iovec</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_pinned_list\">dma_pinned_list</a> *<a class=\"id\" href=\"#pinned_list\">pinned_list</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* DMAENGINE_H */</span>", 
];
xr_frag_insert('l/fb/341e2517df743267147fabf92bd177adda8f0b.xr', __xr_tmp);
