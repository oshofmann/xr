var __xr_tmp = [
"<span class=\"ts\"/><span class=\"comment\">/* initialize common driver fields */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#bus\">bus</a> = &amp;<a class=\"id\" href=\"#pci_bus_type\">pci_bus_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#mod_name\">mod_name</a> = <a class=\"id\" href=\"#mod_name\">mod_name</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#dynids\">dynids</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#dynids\">dynids</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* register with core */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#driver_register\">driver_register</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pci_create_newid_file\">pci_create_newid_file</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_newid\">out_newid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pci_create_removeid_file\">pci_create_removeid_file</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_removeid\">out_removeid</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<a class=\"id\" href=\"#out_removeid\">out_removeid</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_remove_newid_file\">pci_remove_newid_file</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<a class=\"id\" href=\"#out_newid\">out_newid</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver_unregister\">driver_unregister</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_unregister_driver - unregister a pci driver</span>", 
"<span class=\"comment\"> * @drv: the driver structure to unregister</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Deletes the driver structure from the list of registered PCI drivers,</span>", 
"<span class=\"comment\"> * gives it a chance to clean up by calling its remove() function for</span>", 
"<span class=\"comment\"> * each device it was responsible for, and marks those devices as</span>", 
"<span class=\"comment\"> * driverless.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#pci_unregister_driver\">pci_unregister_driver</a>(struct <a class=\"id\" href=\"#pci_driver\">pci_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_remove_removeid_file\">pci_remove_removeid_file</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_remove_newid_file\">pci_remove_newid_file</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver_unregister\">driver_unregister</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_free_dynids\">pci_free_dynids</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pci_driver\">pci_driver</a> <a class=\"id\" href=\"#pci_compat_driver\">pci_compat_driver</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"compat\"", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_dev_driver - get the pci_driver of a device</span>", 
"<span class=\"comment\"> * @dev: the device to query</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the appropriate pci_driver structure or %NULL if there is no </span>", 
"<span class=\"comment\"> * registered driver for the device.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_driver\">pci_driver</a> *", 
"<a class=\"id\" href=\"#pci_dev_driver\">pci_dev_driver</a>(const struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for(<a class=\"id\" href=\"#i\">i</a>=0; <a class=\"id\" href=\"#i\">i</a><=<a class=\"id\" href=\"#PCI_ROM_RESOURCE\">PCI_ROM_RESOURCE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_BUSY\">IORESOURCE_BUSY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#pci_compat_driver\">pci_compat_driver</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_bus_match - Tell if a PCI device structure has a matching PCI device id structure</span>", 
"<span class=\"comment\"> * @dev: the PCI device structure to match against</span>", 
"<span class=\"comment\"> * @drv: the device driver to search for matching PCI device id structures</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Used by a driver to check whether a PCI device present in the</span>", 
"<span class=\"comment\"> * system is in its list of supported devices. Returns the matching</span>", 
"<span class=\"comment\"> * pci_device_id structure or %NULL if there is no match.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pci_bus_match\">pci_bus_match</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pci_dev\">pci_dev</a> = <a class=\"id\" href=\"#to_pci_dev\">to_pci_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_driver\">pci_driver</a> *<a class=\"id\" href=\"#pci_drv\">pci_drv</a> = <a class=\"id\" href=\"#to_pci_driver\">to_pci_driver</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#pci_device_id\">pci_device_id</a> *<a class=\"id\" href=\"#found_id\">found_id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#found_id\">found_id</a> = <a class=\"id\" href=\"#pci_match_device\">pci_match_device</a>(<a class=\"id\" href=\"#pci_drv\">pci_drv</a>, <a class=\"id\" href=\"#pci_dev\">pci_dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found_id\">found_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_dev_get - increments the reference count of the pci device structure</span>", 
"<span class=\"comment\"> * @dev: the device being referenced</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each live reference to a device should be refcounted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Drivers for PCI devices should normally record such references in</span>", 
"<span class=\"comment\"> * their probe() methods, when they bind to a device, and release</span>", 
"<span class=\"comment\"> * them by calling pci_dev_put(), in their disconnect() methods.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A pointer to the device with the incremented reference counter is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pci_dev_get\">pci_dev_get</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_dev_put - release a use of the pci device structure</span>", 
"<span class=\"comment\"> * @dev: device that's been disconnected</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called when a user of a device is finished with it.  When the last</span>", 
"<span class=\"comment\"> * user of the device calls this function, the memory of the device is freed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG\">CONFIG_HOTPLUG</a>", 
"int <a class=\"id\" href=\"#pci_uevent\">pci_uevent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#kobj_uevent_env\">kobj_uevent_env</a> *<a class=\"id\" href=\"#env\">env</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#bus_type\">bus_type</a> <a class=\"id\" href=\"#pci_bus_type\">pci_bus_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"pci\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#match\">match</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pci_bus_match\">pci_bus_match</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#uevent\">uevent</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pci_uevent\">pci_uevent</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#probe\">probe</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pci_device_probe\">pci_device_probe</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#remove\">remove</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pci_device_remove\">pci_device_remove</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shutdown\">shutdown</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pci_device_shutdown\">pci_device_shutdown</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dev_attrs\">dev_attrs</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pci_dev_attrs\">pci_dev_attrs</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bus_attrs\">bus_attrs</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pci_bus_attrs\">pci_bus_attrs</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pm\">pm</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#PCI_PM_OPS_PTR\">PCI_PM_OPS_PTR</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pci_driver_init\">pci_driver_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bus_register\">bus_register</a>(&amp;<a class=\"id\" href=\"#pci_bus_type\">pci_bus_type</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#postcore_initcall\">postcore_initcall</a>(<a class=\"id\" href=\"#pci_driver_init\">pci_driver_init</a>);", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_add_dynid\">pci_add_dynid</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_match_id\">pci_match_id</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__pci_register_driver\">__pci_register_driver</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_unregister_driver\">pci_unregister_driver</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_dev_driver\">pci_dev_driver</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_bus_type\">pci_bus_type</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_dev_get\">pci_dev_get</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>);", 
];
xr_frag_insert('l/fb/36a241ba188f7a371b435609cbc3c7ccc42a82.xr', __xr_tmp);
