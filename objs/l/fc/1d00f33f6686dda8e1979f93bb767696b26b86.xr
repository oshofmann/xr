var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright(c) 2004 - 2006 Intel Corporation. All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify it</span>", 
"<span class=\"comment\"> * under the terms of the GNU General Public License as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation; either version 2 of the License, or (at your option)</span>", 
"<span class=\"comment\"> * any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but WITHOUT</span>", 
"<span class=\"comment\"> * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span>", 
"<span class=\"comment\"> * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for</span>", 
"<span class=\"comment\"> * more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License along with</span>", 
"<span class=\"comment\"> * this program; if not, write to the Free Software Foundation, Inc., 59</span>", 
"<span class=\"comment\"> * Temple Place - Suite 330, Boston, MA  02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The full GNU General Public License is included in this distribution in the</span>", 
"<span class=\"comment\"> * file called COPYING.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This code implements the DMA subsystem. It provides a HW-neutral interface</span>", 
"<span class=\"comment\"> * for other kernel code to use asynchronous memory copy capabilities,</span>", 
"<span class=\"comment\"> * if present, and allows different HW DMA drivers to register as providing</span>", 
"<span class=\"comment\"> * this capability.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Due to the fact we are accelerating what is already a relatively fast</span>", 
"<span class=\"comment\"> * operation, the code goes to great lengths to avoid additional overhead,</span>", 
"<span class=\"comment\"> * such as locking.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The subsystem keeps a global list of dma_device structs it is protected by a</span>", 
"<span class=\"comment\"> * mutex, dma_list_mutex.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A subsystem can get access to a channel by calling dmaengine_get() followed</span>", 
"<span class=\"comment\"> * by dma_find_channel(), or if it has need for an exclusive channel it can call</span>", 
"<span class=\"comment\"> * dma_request_channel().  Once a channel is allocated a reference is taken</span>", 
"<span class=\"comment\"> * against its corresponding driver to disable removal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each device has a channels list, which runs unlocked but is never modified</span>", 
"<span class=\"comment\"> * once the device is registered, it's just setup by the driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See Documentation/dmaengine.txt for more details</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmaengine\">dmaengine</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rculist\">rculist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#dma_device_list\">dma_device_list</a>);", 
"static long <a class=\"id\" href=\"#dmaengine_ref_count\">dmaengine_ref_count</a>;", 
"static struct <a class=\"id\" href=\"#idr\">idr</a> <a class=\"id\" href=\"#dma_idr\">dma_idr</a>;", 
"", 
"<span class=\"comment\">/* --- sysfs implementation --- */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dev_to_dma_chan - convert a device pointer to the its sysfs container object</span>", 
"<span class=\"comment\"> * @dev - device node</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called under dma_list_mutex</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#dev_to_dma_chan\">dev_to_dma_chan</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan_dev\">dma_chan_dev</a> *<a class=\"id\" href=\"#chan_dev\">chan_dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chan_dev\">chan_dev</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#chan_dev\">chan_dev</a>), <a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#chan_dev\">chan_dev</a>-><a class=\"id\" href=\"#chan\">chan</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_memcpy_count\">show_memcpy_count</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#dev_to_dma_chan\">dev_to_dma_chan</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>, <a class=\"id\" href=\"#i\">i</a>)-><a class=\"id\" href=\"#memcpy_count\">memcpy_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu\\n\", <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_bytes_transferred\">show_bytes_transferred</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#dev_to_dma_chan\">dev_to_dma_chan</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>, <a class=\"id\" href=\"#i\">i</a>)-><a class=\"id\" href=\"#bytes_transferred\">bytes_transferred</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu\\n\", <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_in_use\">show_in_use</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#dev_to_dma_chan\">dev_to_dma_chan</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a>[] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#memcpy_count\">memcpy_count</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#show_memcpy_count\">show_memcpy_count</a>, <a class=\"id\" href=\"#NULL\">NULL</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#bytes_transferred\">bytes_transferred</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#show_bytes_transferred\">show_bytes_transferred</a>, <a class=\"id\" href=\"#NULL\">NULL</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#in_use\">in_use</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#show_in_use\">show_in_use</a>, <a class=\"id\" href=\"#NULL\">NULL</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR_NULL\">__ATTR_NULL</a>", 
"};", 
"", 
"static void <a class=\"id\" href=\"#chan_dev_release\">chan_dev_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan_dev\">dma_chan_dev</a> *<a class=\"id\" href=\"#chan_dev\">chan_dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chan_dev\">chan_dev</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#chan_dev\">chan_dev</a>), <a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(<a class=\"id\" href=\"#chan_dev\">chan_dev</a>-><a class=\"id\" href=\"#idr_ref\">idr_ref</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr_remove\">idr_remove</a>(&amp;<a class=\"id\" href=\"#dma_idr\">dma_idr</a>, <a class=\"id\" href=\"#chan_dev\">chan_dev</a>-><a class=\"id\" href=\"#dev_id\">dev_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#chan_dev\">chan_dev</a>-><a class=\"id\" href=\"#idr_ref\">idr_ref</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#chan_dev\">chan_dev</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#class\">class</a> <a class=\"id\" href=\"#dma_devclass\">dma_devclass</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"dma\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dev_attrs\">dev_attrs</a><span class=\"ts\"/>= <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dev_release\">dev_release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#chan_dev_release\">chan_dev_release</a>,", 
"};", 
"", 
"<span class=\"comment\">/* --- client and device registration --- */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dma_device_satisfies_mask\">dma_device_satisfies_mask</a>(<a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#mask\">mask</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dma_device_satisfies_mask\">__dma_device_satisfies_mask</a>((<a class=\"id\" href=\"#device\">device</a>), &amp;(<a class=\"id\" href=\"#mask\">mask</a>))", 
"static int", 
"<a class=\"id\" href=\"#__dma_device_satisfies_mask\">__dma_device_satisfies_mask</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a> *<a class=\"id\" href=\"#want\">want</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a> <a class=\"id\" href=\"#has\">has</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_and\">bitmap_and</a>(<a class=\"id\" href=\"#has\">has</a>.<a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#want\">want</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>.<a class=\"id\" href=\"#bits\">bits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMA_TX_TYPE_END\">DMA_TX_TYPE_END</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_equal\">bitmap_equal</a>(<a class=\"id\" href=\"#want\">want</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#has\">has</a>.<a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#DMA_TX_TYPE_END\">DMA_TX_TYPE_END</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#dma_chan_to_owner\">dma_chan_to_owner</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#owner\">owner</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * balance_ref_count - catch up the channel reference count</span>", 
"<span class=\"comment\"> * @chan - channel to balance -&gt;client_count versus dmaengine_ref_count</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * balance_ref_count must be called under dma_list_mutex</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#balance_ref_count\">balance_ref_count</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#dma_chan_to_owner\">dma_chan_to_owner</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a> &lt; <a class=\"id\" href=\"#dmaengine_ref_count\">dmaengine_ref_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__module_get\">__module_get</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_chan_get - try to grab a dma channel's parent driver module</span>", 
"<span class=\"comment\"> * @chan - channel to grab</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called under dma_list_mutex</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dma_chan_get\">dma_chan_get</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#dma_chan_to_owner\">dma_chan_to_owner</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__module_get\">__module_get</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate upon first client reference */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a> == 1 && <a class=\"id\" href=\"#err\">err</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#desc_cnt\">desc_cnt</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_alloc_chan_resources\">device_alloc_chan_resources</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#desc_cnt\">desc_cnt</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#desc_cnt\">desc_cnt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balance_ref_count\">balance_ref_count</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_chan_put - drop a reference to a dma channel's parent driver module</span>", 
"<span class=\"comment\"> * @chan - channel to release</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called under dma_list_mutex</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dma_chan_put\">dma_chan_put</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return; <span class=\"comment\">/* this channel failed alloc_chan_resources */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#dma_chan_to_owner\">dma_chan_to_owner</a>(<a class=\"id\" href=\"#chan\">chan</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_free_chan_resources\">device_free_chan_resources</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"}", 
"", 
"enum <a class=\"id\" href=\"#dma_status\">dma_status</a> <a class=\"id\" href=\"#dma_sync_wait\">dma_sync_wait</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_status\">dma_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dma_sync_wait_timeout\">dma_sync_wait_timeout</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(5000);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_async_issue_pending\">dma_async_issue_pending</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#dma_async_is_tx_complete\">dma_async_is_tx_complete</a>(<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#dma_sync_wait_timeout\">dma_sync_wait_timeout</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"dma_sync_wait_timeout!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_ERROR\">DMA_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#DMA_IN_PROGRESS\">DMA_IN_PROGRESS</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_sync_wait\">dma_sync_wait</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_cap_mask_all - enable iteration over all operation types</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a> <a class=\"id\" href=\"#dma_cap_mask_all\">dma_cap_mask_all</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_chan_tbl_ent - tracks channel allocations per core/operation</span>", 
"<span class=\"comment\"> * @chan - associated channel for this entry</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dma_chan_tbl_ent\">dma_chan_tbl_ent</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * channel_table - percpu lookup table for memory-to-memory offload providers</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#dma_chan_tbl_ent\">dma_chan_tbl_ent</a> <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#channel_table\">channel_table</a>[<a class=\"id\" href=\"#DMA_TX_TYPE_END\">DMA_TX_TYPE_END</a>];", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dma_channel_table_init\">dma_channel_table_init</a>(void)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_transaction_type\">dma_transaction_type</a> <a class=\"id\" href=\"#cap\">cap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_fill\">bitmap_fill</a>(<a class=\"id\" href=\"#dma_cap_mask_all\">dma_cap_mask_all</a>.<a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#DMA_TX_TYPE_END\">DMA_TX_TYPE_END</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 'interrupt', 'private', and 'slave' are channel capabilities,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but are not associated with an operation so they do not need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an entry in the channel_table</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#DMA_INTERRUPT\">DMA_INTERRUPT</a>, <a class=\"id\" href=\"#dma_cap_mask_all\">dma_cap_mask_all</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#dma_cap_mask_all\">dma_cap_mask_all</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#DMA_SLAVE\">DMA_SLAVE</a>, <a class=\"id\" href=\"#dma_cap_mask_all\">dma_cap_mask_all</a>.<a class=\"id\" href=\"#bits\">bits</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_dma_cap_mask\">for_each_dma_cap_mask</a>(<a class=\"id\" href=\"#cap\">cap</a>, <a class=\"id\" href=\"#dma_cap_mask_all\">dma_cap_mask_all</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#channel_table\">channel_table</a>[<a class=\"id\" href=\"#cap\">cap</a>] = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(struct <a class=\"id\" href=\"#dma_chan_tbl_ent\">dma_chan_tbl_ent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#channel_table\">channel_table</a>[<a class=\"id\" href=\"#cap\">cap</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"dmaengine: initialization failure\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_dma_cap_mask\">for_each_dma_cap_mask</a>(<a class=\"id\" href=\"#cap\">cap</a>, <a class=\"id\" href=\"#dma_cap_mask_all\">dma_cap_mask_all</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#channel_table\">channel_table</a>[<a class=\"id\" href=\"#cap\">cap</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#channel_table\">channel_table</a>[<a class=\"id\" href=\"#cap\">cap</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#arch_initcall\">arch_initcall</a>(<a class=\"id\" href=\"#dma_channel_table_init\">dma_channel_table_init</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_find_channel - find a channel to carry out the operation</span>", 
"<span class=\"comment\"> * @tx_type: transaction type</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#dma_find_channel\">dma_find_channel</a>(enum <a class=\"id\" href=\"#dma_transaction_type\">dma_transaction_type</a> <a class=\"id\" href=\"#tx_type\">tx_type</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#this_cpu_read\">this_cpu_read</a>(<a class=\"id\" href=\"#channel_table\">channel_table</a>[<a class=\"id\" href=\"#tx_type\">tx_type</a>]-><a class=\"id\" href=\"#chan\">chan</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_find_channel\">dma_find_channel</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_issue_pending_all - flush all pending operations across all channels</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dma_issue_pending_all\">dma_issue_pending_all</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#device\">device</a>, &amp;<a class=\"id\" href=\"#dma_device_list\">dma_device_list</a>, <a class=\"id\" href=\"#global_node\">global_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#chan\">chan</a>, &amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#device_node\">device_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_issue_pending\">device_issue_pending</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_issue_pending_all\">dma_issue_pending_all</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nth_chan - returns the nth channel of the given capability</span>", 
"<span class=\"comment\"> * @cap: capability to match</span>", 
"<span class=\"comment\"> * @n: nth channel desired</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Defaults to returning the channel with the desired capability and the</span>", 
"<span class=\"comment\"> * lowest reference count when 'n' cannot be satisfied.  Must be called</span>", 
"<span class=\"comment\"> * under dma_list_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#nth_chan\">nth_chan</a>(enum <a class=\"id\" href=\"#dma_transaction_type\">dma_transaction_type</a> <a class=\"id\" href=\"#cap\">cap</a>, int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#min\">min</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#device\">device</a>, &amp;<a class=\"id\" href=\"#dma_device_list\">dma_device_list</a>, <a class=\"id\" href=\"#global_node\">global_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#cap\">cap</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#chan\">chan</a>, &amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#device_node\">device_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#min\">min</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a> = <a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#table_count\">table_count</a> &lt; <a class=\"id\" href=\"#min\">min</a>-><a class=\"id\" href=\"#table_count\">table_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a> = <a class=\"id\" href=\"#chan\">chan</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>-- == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break; <span class=\"comment\">/* done */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break; <span class=\"comment\">/* done */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#min\">min</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>-><a class=\"id\" href=\"#table_count\">table_count</a>++;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_channel_rebalance - redistribute the available channels</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Optimize for cpu isolation (each cpu gets a dedicated channel for an</span>", 
"<span class=\"comment\"> * operation type) in the SMP case,  and operation isolation (avoid</span>", 
"<span class=\"comment\"> * multi-tasking channels) in the non-SMP case.  Must be called under</span>", 
"<span class=\"comment\"> * dma_list_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dma_channel_rebalance\">dma_channel_rebalance</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cap\">cap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* undo the last distribution */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_dma_cap_mask\">for_each_dma_cap_mask</a>(<a class=\"id\" href=\"#cap\">cap</a>, <a class=\"id\" href=\"#dma_cap_mask_all\">dma_cap_mask_all</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#channel_table\">channel_table</a>[<a class=\"id\" href=\"#cap\">cap</a>], <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#device\">device</a>, &amp;<a class=\"id\" href=\"#dma_device_list\">dma_device_list</a>, <a class=\"id\" href=\"#global_node\">global_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#chan\">chan</a>, &amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#device_node\">device_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#table_count\">table_count</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* don't populate the channel_table if no clients are available */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dmaengine_ref_count\">dmaengine_ref_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* redistribute available channels */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_dma_cap_mask\">for_each_dma_cap_mask</a>(<a class=\"id\" href=\"#cap\">cap</a>, <a class=\"id\" href=\"#dma_cap_mask_all\">dma_cap_mask_all</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>() &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#nth_chan\">nth_chan</a>(<a class=\"id\" href=\"#cap\">cap</a>, <a class=\"id\" href=\"#n\">n</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#nth_chan\">nth_chan</a>(<a class=\"id\" href=\"#cap\">cap</a>, -1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#channel_table\">channel_table</a>[<a class=\"id\" href=\"#cap\">cap</a>], <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#private_candidate\">private_candidate</a>(<a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dma_filter_fn\">dma_filter_fn</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#fn_param\">fn_param</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#__dma_device_satisfies_mask\">__dma_device_satisfies_mask</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#mask\">mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: wrong capabilities\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* devices with multiple channels need special handling as we need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ensure that all channels are either private or public.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#chancnt\">chancnt</a> &gt; 1 && !<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#chan\">chan</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#device_node\">device_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* some channels are already publicly allocated */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#chan\">chan</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#device_node\">device_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: %s busy\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#dma_chan_name\">dma_chan_name</a>(<a class=\"id\" href=\"#chan\">chan</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fn\">fn</a> && !<a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#fn_param\">fn_param</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: %s filter said false\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#dma_chan_name\">dma_chan_name</a>(<a class=\"id\" href=\"#chan\">chan</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_request_channel - try to allocate an exclusive channel</span>", 
"<span class=\"comment\"> * @mask: capabilities that the channel must satisfy</span>", 
"<span class=\"comment\"> * @fn: optional callback to disposition available channels</span>", 
"<span class=\"comment\"> * @fn_param: opaque parameter to pass to dma_filter_fn</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#__dma_request_channel\">__dma_request_channel</a>(<a class=\"id\" href=\"#dma_cap_mask_t\">dma_cap_mask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#dma_filter_fn\">dma_filter_fn</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#fn_param\">fn_param</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>, *<a class=\"id\" href=\"#_d\">_d</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find a channel */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#_d\">_d</a>, &amp;<a class=\"id\" href=\"#dma_device_list\">dma_device_list</a>, <a class=\"id\" href=\"#global_node\">global_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#private_candidate\">private_candidate</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#fn_param\">fn_param</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Found a suitable channel, try to grab, prep, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * return it.  We first set DMA_PRIVATE to disable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * balance_ref_count as this channel will not be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * published in the general-purpose allocator</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_cap_set\">dma_cap_set</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#privatecnt\">privatecnt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#dma_chan_get\">dma_chan_get</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: %s module removed\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#dma_chan_name\">dma_chan_name</a>(<a class=\"id\" href=\"#chan\">chan</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#global_node\">global_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"dmaengine: failed to get %s: (%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dma_chan_name\">dma_chan_name</a>(<a class=\"id\" href=\"#chan\">chan</a>), <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#privatecnt\">privatecnt</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_cap_clear\">dma_cap_clear</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: %s (%s)\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#chan\">chan</a> ? \"success\" : \"fail\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#chan\">chan</a> ? <a class=\"id\" href=\"#dma_chan_name\">dma_chan_name</a>(<a class=\"id\" href=\"#chan\">chan</a>) : <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#chan\">chan</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__dma_request_channel\">__dma_request_channel</a>);", 
"", 
"void <a class=\"id\" href=\"#dma_release_channel\">dma_release_channel</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a> != 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>  \"chan reference count %d != 1\\n\", <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_chan_put\">dma_chan_put</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* drop PRIVATE cap enabled by __dma_request_channel() */</span>", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#privatecnt\">privatecnt</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_cap_clear\">dma_cap_clear</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dma_release_channel\">dma_release_channel</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dmaengine_get - register interest in dma_channels</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dmaengine_get\">dmaengine_get</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>, *<a class=\"id\" href=\"#_d\">_d</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmaengine_ref_count\">dmaengine_ref_count</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* try to grab channels */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#_d\">_d</a>, &amp;<a class=\"id\" href=\"#dma_device_list\">dma_device_list</a>, <a class=\"id\" href=\"#global_node\">global_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#chan\">chan</a>, &amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#device_node\">device_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#dma_chan_get\">dma_chan_get</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* module removed before we could use it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#global_node\">global_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"dmaengine: failed to get %s: (%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dma_chan_name\">dma_chan_name</a>(<a class=\"id\" href=\"#chan\">chan</a>), <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if this is the first reference and there were channels</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * waiting we need to rebalance to get those channels</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * incorporated into the channel table</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmaengine_ref_count\">dmaengine_ref_count</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_channel_rebalance\">dma_channel_rebalance</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dmaengine_get\">dmaengine_get</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dmaengine_put - let dma drivers be removed when ref_count == 0</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dmaengine_put\">dmaengine_put</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmaengine_ref_count\">dmaengine_ref_count</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dmaengine_ref_count\">dmaengine_ref_count</a> &lt; 0);", 
"<span class=\"ts\"/><span class=\"comment\">/* drop channel references */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#device\">device</a>, &amp;<a class=\"id\" href=\"#dma_device_list\">dma_device_list</a>, <a class=\"id\" href=\"#global_node\">global_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#chan\">chan</a>, &amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#device_node\">device_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_chan_put\">dma_chan_put</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dmaengine_put\">dmaengine_put</a>);", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#device_has_all_tx_types\">device_has_all_tx_types</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* A device that satisfies this test has channels that will never cause</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an async_tx channel switch event as all possible operation types can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be handled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ASYNC_TX_DMA\">CONFIG_ASYNC_TX_DMA</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_INTERRUPT\">DMA_INTERRUPT</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ASYNC_MEMCPY\">CONFIG_ASYNC_MEMCPY</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ASYNC_MEMCPY_MODULE\">CONFIG_ASYNC_MEMCPY_MODULE</a>)", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_MEMCPY\">DMA_MEMCPY</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ASYNC_MEMSET\">CONFIG_ASYNC_MEMSET</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ASYNC_MEMSET_MODULE\">CONFIG_ASYNC_MEMSET_MODULE</a>)", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_MEMSET\">DMA_MEMSET</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ASYNC_XOR\">CONFIG_ASYNC_XOR</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ASYNC_XOR_MODULE\">CONFIG_ASYNC_XOR_MODULE</a>)", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_XOR\">DMA_XOR</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_ASYNC_TX_DISABLE_XOR_VAL_DMA\">CONFIG_ASYNC_TX_DISABLE_XOR_VAL_DMA</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_XOR_VAL\">DMA_XOR_VAL</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ASYNC_PQ\">CONFIG_ASYNC_PQ</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ASYNC_PQ_MODULE\">CONFIG_ASYNC_PQ_MODULE</a>)", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PQ\">DMA_PQ</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_ASYNC_TX_DISABLE_PQ_VAL_DMA\">CONFIG_ASYNC_TX_DISABLE_PQ_VAL_DMA</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PQ_VAL\">DMA_PQ_VAL</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#get_dma_id\">get_dma_id</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
" <a class=\"id\" href=\"#idr_retry\">idr_retry</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>(&amp;<a class=\"id\" href=\"#dma_idr\">dma_idr</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#idr_get_new\">idr_get_new</a>(&amp;<a class=\"id\" href=\"#dma_idr\">dma_idr</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#dev_id\">dev_id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#idr_retry\">idr_retry</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_async_device_register - registers DMA devices found</span>", 
"<span class=\"comment\"> * @device: &amp;dma_device</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dma_async_device_register\">dma_async_device_register</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#chancnt\">chancnt</a> = 0, <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a>* <a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#idr_ref\">idr_ref</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#device\">device</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* validate device routines */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_MEMCPY\">DMA_MEMCPY</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_prep_dma_memcpy\">device_prep_dma_memcpy</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_XOR\">DMA_XOR</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_prep_dma_xor\">device_prep_dma_xor</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_XOR_VAL\">DMA_XOR_VAL</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_prep_dma_xor_val\">device_prep_dma_xor_val</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PQ\">DMA_PQ</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_prep_dma_pq\">device_prep_dma_pq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PQ_VAL\">DMA_PQ_VAL</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_prep_dma_pq_val\">device_prep_dma_pq_val</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_MEMSET\">DMA_MEMSET</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_prep_dma_memset\">device_prep_dma_memset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_INTERRUPT\">DMA_INTERRUPT</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_prep_dma_interrupt\">device_prep_dma_interrupt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_SLAVE\">DMA_SLAVE</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_prep_slave_sg\">device_prep_slave_sg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_SLAVE\">DMA_SLAVE</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_control\">device_control</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_alloc_chan_resources\">device_alloc_chan_resources</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_free_chan_resources\">device_free_chan_resources</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_tx_status\">device_tx_status</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_issue_pending\">device_issue_pending</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* note: this only matters in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CONFIG_ASYNC_TX_DISABLE_CHANNEL_SWITCH=y case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#device_has_all_tx_types\">device_has_all_tx_types</a>(<a class=\"id\" href=\"#device\">device</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_cap_set\">dma_cap_set</a>(<a class=\"id\" href=\"#DMA_ASYNC_TX\">DMA_ASYNC_TX</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_ref\">idr_ref</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#idr_ref\">idr_ref</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#idr_ref\">idr_ref</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#get_dma_id\">get_dma_id</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#idr_ref\">idr_ref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(<a class=\"id\" href=\"#idr_ref\">idr_ref</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* represent channels in sysfs. Probably want devs too */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#chan\">chan</a>, &amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#device_node\">device_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(<a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#chan_id\">chan_id</a> = <a class=\"id\" href=\"#chancnt\">chancnt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#class\">class</a> = &amp;<a class=\"id\" href=\"#dma_devclass\">dma_devclass</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#idr_ref\">idr_ref</a> = <a class=\"id\" href=\"#idr_ref\">idr_ref</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_id\">dev_id</a> = <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#dev_id\">dev_id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(<a class=\"id\" href=\"#idr_ref\">idr_ref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(&amp;<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>, \"dma%dchan%d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#dev_id\">dev_id</a>, <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#chan_id\">chan_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#device_register\">device_register</a>(&amp;<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
];
xr_frag_insert('l/fc/1d00f33f6686dda8e1979f93bb767696b26b86.xr', __xr_tmp);
