var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hrtimer\">hrtimer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#profile\">profile</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tick\">tick</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#irq_regs\">irq_regs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"tick-internal.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Per cpu nohz control structure</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a>, <a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The time, when the last jiffy update happened. Protected by xtime_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#last_jiffies_update\">last_jiffies_update</a>;", 
"", 
"struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#tick_get_tick_sched\">tick_get_tick_sched</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Must be called with interrupts disabled !</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_do_update_jiffies64\">tick_do_update_jiffies64</a>(<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ticks\">ticks</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do a quick check without holding xtime_lock:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#last_jiffies_update\">last_jiffies_update</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &lt; <a class=\"id\" href=\"#tick_period\">tick_period</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reevalute with xtime_lock held */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_seqlock\">write_seqlock</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#last_jiffies_update\">last_jiffies_update</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> >= <a class=\"id\" href=\"#tick_period\">tick_period</a>.<a class=\"id\" href=\"#tv64\">tv64</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_jiffies_update\">last_jiffies_update</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#last_jiffies_update\">last_jiffies_update</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Slow path for long timeouts */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#delta\">delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> >= <a class=\"id\" href=\"#tick_period\">tick_period</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#incr\">incr</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ticks\">ticks</a> = <a class=\"id\" href=\"#ktime_divns\">ktime_divns</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#incr\">incr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_jiffies_update\">last_jiffies_update</a> = <a class=\"id\" href=\"#ktime_add_ns\">ktime_add_ns</a>(<a class=\"id\" href=\"#last_jiffies_update\">last_jiffies_update</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#incr\">incr</a> * <a class=\"id\" href=\"#ticks\">ticks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_timer\">do_timer</a>(++<a class=\"id\" href=\"#ticks\">ticks</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Keep the tick_next_period variable up to date */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_next_period\">tick_next_period</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#last_jiffies_update\">last_jiffies_update</a>, <a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_sequnlock\">write_sequnlock</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize and return retrieve the jiffies update.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#tick_init_jiffy_update\">tick_init_jiffy_update</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#period\">period</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_seqlock\">write_seqlock</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Did we start the jiffies update yet ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#last_jiffies_update\">last_jiffies_update</a>.<a class=\"id\" href=\"#tv64\">tv64</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_jiffies_update\">last_jiffies_update</a> = <a class=\"id\" href=\"#tick_next_period\">tick_next_period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#last_jiffies_update\">last_jiffies_update</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_sequnlock\">write_sequnlock</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#period\">period</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOHZ - aka dynamic tick functionality</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NO HZ enabled ?</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tick_nohz_enabled\">tick_nohz_enabled</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>  = 1;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Enable / Disable tickless mode</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_tick_nohz\">setup_tick_nohz</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"off\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_nohz_enabled\">tick_nohz_enabled</a> = 0;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"on\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_nohz_enabled\">tick_nohz_enabled</a> = 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"nohz=\", <a class=\"id\" href=\"#setup_tick_nohz\">setup_tick_nohz</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tick_nohz_update_jiffies - update jiffies when idle was interrupted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called from interrupt entry when the CPU was idle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In case the sched_tick was stopped on this CPU, we have to check if jiffies</span>", 
"<span class=\"comment\"> * must be updated. Otherwise an interrupt handler could use a stale jiffy</span>", 
"<span class=\"comment\"> * value. We do this unconditionally on any cpu, as we don't know whether the</span>", 
"<span class=\"comment\"> * cpu, which has the update task assigned is in a long sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_nohz_update_jiffies\">tick_nohz_update_jiffies</a>(<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#nohz_cpu_mask\">nohz_cpu_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_waketime\">idle_waketime</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_do_update_jiffies64\">tick_do_update_jiffies64</a>(<a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_softlockup_watchdog\">touch_softlockup_watchdog</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Updates the per cpu time idle statistics counters</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#update_ts_time_stats\">update_ts_time_stats</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#last_update_time\">last_update_time</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_active\">idle_active</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_entrytime\">idle_entrytime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_sleeptime\">idle_sleeptime</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_sleeptime\">idle_sleeptime</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_iowait_cpu\">nr_iowait_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#iowait_sleeptime\">iowait_sleeptime</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#iowait_sleeptime\">iowait_sleeptime</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_entrytime\">idle_entrytime</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#last_update_time\">last_update_time</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#last_update_time\">last_update_time</a> = <a class=\"id\" href=\"#ktime_to_us\">ktime_to_us</a>(<a class=\"id\" href=\"#now\">now</a>);", 
"", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tick_nohz_stop_idle\">tick_nohz_stop_idle</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_ts_time_stats\">update_ts_time_stats</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_active\">idle_active</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_idle_wakeup_event\">sched_clock_idle_wakeup_event</a>(0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#tick_nohz_start_idle\">tick_nohz_start_idle</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_ts_time_stats\">update_ts_time_stats</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_entrytime\">idle_entrytime</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_active\">idle_active</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_idle_sleep_event\">sched_clock_idle_sleep_event</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#now\">now</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_cpu_idle_time_us - get the total idle time of a cpu</span>", 
"<span class=\"comment\"> * @cpu: CPU number to query</span>", 
"<span class=\"comment\"> * @last_update_time: variable to store update time in</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the cummulative idle time (since boot) for a given</span>", 
"<span class=\"comment\"> * CPU, in microseconds. The idle time returned includes</span>", 
"<span class=\"comment\"> * the iowait time (unlike what \"top\" and co report).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This time is measured via accounting rather than sampling,</span>", 
"<span class=\"comment\"> * and is as accurate as ktime_get() is.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns -1 if NOHZ is not enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#get_cpu_idle_time_us\">get_cpu_idle_time_us</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#last_update_time\">last_update_time</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tick_nohz_enabled\">tick_nohz_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_ts_time_stats\">update_ts_time_stats</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#ktime_get\">ktime_get</a>(), <a class=\"id\" href=\"#last_update_time\">last_update_time</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ktime_to_us\">ktime_to_us</a>(<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_sleeptime\">idle_sleeptime</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#get_cpu_idle_time_us\">get_cpu_idle_time_us</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * get_cpu_iowait_time_us - get the total iowait time of a cpu</span>", 
"<span class=\"comment\"> * @cpu: CPU number to query</span>", 
"<span class=\"comment\"> * @last_update_time: variable to store update time in</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the cummulative iowait time (since boot) for a given</span>", 
"<span class=\"comment\"> * CPU, in microseconds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This time is measured via accounting rather than sampling,</span>", 
"<span class=\"comment\"> * and is as accurate as ktime_get() is.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns -1 if NOHZ is not enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#get_cpu_iowait_time_us\">get_cpu_iowait_time_us</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#last_update_time\">last_update_time</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tick_nohz_enabled\">tick_nohz_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
];
xr_frag_insert('l/fc/73517e16a16b80b4f55276bf53dc04cb447c09.xr', __xr_tmp);
