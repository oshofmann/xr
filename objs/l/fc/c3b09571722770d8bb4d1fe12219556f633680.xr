var __xr_tmp = [
"<span class=\"comment\">/* Common code for 32 and 64-bit NUMA */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#topology\">topology</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Which logical CPUs are on which nodes</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#node_to_cpumask_map\">node_to_cpumask_map</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>];", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#node_to_cpumask_map\">node_to_cpumask_map</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate node_to_cpumask_map based on number of available nodes</span>", 
"<span class=\"comment\"> * Requires node_possible_map to be valid.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: node_to_cpumask() is not valid until after this is done.</span>", 
"<span class=\"comment\"> * (Use CONFIG_DEBUG_PER_CPU_MAPS to check this.)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_node_to_cpumask_map\">setup_node_to_cpumask_map</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#num\">num</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* setup nr_node_ids if not done yet */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a> == <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a> = <a class=\"id\" href=\"#num\">num</a> + 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate the map */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#node\">node</a> = 0; <a class=\"id\" href=\"#node\">node</a> &lt; <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>; <a class=\"id\" href=\"#node\">node</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_bootmem_cpumask_var\">alloc_bootmem_cpumask_var</a>(&amp;<a class=\"id\" href=\"#node_to_cpumask_map\">node_to_cpumask_map</a>[<a class=\"id\" href=\"#node\">node</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cpumask_of_node() will now work */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Node to cpumask map for %d nodes\\n\", <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PER_CPU_MAPS\">CONFIG_DEBUG_PER_CPU_MAPS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns a pointer to the bitmask of CPUs on Node 'node'.</span>", 
"<span class=\"comment\"> */</span>", 
"const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>(int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> >= <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"cpumask_of_node(%d): node > nr_node_ids(%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_none_mask\">cpu_none_mask</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node_to_cpumask_map\">node_to_cpumask_map</a>[<a class=\"id\" href=\"#node\">node</a>] == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"cpumask_of_node(%d): no node_to_cpumask_map!\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node_to_cpumask_map\">node_to_cpumask_map</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cpumask_of_node\">cpumask_of_node</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/fc/c3b09571722770d8bb4d1fe12219556f633680.xr', __xr_tmp);
