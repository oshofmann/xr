var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * processor has come along and cleared the flag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SIGNAL_STOP_DEQUEUED\">SIGNAL_STOP_DEQUEUED</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_code\">si_code</a> &amp; <a class=\"id\" href=\"#__SI_MASK\">__SI_MASK</a>) == <a class=\"id\" href=\"#__SI_TIMER\">__SI_TIMER</a> && <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_sys_private\">si_sys_private</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Release the siglock to ensure proper locking order</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of timer locks outside of siglocks.  Note, we leave</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * irqs disabled here, since the posix-timers code is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * about to disable them again anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_schedule_next_timer\">do_schedule_next_timer</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#signr\">signr</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tell a process that it has a new active signal..</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE! we rely on the previous spin_lock to</span>", 
"<span class=\"comment\"> * lock interrupts for us! We can only be called with</span>", 
"<span class=\"comment\"> * \"siglock\" held, and the local interrupt must</span>", 
"<span class=\"comment\"> * have been disabled when that got acquired!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * No need to set need_resched since signal event passing</span>", 
"<span class=\"comment\"> * goes through -&gt;blocked</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#signal_wake_up\">signal_wake_up</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#resume\">resume</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For SIGKILL, we want to wake it up in the stopped/traced/killable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case. We don't check t-&gt;state here because there is a race with it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * executing another processor and just now entering stopped state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * By using wake_up_state, we ensure the process will wake up and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handle its death signal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#resume\">resume</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#TASK_WAKEKILL\">TASK_WAKEKILL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wake_up_state\">wake_up_state</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kick_process\">kick_process</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove signals in mask from the pending set and queue.</span>", 
"<span class=\"comment\"> * Returns 1 if any signals were found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All callers must be holding the siglock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This version takes a sigset mask and looks at all signals,</span>", 
"<span class=\"comment\"> * not just those in the first mask word.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rm_from_queue_full\">rm_from_queue_full</a>(<a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#q\">q</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigset_t\">sigset_t</a> <a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigandsets\">sigandsets</a>(&amp;<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mask\">mask</a>, &amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#signal\">signal</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sigisemptyset\">sigisemptyset</a>(&amp;<a class=\"id\" href=\"#m\">m</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#signandsets\">signandsets</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#signal\">signal</a>, &amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sigismember\">sigismember</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sigqueue_free\">__sigqueue_free</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove signals in mask from the pending set and queue.</span>", 
"<span class=\"comment\"> * Returns 1 if any signals were found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All callers must be holding the siglock.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rm_from_queue\">rm_from_queue</a>(unsigned long <a class=\"id\" href=\"#mask\">mask</a>, struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#q\">q</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sigtestsetmask\">sigtestsetmask</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigdelsetmask\">sigdelsetmask</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> &lt; <a class=\"id\" href=\"#SIGRTMIN\">SIGRTMIN</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#sigmask\">sigmask</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sigqueue_free\">__sigqueue_free</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_si_special\">is_si_special</a>(const struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#info\">info</a> <= <a class=\"id\" href=\"#SEND_SIG_FORCED\">SEND_SIG_FORCED</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#si_fromuser\">si_fromuser</a>(const struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#info\">info</a> == <a class=\"id\" href=\"#SEND_SIG_NOINFO\">SEND_SIG_NOINFO</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(!<a class=\"id\" href=\"#is_si_special\">is_si_special</a>(<a class=\"id\" href=\"#info\">info</a>) && <a class=\"id\" href=\"#SI_FROMUSER\">SI_FROMUSER</a>(<a class=\"id\" href=\"#info\">info</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bad permissions for sending the signal</span>", 
"<span class=\"comment\"> * - the caller must hold the RCU read lock</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#check_kill_permission\">check_kill_permission</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, *<a class=\"id\" href=\"#tcred\">tcred</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#valid_signal\">valid_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#si_fromuser\">si_fromuser</a>(<a class=\"id\" href=\"#info\">info</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#audit_signal_info\">audit_signal_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#t\">t</a>); <span class=\"comment\">/* Let audit system see the signal */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcred\">tcred</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#same_thread_group\">same_thread_group</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#t\">t</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> ^ <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#suid\">suid</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> ^ <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#uid\">uid</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>  ^ <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#suid\">suid</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>  ^ <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#uid\">uid</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_KILL\">CAP_KILL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#sig\">sig</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SIGCONT\">SIGCONT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#task_session\">task_session</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We don't return the error if sid == NULL. The</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * task was unhashed, the caller must notice this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sid\">sid</a> || <a class=\"id\" href=\"#sid\">sid</a> == <a class=\"id\" href=\"#task_session\">task_session</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#security_task_kill\">security_task_kill</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#sig\">sig</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle magic process-wide effects of stop/continue signals. Unlike</span>", 
"<span class=\"comment\"> * the signal actions, these happen immediately at signal-generation</span>", 
"<span class=\"comment\"> * time regardless of blocking, ignoring, or handling.  This does the</span>", 
"<span class=\"comment\"> * actual continuing for SIGCONT, but not the actual stopping for stop</span>", 
"<span class=\"comment\"> * signals. The process stop is done as a signal action for SIG_DFL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the signal should be actually delivered, otherwise</span>", 
"<span class=\"comment\"> * it should be dropped.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#prepare_signal\">prepare_signal</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#from_ancestor_ns\">from_ancestor_ns</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#signal\">signal</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGNAL_GROUP_EXIT\">SIGNAL_GROUP_EXIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The process is in the middle of dying, nothing to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#sig_kernel_stop\">sig_kernel_stop</a>(<a class=\"id\" href=\"#sig\">sig</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is a stop signal.  Remove SIGCONT from all queues.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rm_from_queue\">rm_from_queue</a>(<a class=\"id\" href=\"#sigmask\">sigmask</a>(<a class=\"id\" href=\"#SIGCONT\">SIGCONT</a>), &amp;<a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#shared_pending\">shared_pending</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rm_from_queue\">rm_from_queue</a>(<a class=\"id\" href=\"#sigmask\">sigmask</a>(<a class=\"id\" href=\"#SIGCONT\">SIGCONT</a>), &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pending\">pending</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#sig\">sig</a> == <a class=\"id\" href=\"#SIGCONT\">SIGCONT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#why\">why</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remove all stop signals from all queues,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and wake all threads.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rm_from_queue\">rm_from_queue</a>(<a class=\"id\" href=\"#SIG_KERNEL_STOP_MASK\">SIG_KERNEL_STOP_MASK</a>, &amp;<a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#shared_pending\">shared_pending</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rm_from_queue\">rm_from_queue</a>(<a class=\"id\" href=\"#SIG_KERNEL_STOP_MASK\">SIG_KERNEL_STOP_MASK</a>, &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pending\">pending</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If there is a handler for SIGCONT, we must make</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sure that no thread returns to user mode before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we post the signal, in case it was the only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * thread eligible to run the signal handler--then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * it must not do anything between resuming and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * running the handler.  With the TIF_SIGPENDING</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * flag set, the thread will pause and acquire the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * siglock that we hold now and until we've queued</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the pending signal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Wake up the stopped thread _after_ setting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * TIF_SIGPENDING</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#__TASK_STOPPED\">__TASK_STOPPED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sig_user_defined\">sig_user_defined</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#SIGCONT\">SIGCONT</a>) && !<a class=\"id\" href=\"#sigismember\">sigismember</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#blocked\">blocked</a>, <a class=\"id\" href=\"#SIGCONT\">SIGCONT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> |= <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_state\">wake_up_state</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Notify the parent with CLD_CONTINUED if we were stopped.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we were in the middle of a group stop, we pretend it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * was already finished, and then continued. Since SIGCHLD</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * doesn't queue we report only CLD_STOPPED, as if the next</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CLD_CONTINUED was dropped.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#why\">why</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGNAL_STOP_STOPPED\">SIGNAL_STOP_STOPPED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#why\">why</a> |= <a class=\"id\" href=\"#SIGNAL_CLD_CONTINUED\">SIGNAL_CLD_CONTINUED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_stop_count\">group_stop_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#why\">why</a> |= <a class=\"id\" href=\"#SIGNAL_CLD_STOPPED\">SIGNAL_CLD_STOPPED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#why\">why</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The first thread which returns from do_signal_stop()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * will take -&gt;siglock, notice SIGNAL_CLD_MASK, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * notify its parent. See get_signal_to_deliver().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#why\">why</a> | <a class=\"id\" href=\"#SIGNAL_STOP_CONTINUED\">SIGNAL_STOP_CONTINUED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_stop_count\">group_stop_count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_exit_code\">group_exit_code</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We are not stopped, but there could be a stop</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * signal in the middle of being processed after</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * being removed from the queue.  Clear that too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#SIGNAL_STOP_DEQUEUED\">SIGNAL_STOP_DEQUEUED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#sig_ignored\">sig_ignored</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#from_ancestor_ns\">from_ancestor_ns</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test if P wants to take SIG.  After we've checked all threads with this,</span>", 
"<span class=\"comment\"> * it's equivalent to finding no threads not blocking SIG.  Any threads not</span>", 
"<span class=\"comment\"> * blocking SIG were ruled out because they are not running and already</span>", 
"<span class=\"comment\"> * have pending signals.  Such threads will dequeue from the shared queue</span>", 
"<span class=\"comment\"> * as soon as they're available, so putting the signal on the shared queue</span>", 
"<span class=\"comment\"> * will be equivalent to sending it to one such thread.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#wants_signal\">wants_signal</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sigismember\">sigismember</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#blocked\">blocked</a>, <a class=\"id\" href=\"#sig\">sig</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_EXITING\">PF_EXITING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sig\">sig</a> == <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_is_stopped_or_traced\">task_is_stopped_or_traced</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_curr\">task_curr</a>(<a class=\"id\" href=\"#p\">p</a>) || !<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#complete_signal\">complete_signal</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#signal\">signal</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now find a thread we can wake up to take the signal off the queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the main thread wants the signal, it gets first crack.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Probably the least surprising to the average bear.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wants_signal\">wants_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#group\">group</a> || <a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There is just one thread and it does not need to be woken.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It will dequeue unblocked signals before it runs again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Otherwise try to find a suitable thread.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#curr_target\">curr_target</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#wants_signal\">wants_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#t\">t</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#next_thread\">next_thread</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> == <a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#curr_target\">curr_target</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * No thread needs to be woken.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Any eligible threads will see</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the signal in the queue soon.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#curr_target\">curr_target</a> = <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Found a killable thread.  If the signal will be fatal,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then start taking the whole group down immediately.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sig_fatal\">sig_fatal</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#sig\">sig</a>) &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#SIGNAL_UNKILLABLE\">SIGNAL_UNKILLABLE</a> | <a class=\"id\" href=\"#SIGNAL_GROUP_EXIT\">SIGNAL_GROUP_EXIT</a>)) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#sigismember\">sigismember</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#real_blocked\">real_blocked</a>, <a class=\"id\" href=\"#sig\">sig</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#sig\">sig</a> == <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a> ||", 
"<span class=\"ts\"/>     !<a class=\"id\" href=\"#tracehook_consider_fatal_signal\">tracehook_consider_fatal_signal</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#sig\">sig</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This signal will be fatal to the whole group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sig_kernel_coredump\">sig_kernel_coredump</a>(<a class=\"id\" href=\"#sig\">sig</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Start a group exit and wake everybody up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This way we don't have other threads</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * running and doing things after a slower</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * thread has the fatal signal pending.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#SIGNAL_GROUP_EXIT\">SIGNAL_GROUP_EXIT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_exit_code\">group_exit_code</a> = <a class=\"id\" href=\"#sig\">sig</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#group_stop_count\">group_stop_count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigaddset\">sigaddset</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pending\">pending</a>.<a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#signal_wake_up\">signal_wake_up</a>(<a class=\"id\" href=\"#t\">t</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The signal is already in the shared-pending queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Tell the chosen thread to wake up and dequeue it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#signal_wake_up\">signal_wake_up</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#sig\">sig</a> == <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#legacy_queue\">legacy_queue</a>(struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#signals\">signals</a>, int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#sig\">sig</a> &lt; <a class=\"id\" href=\"#SIGRTMIN\">SIGRTMIN</a>) && <a class=\"id\" href=\"#sigismember\">sigismember</a>(&amp;<a class=\"id\" href=\"#signals\">signals</a>-><a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__send_signal\">__send_signal</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>, int <a class=\"id\" href=\"#from_ancestor_ns\">from_ancestor_ns</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#pending\">pending</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sigqueue\">sigqueue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#override_rlimit\">override_rlimit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_signal_generate\">trace_signal_generate</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#prepare_signal\">prepare_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#from_ancestor_ns\">from_ancestor_ns</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pending\">pending</a> = <a class=\"id\" href=\"#group\">group</a> ? &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#shared_pending\">shared_pending</a> : &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pending\">pending</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Short-circuit ignored signals and support queuing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exactly one non-rt signal, so that we can get more</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * detailed information about the cause of the signal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#legacy_queue\">legacy_queue</a>(<a class=\"id\" href=\"#pending\">pending</a>, <a class=\"id\" href=\"#sig\">sig</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fast-pathed signals for kernel-internal things like SIGSTOP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or SIGKILL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a> == <a class=\"id\" href=\"#SEND_SIG_FORCED\">SEND_SIG_FORCED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_set\">out_set</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Real-time signals must be queued if sent by sigqueue, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   some other real-time mechanism.  It is implementation</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   defined whether kill() does so.  We attempt to do so, on</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   the principle of least surprise, but since kill is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   allowed to fail with EAGAIN when low on memory we just</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   make sure at least one signal gets delivered and don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   pass on the info struct.  */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sig\">sig</a> &lt; <a class=\"id\" href=\"#SIGRTMIN\">SIGRTMIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#override_rlimit\">override_rlimit</a> = (<a class=\"id\" href=\"#is_si_special\">is_si_special</a>(<a class=\"id\" href=\"#info\">info</a>) || <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_code\">si_code</a> >= 0);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#override_rlimit\">override_rlimit</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#__sigqueue_alloc\">__sigqueue_alloc</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a> | <a class=\"id\" href=\"#__GFP_NOTRACK_FALSE_POSITIVE\">__GFP_NOTRACK_FALSE_POSITIVE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#override_rlimit\">override_rlimit</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#pending\">pending</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>switch ((unsigned long) <a class=\"id\" href=\"#info\">info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case (unsigned long) <a class=\"id\" href=\"#SEND_SIG_NOINFO\">SEND_SIG_NOINFO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#sig\">sig</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_errno\">si_errno</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#SI_USER\">SI_USER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_pid\">si_pid</a> = <a class=\"id\" href=\"#task_tgid_nr_ns\">task_tgid_nr_ns</a>(<a class=\"id\" href=\"#current\">current</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_active_pid_ns\">task_active_pid_ns</a>(<a class=\"id\" href=\"#t\">t</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_uid\">si_uid</a> = <a class=\"id\" href=\"#current_uid\">current_uid</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case (unsigned long) <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#sig\">sig</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_errno\">si_errno</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#SI_KERNEL\">SI_KERNEL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_pid\">si_pid</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_uid\">si_uid</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_siginfo\">copy_siginfo</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#from_ancestor_ns\">from_ancestor_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_pid\">si_pid</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#is_si_special\">is_si_special</a>(<a class=\"id\" href=\"#info\">info</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sig\">sig</a> >= <a class=\"id\" href=\"#SIGRTMIN\">SIGRTMIN</a> && <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#si_code\">si_code</a> != <a class=\"id\" href=\"#SI_USER\">SI_USER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Queue overflow, abort.  We may abort if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * signal was rt and sent by user using something</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * other than kill().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_signal_overflow_fail\">trace_signal_overflow_fail</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is a silent loss of information.  We still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * send the signal, but the *info bits are lost.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_signal_lose_info\">trace_signal_lose_info</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out_set\">out_set</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#signalfd_notify\">signalfd_notify</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigaddset\">sigaddset</a>(&amp;<a class=\"id\" href=\"#pending\">pending</a>-><a class=\"id\" href=\"#signal\">signal</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete_signal\">complete_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#send_signal\">send_signal</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#from_ancestor_ns\">from_ancestor_ns</a> = 0;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PID_NS\">CONFIG_PID_NS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#from_ancestor_ns\">from_ancestor_ns</a> = <a class=\"id\" href=\"#si_fromuser\">si_fromuser</a>(<a class=\"id\" href=\"#info\">info</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   !<a class=\"id\" href=\"#task_pid_nr_ns\">task_pid_nr_ns</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#task_active_pid_ns\">task_active_pid_ns</a>(<a class=\"id\" href=\"#t\">t</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__send_signal\">__send_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#from_ancestor_ns\">from_ancestor_ns</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#print_fatal_signal\">print_fatal_signal</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, int <a class=\"id\" href=\"#signr\">signr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s/%d: potentially unexpected fatal signal %d.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#current\">current</a>), <a class=\"id\" href=\"#signr\">signr</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__i386__\">__i386__</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__arch_um__\">__arch_um__</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"code at %08lx: \", <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 16; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#insn\">insn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#insn\">insn</a>, (unsigned char *)(<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> + <a class=\"id\" href=\"#i\">i</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%02x \", <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_regs\">show_regs</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_print_fatal_signals\">setup_print_fatal_signals</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_option\">get_option</a> (&amp;<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#print_fatal_signals\">print_fatal_signals</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"print-fatal-signals=\", <a class=\"id\" href=\"#setup_print_fatal_signals\">setup_print_fatal_signals</a>);", 
"", 
"int", 
"<a class=\"id\" href=\"#__group_send_sig_info\">__group_send_sig_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#send_signal\">send_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#p\">p</a>, 1);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#specific_send_sig_info\">specific_send_sig_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#send_signal\">send_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#t\">t</a>, 0);", 
"}", 
"", 
"int <a class=\"id\" href=\"#do_send_sig_info\">do_send_sig_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lock_task_sighand\">lock_task_sighand</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#send_signal\">send_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_task_sighand\">unlock_task_sighand</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Force a signal that the process can't ignore: if necessary</span>", 
"<span class=\"comment\"> * we unblock the signal and change any SIG_IGN to SIG_DFL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: If we unblock the signal, we always reset it to SIG_DFL,</span>", 
"<span class=\"comment\"> * since we do not want to have a signal handler that was blocked</span>", 
"<span class=\"comment\"> * be invoked when user space had explicitly blocked it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We don't want to have recursive SIGSEGV's etc, for example,</span>", 
"<span class=\"comment\"> * that is why we also clear SIGNAL_UNKILLABLE.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#force_sig_info\">force_sig_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long int <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#blocked\">blocked</a>, <a class=\"id\" href=\"#ignored\">ignored</a>;", 
];
xr_frag_insert('l/fc/f85959c16591d046e75714ffea0014c97c0782.xr', __xr_tmp);
