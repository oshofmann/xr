var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (c) 2003-2006, Cluster File Systems, Inc, info@clusterfs.com</span>", 
"<span class=\"comment\"> * Written by Alex Tomas &lt;alex@clusterfs.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Architecture independence:</span>", 
"<span class=\"comment\"> *   Copyright (c) 2005, Bull S.A.</span>", 
"<span class=\"comment\"> *   Written by Pierre Peiffer &lt;pierre.peiffer@bull.net&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License version 2 as</span>", 
"<span class=\"comment\"> * published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public Licens</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Extents support for EXT4</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TODO:</span>", 
"<span class=\"comment\"> *   - ext4*_error() should be used in some situations</span>", 
"<span class=\"comment\"> *   - analyze all BUG()/BUG_ON(), use -EIO where appropriate</span>", 
"<span class=\"comment\"> *   - smart tree reduction</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jbd2\">jbd2</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highuid\">highuid</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quotaops\">quotaops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#falloc\">falloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"ext4_jbd2.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"ext4_extents.h\"", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext_pblock:</span>", 
"<span class=\"comment\"> * combine low and high parts of physical block number into ext4_fsblk_t</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#ext_pblock\">ext_pblock</a>(struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ex\">ex</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#block\">block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#ee_start_lo\">ee_start_lo</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> |= ((<a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a>) <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#ee_start_hi\">ee_start_hi</a>) << 31) << 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#block\">block</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * idx_pblock:</span>", 
"<span class=\"comment\"> * combine low and high parts of a leaf physical block number into ext4_fsblk_t</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#idx_pblock\">idx_pblock</a>(struct <a class=\"id\" href=\"#ext4_extent_idx\">ext4_extent_idx</a> *<a class=\"id\" href=\"#ix\">ix</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#block\">block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#ix\">ix</a>-><a class=\"id\" href=\"#ei_leaf_lo\">ei_leaf_lo</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> |= ((<a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a>) <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#ix\">ix</a>-><a class=\"id\" href=\"#ei_leaf_hi\">ei_leaf_hi</a>) << 31) << 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#block\">block</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext4_ext_store_pblock:</span>", 
"<span class=\"comment\"> * stores a large physical block number into an extent struct,</span>", 
"<span class=\"comment\"> * breaking it into parts</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext4_ext_store_pblock\">ext4_ext_store_pblock</a>(struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ex\">ex</a>, <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#pb\">pb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#ee_start_lo\">ee_start_lo</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>((unsigned long) (<a class=\"id\" href=\"#pb\">pb</a> &amp; 0xffffffff));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#ee_start_hi\">ee_start_hi</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>((unsigned long) ((<a class=\"id\" href=\"#pb\">pb</a> >> 31) >> 1) &amp; 0xffff);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext4_idx_store_pblock:</span>", 
"<span class=\"comment\"> * stores a large physical block number into an index struct,</span>", 
"<span class=\"comment\"> * breaking it into parts</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_idx_store_pblock\">ext4_idx_store_pblock</a>(struct <a class=\"id\" href=\"#ext4_extent_idx\">ext4_extent_idx</a> *<a class=\"id\" href=\"#ix\">ix</a>, <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#pb\">pb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ix\">ix</a>-><a class=\"id\" href=\"#ei_leaf_lo\">ei_leaf_lo</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>((unsigned long) (<a class=\"id\" href=\"#pb\">pb</a> &amp; 0xffffffff));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ix\">ix</a>-><a class=\"id\" href=\"#ei_leaf_hi\">ei_leaf_hi</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>((unsigned long) ((<a class=\"id\" href=\"#pb\">pb</a> >> 31) >> 1) &amp; 0xffff);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext4_ext_truncate_extend_restart\">ext4_ext_truncate_extend_restart</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#needed\">needed</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_handle_valid\">ext4_handle_valid</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a> &gt; <a class=\"id\" href=\"#needed\">needed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_journal_extend\">ext4_journal_extend</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#needed\">needed</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_truncate_restart_trans\">ext4_truncate_restart_trans</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#needed\">needed</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * could return:</span>", 
"<span class=\"comment\"> *  - EROFS</span>", 
"<span class=\"comment\"> *  - ENOMEM</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_ext_get_access\">ext4_ext_get_access</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#p_bh\">p_bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* path points to block */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ext4_journal_get_write_access\">ext4_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#p_bh\">p_bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* path points to leaf/index in inode body */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* we use in-core data, no need to protect them */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * could return:</span>", 
"<span class=\"comment\"> *  - EROFS</span>", 
"<span class=\"comment\"> *  - ENOMEM</span>", 
"<span class=\"comment\"> *  - EIO</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_ext_dirty\">ext4_ext_dirty</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#p_bh\">p_bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* path points to block */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#p_bh\">p_bh</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* path points to leaf/index in inode body */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_mark_inode_dirty\">ext4_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#ext4_ext_find_goal\">ext4_ext_find_goal</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#block\">block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#bg_start\">bg_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#last_block\">last_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#colour\">colour</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#block_group\">block_group</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flex_size\">flex_size</a> = <a class=\"id\" href=\"#ext4_flex_bg_size\">ext4_flex_bg_size</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>));", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#depth\">depth</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ex\">ex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#p_depth\">p_depth</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* try to predict block placement */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ex\">ex</a> = <a class=\"id\" href=\"#path\">path</a>[<a class=\"id\" href=\"#depth\">depth</a>].<a class=\"id\" href=\"#p_ext\">p_ext</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ex\">ex</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ext_pblock\">ext_pblock</a>(<a class=\"id\" href=\"#ex\">ex</a>)+(<a class=\"id\" href=\"#block\">block</a>-<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#ee_block\">ee_block</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* it looks like index is empty;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * try to find starting block from index itself */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>[<a class=\"id\" href=\"#depth\">depth</a>].<a class=\"id\" href=\"#p_bh\">p_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#path\">path</a>[<a class=\"id\" href=\"#depth\">depth</a>].<a class=\"id\" href=\"#p_bh\">p_bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* OK. use inode's group */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_group\">i_block_group</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flex_size\">flex_size</a> >= <a class=\"id\" href=\"#EXT4_FLEX_SIZE_DIR_ALLOC_SCHEME\">EXT4_FLEX_SIZE_DIR_ALLOC_SCHEME</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If there are at least EXT4_FLEX_SIZE_DIR_ALLOC_SCHEME</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block groups per flexgroup, reserve the first block</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * group for directories and special files.  Regular</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * files will start at the second block group.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tends to speed up directory access and improves</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fsck times.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a> &= ~(<a class=\"id\" href=\"#flex_size\">flex_size</a>-1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bg_start\">bg_start</a> = <a class=\"id\" href=\"#ext4_group_first_block_no\">ext4_group_first_block_no</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_block\">last_block</a> = <a class=\"id\" href=\"#ext4_blocks_count\">ext4_blocks_count</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_es\">s_es</a>) - 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are doing delayed allocation, we don't need take</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * colour into account.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#DELALLOC\">DELALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bg_start\">bg_start</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bg_start\">bg_start</a> + <a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) <= <a class=\"id\" href=\"#last_block\">last_block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#colour\">colour</a> = (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a> % 16) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) / 16);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#colour\">colour</a> = (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a> % 16) * ((<a class=\"id\" href=\"#last_block\">last_block</a> - <a class=\"id\" href=\"#bg_start\">bg_start</a>) / 16);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bg_start\">bg_start</a> + <a class=\"id\" href=\"#colour\">colour</a> + <a class=\"id\" href=\"#block\">block</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocation for a meta data block</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a>", 
"<a class=\"id\" href=\"#ext4_ext_new_meta_block\">ext4_ext_new_meta_block</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_ext_path\">ext4_ext_path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ex\">ex</a>, int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#newblock\">newblock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#ext4_ext_find_goal\">ext4_ext_find_goal</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#ex\">ex</a>-><a class=\"id\" href=\"#ee_block\">ee_block</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newblock\">newblock</a> = <a class=\"id\" href=\"#ext4_new_meta_blocks\">ext4_new_meta_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#newblock\">newblock</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ext4_ext_space_block\">ext4_ext_space_block</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#check\">check</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> - sizeof(struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>/ sizeof(struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check\">check</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#AGGRESSIVE_TEST\">AGGRESSIVE_TEST</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; 6)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 6;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ext4_ext_space_block_idx\">ext4_ext_space_block_idx</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#check\">check</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> - sizeof(struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>/ sizeof(struct <a class=\"id\" href=\"#ext4_extent_idx\">ext4_extent_idx</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check\">check</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#AGGRESSIVE_TEST\">AGGRESSIVE_TEST</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; 5)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 5;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ext4_ext_space_root\">ext4_ext_space_root</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#check\">check</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data\">i_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= sizeof(struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> /= sizeof(struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check\">check</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#AGGRESSIVE_TEST\">AGGRESSIVE_TEST</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 3;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ext4_ext_space_root_idx\">ext4_ext_space_root_idx</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#check\">check</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data\">i_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= sizeof(struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> /= sizeof(struct <a class=\"id\" href=\"#ext4_extent_idx\">ext4_extent_idx</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check\">check</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#AGGRESSIVE_TEST\">AGGRESSIVE_TEST</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 4;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate the number of metadata blocks needed</span>", 
"<span class=\"comment\"> * to allocate @blocks</span>", 
"<span class=\"comment\"> * Worse case is one block per extent</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext4_ext_calc_metadata_amount\">ext4_ext_calc_metadata_amount</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#lblock\">lblock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idxs\">idxs</a>, <a class=\"id\" href=\"#num\">num</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idxs\">idxs</a> = ((<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> - sizeof(struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>/ sizeof(struct <a class=\"id\" href=\"#ext4_extent_idx\">ext4_extent_idx</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the new delayed allocation block is contiguous with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * previous da block, it can share index blocks with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * previous block, so we only need to allocate a new index</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * block every idxs leaf blocks.  At ldxs**2 blocks, we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an additional index block, and at ldxs**3 blocks, yet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * another index blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_len\">i_da_metadata_calc_len</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_last_lblock\">i_da_metadata_calc_last_lblock</a>+1 == <a class=\"id\" href=\"#lblock\">lblock</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_len\">i_da_metadata_calc_len</a> % <a class=\"id\" href=\"#idxs\">idxs</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_len\">i_da_metadata_calc_len</a> % (<a class=\"id\" href=\"#idxs\">idxs</a>*<a class=\"id\" href=\"#idxs\">idxs</a>)) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_len\">i_da_metadata_calc_len</a> % (<a class=\"id\" href=\"#idxs\">idxs</a>*<a class=\"id\" href=\"#idxs\">idxs</a>*<a class=\"id\" href=\"#idxs\">idxs</a>)) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_len\">i_da_metadata_calc_len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_len\">i_da_metadata_calc_len</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_last_lblock\">i_da_metadata_calc_last_lblock</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In the worst case we need a new set of index blocks at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * every level of the inode's extent tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_len\">i_da_metadata_calc_len</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_last_lblock\">i_da_metadata_calc_last_lblock</a> = <a class=\"id\" href=\"#lblock\">lblock</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext_depth\">ext_depth</a>(<a class=\"id\" href=\"#inode\">inode</a>) + 1;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ext4_ext_max_entries\">ext4_ext_max_entries</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a> == <a class=\"id\" href=\"#ext_depth\">ext_depth</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#ext4_ext_space_root\">ext4_ext_space_root</a>(<a class=\"id\" href=\"#inode\">inode</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#ext4_ext_space_root_idx\">ext4_ext_space_root_idx</a>(<a class=\"id\" href=\"#inode\">inode</a>, 1);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#ext4_ext_space_block\">ext4_ext_space_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#ext4_ext_space_block_idx\">ext4_ext_space_block_idx</a>(<a class=\"id\" href=\"#inode\">inode</a>, 1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext4_valid_extent\">ext4_valid_extent</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ext\">ext</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#ext_pblock\">ext_pblock</a>(<a class=\"id\" href=\"#ext\">ext</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ext4_ext_get_actual_len\">ext4_ext_get_actual_len</a>(<a class=\"id\" href=\"#ext\">ext</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext4_data_block_valid\">ext4_data_block_valid</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>), <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext4_valid_extent_idx\">ext4_valid_extent_idx</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_extent_idx\">ext4_extent_idx</a> *<a class=\"id\" href=\"#ext_idx\">ext_idx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#idx_pblock\">idx_pblock</a>(<a class=\"id\" href=\"#ext_idx\">ext_idx</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext4_data_block_valid\">ext4_data_block_valid</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>), <a class=\"id\" href=\"#block\">block</a>, 1);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext4_valid_extent_entries\">ext4_valid_extent_entries</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a> *<a class=\"id\" href=\"#eh\">eh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_extent\">ext4_extent</a> *<a class=\"id\" href=\"#ext\">ext</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_extent_idx\">ext4_extent_idx</a> *<a class=\"id\" href=\"#ext_idx\">ext_idx</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#entries\">entries</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#eh\">eh</a>-><a class=\"id\" href=\"#eh_entries\">eh_entries</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#eh\">eh</a>-><a class=\"id\" href=\"#eh_entries\">eh_entries</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* leaf entries */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext\">ext</a> = <a class=\"id\" href=\"#EXT_FIRST_EXTENT\">EXT_FIRST_EXTENT</a>(<a class=\"id\" href=\"#eh\">eh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#entries\">entries</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_valid_extent\">ext4_valid_extent</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#ext\">ext</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext\">ext</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext_idx\">ext_idx</a> = <a class=\"id\" href=\"#EXT_FIRST_INDEX\">EXT_FIRST_INDEX</a>(<a class=\"id\" href=\"#eh\">eh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#entries\">entries</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_valid_extent_idx\">ext4_valid_extent_idx</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#ext_idx\">ext_idx</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext_idx\">ext_idx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__ext4_ext_check\">__ext4_ext_check</a>(const char *<a class=\"id\" href=\"#function\">function</a>, unsigned int <a class=\"id\" href=\"#line\">line</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#ext4_extent_header\">ext4_extent_header</a> *<a class=\"id\" href=\"#eh\">eh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#error_msg\">error_msg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#eh\">eh</a>-><a class=\"id\" href=\"#eh_magic\">eh_magic</a> != <a class=\"id\" href=\"#EXT4_EXT_MAGIC\">EXT4_EXT_MAGIC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_msg\">error_msg</a> = \"invalid magic\";", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#corrupted\">corrupted</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#eh\">eh</a>-><a class=\"id\" href=\"#eh_depth\">eh_depth</a>) != <a class=\"id\" href=\"#depth\">depth</a>)) {", 
];
xr_frag_insert('l/fd/09fca78dc46533253c41b8b7abecec1ce46c69.xr', __xr_tmp);
