var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NetLabel Unlabeled Support</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file defines functions for dealing with unlabeled packets for the</span>", 
"<span class=\"comment\"> * NetLabel system.  The NetLabel system manages static and dynamic label</span>", 
"<span class=\"comment\"> * mappings for network protocols such as CIPSO and RIPSO.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Paul Moore &lt;paul.moore@hp.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * (c) Copyright Hewlett-Packard Development Company, L.P., 2006 - 2008</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software;  you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY;  without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See</span>", 
"<span class=\"comment\"> * the GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program;  if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in6\">in6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netlink\">netlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#genetlink\">genetlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#net_namespace\">net_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netlabel\">netlabel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#bug\">bug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"netlabel_user.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"netlabel_addrlist.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"netlabel_domainhash.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"netlabel_unlabeled.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"netlabel_mgmt.h\"", 
"", 
"<span class=\"comment\">/* NOTE: at present we always use init's network namespace since we don't</span>", 
"<span class=\"comment\"> *       presently support different namespaces even though the majority of</span>", 
"<span class=\"comment\"> *       the functions in this file are \"namespace safe\" */</span>", 
"", 
"<span class=\"comment\">/* The unlabeled connection hash table which we use to map network interfaces</span>", 
"<span class=\"comment\"> * and addresses of unlabeled packets to a user specified secid value for the</span>", 
"<span class=\"comment\"> * LSM.  The hash table is used to lookup the network interface entry</span>", 
"<span class=\"comment\"> * (struct netlbl_unlhsh_iface) and then the interface entry is used to</span>", 
"<span class=\"comment\"> * lookup an IP address match from an ordered list.  If a network interface</span>", 
"<span class=\"comment\"> * match can not be found in the hash table then the default entry</span>", 
"<span class=\"comment\"> * (netlbl_unlhsh_def) is used.  The IP address entry list</span>", 
"<span class=\"comment\"> * (struct netlbl_unlhsh_addr) is ordered such that the entries with a</span>", 
"<span class=\"comment\"> * larger netmask come first.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#netlbl_unlhsh_tbl\">netlbl_unlhsh_tbl</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tbl\">tbl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#size\">size</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#netlbl_unlhsh_addr4_entry\">netlbl_unlhsh_addr4_entry</a>(<a class=\"id\" href=\"#iter\">iter</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#iter\">iter</a>, struct <a class=\"id\" href=\"#netlbl_unlhsh_addr4\">netlbl_unlhsh_addr4</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"struct <a class=\"id\" href=\"#netlbl_unlhsh_addr4\">netlbl_unlhsh_addr4</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#netlbl_unlhsh_addr6_entry\">netlbl_unlhsh_addr6_entry</a>(<a class=\"id\" href=\"#iter\">iter</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#iter\">iter</a>, struct <a class=\"id\" href=\"#netlbl_unlhsh_addr6\">netlbl_unlhsh_addr6</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"struct <a class=\"id\" href=\"#netlbl_unlhsh_addr6\">netlbl_unlhsh_addr6</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af6list\">netlbl_af6list</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"};", 
"struct <a class=\"id\" href=\"#netlbl_unlhsh_iface\">netlbl_unlhsh_iface</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#addr4_list\">addr4_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#addr6_list\">addr6_list</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#valid\">valid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Argument struct for netlbl_unlhsh_walk() */</span>", 
"struct <a class=\"id\" href=\"#netlbl_unlhsh_walk_arg\">netlbl_unlhsh_walk_arg</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlink_callback\">netlink_callback</a> *<a class=\"id\" href=\"#nl_cb\">nl_cb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seq\">seq</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Unlabeled connection hash table */</span>", 
"<span class=\"comment\">/* updates should be so rare that having one spinlock for the entire</span>", 
"<span class=\"comment\"> * hash table should be okay */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#netlbl_unlhsh_lock\">netlbl_unlhsh_lock</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#netlbl_unlhsh_rcu_deref\">netlbl_unlhsh_rcu_deref</a>(<a class=\"id\" href=\"#p\">p</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() || \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#lockdep_is_held\">lockdep_is_held</a>(&amp;<a class=\"id\" href=\"#netlbl_unlhsh_lock\">netlbl_unlhsh_lock</a>))", 
"static struct <a class=\"id\" href=\"#netlbl_unlhsh_tbl\">netlbl_unlhsh_tbl</a> *<a class=\"id\" href=\"#netlbl_unlhsh\">netlbl_unlhsh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"static struct <a class=\"id\" href=\"#netlbl_unlhsh_iface\">netlbl_unlhsh_iface</a> *<a class=\"id\" href=\"#netlbl_unlhsh_def\">netlbl_unlhsh_def</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"comment\">/* Accept unlabeled packets flag */</span>", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#netlabel_unlabel_acceptflg\">netlabel_unlabel_acceptflg</a> = 0;", 
"", 
"<span class=\"comment\">/* NetLabel Generic NETLINK unlabeled family */</span>", 
"static struct <a class=\"id\" href=\"#genl_family\">genl_family</a> <a class=\"id\" href=\"#netlbl_unlabel_gnl_family\">netlbl_unlabel_gnl_family</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#GENL_ID_GENERATE\">GENL_ID_GENERATE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#hdrsize\">hdrsize</a> = 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#NETLBL_NLTYPE_UNLABELED_NAME\">NETLBL_NLTYPE_UNLABELED_NAME</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#version\">version</a> = <a class=\"id\" href=\"#NETLBL_PROTO_VERSION\">NETLBL_PROTO_VERSION</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#maxattr\">maxattr</a> = <a class=\"id\" href=\"#NLBL_UNLABEL_A_MAX\">NLBL_UNLABEL_A_MAX</a>,", 
"};", 
"", 
"<span class=\"comment\">/* NetLabel Netlink attribute policy */</span>", 
"static const struct <a class=\"id\" href=\"#nla_policy\">nla_policy</a> <a class=\"id\" href=\"#netlbl_unlabel_genl_policy\">netlbl_unlabel_genl_policy</a>[<a class=\"id\" href=\"#NLBL_UNLABEL_A_MAX\">NLBL_UNLABEL_A_MAX</a> + 1] = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#NLBL_UNLABEL_A_ACPTFLG\">NLBL_UNLABEL_A_ACPTFLG</a>] = { .<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#NLA_U8\">NLA_U8</a> },", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#NLBL_UNLABEL_A_IPV6ADDR\">NLBL_UNLABEL_A_IPV6ADDR</a>] = { .<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#NLA_BINARY\">NLA_BINARY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      .<a class=\"id\" href=\"#len\">len</a> = sizeof(struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a>) },", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#NLBL_UNLABEL_A_IPV6MASK\">NLBL_UNLABEL_A_IPV6MASK</a>] = { .<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#NLA_BINARY\">NLA_BINARY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      .<a class=\"id\" href=\"#len\">len</a> = sizeof(struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a>) },", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#NLBL_UNLABEL_A_IPV4ADDR\">NLBL_UNLABEL_A_IPV4ADDR</a>] = { .<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#NLA_BINARY\">NLA_BINARY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      .<a class=\"id\" href=\"#len\">len</a> = sizeof(struct <a class=\"id\" href=\"#in_addr\">in_addr</a>) },", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#NLBL_UNLABEL_A_IPV4MASK\">NLBL_UNLABEL_A_IPV4MASK</a>] = { .<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#NLA_BINARY\">NLA_BINARY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      .<a class=\"id\" href=\"#len\">len</a> = sizeof(struct <a class=\"id\" href=\"#in_addr\">in_addr</a>) },", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#NLBL_UNLABEL_A_IFACE\">NLBL_UNLABEL_A_IFACE</a>] = { .<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#NLA_NUL_STRING\">NLA_NUL_STRING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   .<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#IFNAMSIZ\">IFNAMSIZ</a> - 1 },", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#NLBL_UNLABEL_A_SECCTX\">NLBL_UNLABEL_A_SECCTX</a>] = { .<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#NLA_BINARY\">NLA_BINARY</a> }", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unlabeled Connection Hash Table Functions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_unlhsh_free_addr4 - Frees an IPv4 address entry from the hash table</span>", 
"<span class=\"comment\"> * @entry: the entry's RCU field</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This function is designed to be used as a callback to the call_rcu()</span>", 
"<span class=\"comment\"> * function so that memory allocated to a hash table address entry can be</span>", 
"<span class=\"comment\"> * released safely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#netlbl_unlhsh_free_addr4\">netlbl_unlhsh_free_addr4</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_unlhsh_addr4\">netlbl_unlhsh_addr4</a> *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#netlbl_unlhsh_addr4\">netlbl_unlhsh_addr4</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_unlhsh_free_addr6 - Frees an IPv6 address entry from the hash table</span>", 
"<span class=\"comment\"> * @entry: the entry's RCU field</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This function is designed to be used as a callback to the call_rcu()</span>", 
"<span class=\"comment\"> * function so that memory allocated to a hash table address entry can be</span>", 
"<span class=\"comment\"> * released safely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#netlbl_unlhsh_free_addr6\">netlbl_unlhsh_free_addr6</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_unlhsh_addr6\">netlbl_unlhsh_addr6</a> *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#netlbl_unlhsh_addr6\">netlbl_unlhsh_addr6</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* IPv6 */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_unlhsh_free_iface - Frees an interface entry from the hash table</span>", 
"<span class=\"comment\"> * @entry: the entry's RCU field</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This function is designed to be used as a callback to the call_rcu()</span>", 
"<span class=\"comment\"> * function so that memory allocated to a hash table interface entry can be</span>", 
"<span class=\"comment\"> * released safely.  It is important to note that this function does not free</span>", 
"<span class=\"comment\"> * the IPv4 and IPv6 address lists contained as part of an interface entry.  It</span>", 
"<span class=\"comment\"> * is up to the rest of the code to make sure an interface entry is only freed</span>", 
"<span class=\"comment\"> * once it's address lists are empty.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#netlbl_unlhsh_free_iface\">netlbl_unlhsh_free_iface</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_unlhsh_iface\">netlbl_unlhsh_iface</a> *<a class=\"id\" href=\"#iface\">iface</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> *<a class=\"id\" href=\"#iter4\">iter4</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> *<a class=\"id\" href=\"#tmp4\">tmp4</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af6list\">netlbl_af6list</a> *<a class=\"id\" href=\"#iter6\">iter6</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af6list\">netlbl_af6list</a> *<a class=\"id\" href=\"#tmp6\">tmp6</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* IPv6 */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iface\">iface</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#netlbl_unlhsh_iface\">netlbl_unlhsh_iface</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no need for locks here since we are the only one with access to this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * structure */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netlbl_af4list_foreach_safe\">netlbl_af4list_foreach_safe</a>(<a class=\"id\" href=\"#iter4\">iter4</a>, <a class=\"id\" href=\"#tmp4\">tmp4</a>, &amp;<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#addr4_list\">addr4_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlbl_af4list_remove_entry\">netlbl_af4list_remove_entry</a>(<a class=\"id\" href=\"#iter4\">iter4</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#netlbl_unlhsh_addr4_entry\">netlbl_unlhsh_addr4_entry</a>(<a class=\"id\" href=\"#iter4\">iter4</a>));", 
"<span class=\"ts\"/>}", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netlbl_af6list_foreach_safe\">netlbl_af6list_foreach_safe</a>(<a class=\"id\" href=\"#iter6\">iter6</a>, <a class=\"id\" href=\"#tmp6\">tmp6</a>, &amp;<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#addr6_list\">addr6_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlbl_af6list_remove_entry\">netlbl_af6list_remove_entry</a>(<a class=\"id\" href=\"#iter6\">iter6</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#netlbl_unlhsh_addr6_entry\">netlbl_unlhsh_addr6_entry</a>(<a class=\"id\" href=\"#iter6\">iter6</a>));", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* IPv6 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#iface\">iface</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_unlhsh_hash - Hashing function for the hash table</span>", 
"<span class=\"comment\"> * @ifindex: the network interface/device to hash</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This is the hashing function for the unlabeled hash table, it returns the</span>", 
"<span class=\"comment\"> * bucket number for the given device/interface.  The caller is responsible for</span>", 
"<span class=\"comment\"> * ensuring that the hash table is protected with either a RCU read lock or</span>", 
"<span class=\"comment\"> * the hash table lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#netlbl_unlhsh_hash\">netlbl_unlhsh_hash</a>(int <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ifindex\">ifindex</a> &amp; (<a class=\"id\" href=\"#netlbl_unlhsh_rcu_deref\">netlbl_unlhsh_rcu_deref</a>(<a class=\"id\" href=\"#netlbl_unlhsh\">netlbl_unlhsh</a>)-><a class=\"id\" href=\"#size\">size</a> - 1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_unlhsh_search_iface - Search for a matching interface entry</span>", 
"<span class=\"comment\"> * @ifindex: the network interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Searches the unlabeled connection hash table and returns a pointer to the</span>", 
"<span class=\"comment\"> * interface entry which matches @ifindex, otherwise NULL is returned.  The</span>", 
"<span class=\"comment\"> * caller is responsible for ensuring that the hash table is protected with</span>", 
"<span class=\"comment\"> * either a RCU read lock or the hash table lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#netlbl_unlhsh_iface\">netlbl_unlhsh_iface</a> *<a class=\"id\" href=\"#netlbl_unlhsh_search_iface\">netlbl_unlhsh_search_iface</a>(int <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bkt\">bkt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#bkt_list\">bkt_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_unlhsh_iface\">netlbl_unlhsh_iface</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bkt\">bkt</a> = <a class=\"id\" href=\"#netlbl_unlhsh_hash\">netlbl_unlhsh_hash</a>(<a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bkt_list\">bkt_list</a> = &amp;<a class=\"id\" href=\"#netlbl_unlhsh_rcu_deref\">netlbl_unlhsh_rcu_deref</a>(<a class=\"id\" href=\"#netlbl_unlhsh\">netlbl_unlhsh</a>)-><a class=\"id\" href=\"#tbl\">tbl</a>[<a class=\"id\" href=\"#bkt\">bkt</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#bkt_list\">bkt_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#valid\">valid</a> && <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a> == <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_unlhsh_add_addr4 - Add a new IPv4 address entry to the hash table</span>", 
"<span class=\"comment\"> * @iface: the associated interface entry</span>", 
"<span class=\"comment\"> * @addr: IPv4 address in network byte order</span>", 
"<span class=\"comment\"> * @mask: IPv4 address mask in network byte order</span>", 
"<span class=\"comment\"> * @secid: LSM secid value for entry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Add a new address entry into the unlabeled connection hash table using the</span>", 
"<span class=\"comment\"> * interface entry specified by @iface.  On success zero is returned, otherwise</span>", 
"<span class=\"comment\"> * a negative value is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#netlbl_unlhsh_add_addr4\">netlbl_unlhsh_add_addr4</a>(struct <a class=\"id\" href=\"#netlbl_unlhsh_iface\">netlbl_unlhsh_iface</a> *<a class=\"id\" href=\"#iface\">iface</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#in_addr\">in_addr</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#in_addr\">in_addr</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_unlhsh_addr4\">netlbl_unlhsh_addr4</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr\">addr</a>-><a class=\"id\" href=\"#s_addr\">s_addr</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>-><a class=\"id\" href=\"#s_addr\">s_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#mask\">mask</a>-><a class=\"id\" href=\"#s_addr\">s_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#valid\">valid</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#secid\">secid</a> = <a class=\"id\" href=\"#secid\">secid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#netlbl_unlhsh_lock\">netlbl_unlhsh_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#netlbl_af4list_add\">netlbl_af4list_add</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#addr4_list\">addr4_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#netlbl_unlhsh_lock\">netlbl_unlhsh_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_val\">ret_val</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_unlhsh_add_addr6 - Add a new IPv6 address entry to the hash table</span>", 
"<span class=\"comment\"> * @iface: the associated interface entry</span>", 
"<span class=\"comment\"> * @addr: IPv6 address in network byte order</span>", 
"<span class=\"comment\"> * @mask: IPv6 address mask in network byte order</span>", 
"<span class=\"comment\"> * @secid: LSM secid value for entry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Add a new address entry into the unlabeled connection hash table using the</span>", 
"<span class=\"comment\"> * interface entry specified by @iface.  On success zero is returned, otherwise</span>", 
"<span class=\"comment\"> * a negative value is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#netlbl_unlhsh_add_addr6\">netlbl_unlhsh_add_addr6</a>(struct <a class=\"id\" href=\"#netlbl_unlhsh_iface\">netlbl_unlhsh_iface</a> *<a class=\"id\" href=\"#iface\">iface</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_unlhsh_addr6\">netlbl_unlhsh_addr6</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipv6_addr_copy\">ipv6_addr_copy</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[0] &= <a class=\"id\" href=\"#mask\">mask</a>-><a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[1] &= <a class=\"id\" href=\"#mask\">mask</a>-><a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[2] &= <a class=\"id\" href=\"#mask\">mask</a>-><a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[2];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[3] &= <a class=\"id\" href=\"#mask\">mask</a>-><a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[3];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipv6_addr_copy\">ipv6_addr_copy</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#valid\">valid</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#secid\">secid</a> = <a class=\"id\" href=\"#secid\">secid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#netlbl_unlhsh_lock\">netlbl_unlhsh_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#netlbl_af6list_add\">netlbl_af6list_add</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#addr6_list\">addr6_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#netlbl_unlhsh_lock\">netlbl_unlhsh_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_val\">ret_val</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* IPv6 */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_unlhsh_add_iface - Adds a new interface entry to the hash table</span>", 
"<span class=\"comment\"> * @ifindex: network interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Add a new, empty, interface entry into the unlabeled connection hash table.</span>", 
"<span class=\"comment\"> * On success a pointer to the new interface entry is returned, on failure NULL</span>", 
"<span class=\"comment\"> * is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#netlbl_unlhsh_iface\">netlbl_unlhsh_iface</a> *<a class=\"id\" href=\"#netlbl_unlhsh_add_iface\">netlbl_unlhsh_add_iface</a>(int <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bkt\">bkt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_unlhsh_iface\">netlbl_unlhsh_iface</a> *<a class=\"id\" href=\"#iface\">iface</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iface\">iface</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#iface\">iface</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iface\">iface</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a> = <a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#addr4_list\">addr4_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#addr6_list\">addr6_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#valid\">valid</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#netlbl_unlhsh_lock\">netlbl_unlhsh_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ifindex\">ifindex</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bkt\">bkt</a> = <a class=\"id\" href=\"#netlbl_unlhsh_hash\">netlbl_unlhsh_hash</a>(<a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#netlbl_unlhsh_search_iface\">netlbl_unlhsh_search_iface</a>(<a class=\"id\" href=\"#ifindex\">ifindex</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#add_iface_failure\">add_iface_failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#netlbl_unlhsh_rcu_deref\">netlbl_unlhsh_rcu_deref</a>(<a class=\"id\" href=\"#netlbl_unlhsh\">netlbl_unlhsh</a>)-><a class=\"id\" href=\"#tbl\">tbl</a>[<a class=\"id\" href=\"#bkt\">bkt</a>]);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#netlbl_unlhsh_rcu_deref\">netlbl_unlhsh_rcu_deref</a>(<a class=\"id\" href=\"#netlbl_unlhsh_def\">netlbl_unlhsh_def</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#add_iface_failure\">add_iface_failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#netlbl_unlhsh_def\">netlbl_unlhsh_def</a>, <a class=\"id\" href=\"#iface\">iface</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#netlbl_unlhsh_lock\">netlbl_unlhsh_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#iface\">iface</a>;", 
"", 
"<a class=\"id\" href=\"#add_iface_failure\">add_iface_failure</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#netlbl_unlhsh_lock\">netlbl_unlhsh_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#iface\">iface</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_unlhsh_add - Adds a new entry to the unlabeled connection hash table</span>", 
"<span class=\"comment\"> * @net: network namespace</span>", 
"<span class=\"comment\"> * @dev_name: interface name</span>", 
"<span class=\"comment\"> * @addr: IP address in network byte order</span>", 
"<span class=\"comment\"> * @mask: address mask in network byte order</span>", 
"<span class=\"comment\"> * @addr_len: length of address/mask (4 for IPv4, 16 for IPv6)</span>", 
"<span class=\"comment\"> * @secid: LSM secid value for the entry</span>", 
"<span class=\"comment\"> * @audit_info: NetLabel audit information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Adds a new entry to the unlabeled connection hash table.  Returns zero on</span>", 
"<span class=\"comment\"> * success, negative values on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#netlbl_unlhsh_add\">netlbl_unlhsh_add</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#dev_name\">dev_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const void *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const void *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#addr_len\">addr_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#netlbl_audit\">netlbl_audit</a> *<a class=\"id\" href=\"#audit_info\">audit_info</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_unlhsh_iface\">netlbl_unlhsh_iface</a> *<a class=\"id\" href=\"#iface\">iface</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#audit_buf\">audit_buf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#secctx\">secctx</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secctx_len\">secctx_len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr_len\">addr_len</a> != sizeof(struct <a class=\"id\" href=\"#in_addr\">in_addr</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#addr_len\">addr_len</a> != sizeof(struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_name\">dev_name</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev_get_by_name_rcu\">dev_get_by_name_rcu</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlhsh_add_return\">unlhsh_add_return</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ifindex\">ifindex</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iface\">iface</a> = <a class=\"id\" href=\"#netlbl_unlhsh_search_iface\">netlbl_unlhsh_search_iface</a>(<a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ifindex\">ifindex</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iface\">iface</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#netlbl_unlhsh_def\">netlbl_unlhsh_def</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iface\">iface</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iface\">iface</a> = <a class=\"id\" href=\"#netlbl_unlhsh_add_iface\">netlbl_unlhsh_add_iface</a>(<a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iface\">iface</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlhsh_add_return\">unlhsh_add_return</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_buf\">audit_buf</a> = <a class=\"id\" href=\"#netlbl_audit_start_common\">netlbl_audit_start_common</a>(<a class=\"id\" href=\"#AUDIT_MAC_UNLBL_STCADD\">AUDIT_MAC_UNLBL_STCADD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#audit_info\">audit_info</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#addr_len\">addr_len</a>) {", 
"<span class=\"ts\"/>case sizeof(struct <a class=\"id\" href=\"#in_addr\">in_addr</a>): {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#in_addr\">in_addr</a> *<a class=\"id\" href=\"#addr4\">addr4</a>, *<a class=\"id\" href=\"#mask4\">mask4</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr4\">addr4</a> = (struct <a class=\"id\" href=\"#in_addr\">in_addr</a> *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask4\">mask4</a> = (struct <a class=\"id\" href=\"#in_addr\">in_addr</a> *)<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#netlbl_unlhsh_add_addr4\">netlbl_unlhsh_add_addr4</a>(<a class=\"id\" href=\"#iface\">iface</a>, <a class=\"id\" href=\"#addr4\">addr4</a>, <a class=\"id\" href=\"#mask4\">mask4</a>, <a class=\"id\" href=\"#secid\">secid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_buf\">audit_buf</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlbl_af4list_audit_addr\">netlbl_af4list_audit_addr</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dev_name\">dev_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#addr4\">addr4</a>-><a class=\"id\" href=\"#s_addr\">s_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mask4\">mask4</a>-><a class=\"id\" href=\"#s_addr\">s_addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"ts\"/>case sizeof(struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a>): {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#addr6\">addr6</a>, *<a class=\"id\" href=\"#mask6\">mask6</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr6\">addr6</a> = (struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask6\">mask6</a> = (struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *)<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#netlbl_unlhsh_add_addr6\">netlbl_unlhsh_add_addr6</a>(<a class=\"id\" href=\"#iface\">iface</a>, <a class=\"id\" href=\"#addr6\">addr6</a>, <a class=\"id\" href=\"#mask6\">mask6</a>, <a class=\"id\" href=\"#secid\">secid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_buf\">audit_buf</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlbl_af6list_audit_addr\">netlbl_af6list_audit_addr</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dev_name\">dev_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#addr6\">addr6</a>, <a class=\"id\" href=\"#mask6\">mask6</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* IPv6 */</span>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_val\">ret_val</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#netlabel_mgmt_protocount\">netlabel_mgmt_protocount</a>);", 
"", 
"<a class=\"id\" href=\"#unlhsh_add_return\">unlhsh_add_return</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_buf\">audit_buf</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#security_secid_to_secctx\">security_secid_to_secctx</a>(<a class=\"id\" href=\"#secid\">secid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#secctx\">secctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#secctx_len\">secctx_len</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>, \" sec_obj=%s\", <a class=\"id\" href=\"#secctx\">secctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_release_secctx\">security_release_secctx</a>(<a class=\"id\" href=\"#secctx\">secctx</a>, <a class=\"id\" href=\"#secctx_len\">secctx_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>, \" res=%u\", <a class=\"id\" href=\"#ret_val\">ret_val</a> == 0 ? 1 : 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_end\">audit_log_end</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_unlhsh_remove_addr4 - Remove an IPv4 address entry</span>", 
"<span class=\"comment\"> * @net: network namespace</span>", 
"<span class=\"comment\"> * @iface: interface entry</span>", 
"<span class=\"comment\"> * @addr: IP address</span>", 
"<span class=\"comment\"> * @mask: IP address mask</span>", 
"<span class=\"comment\"> * @audit_info: NetLabel audit information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Remove an IP address entry from the unlabeled connection hash table.</span>", 
"<span class=\"comment\"> * Returns zero on success, negative values on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#netlbl_unlhsh_remove_addr4\">netlbl_unlhsh_remove_addr4</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#netlbl_unlhsh_iface\">netlbl_unlhsh_iface</a> *<a class=\"id\" href=\"#iface\">iface</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#in_addr\">in_addr</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#in_addr\">in_addr</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#netlbl_audit\">netlbl_audit</a> *<a class=\"id\" href=\"#audit_info\">audit_info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> *<a class=\"id\" href=\"#list_entry\">list_entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_unlhsh_addr4\">netlbl_unlhsh_addr4</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#audit_buf\">audit_buf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#secctx\">secctx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secctx_len\">secctx_len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#netlbl_unlhsh_lock\">netlbl_unlhsh_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_entry\">list_entry</a> = <a class=\"id\" href=\"#netlbl_af4list_remove\">netlbl_af4list_remove</a>(<a class=\"id\" href=\"#addr\">addr</a>-><a class=\"id\" href=\"#s_addr\">s_addr</a>, <a class=\"id\" href=\"#mask\">mask</a>-><a class=\"id\" href=\"#s_addr\">s_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#addr4_list\">addr4_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#netlbl_unlhsh_lock\">netlbl_unlhsh_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_entry\">list_entry</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#netlbl_unlhsh_addr4_entry\">netlbl_unlhsh_addr4_entry</a>(<a class=\"id\" href=\"#list_entry\">list_entry</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_buf\">audit_buf</a> = <a class=\"id\" href=\"#netlbl_audit_start_common\">netlbl_audit_start_common</a>(<a class=\"id\" href=\"#AUDIT_MAC_UNLBL_STCDEL\">AUDIT_MAC_UNLBL_STCDEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#audit_info\">audit_info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_buf\">audit_buf</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev_get_by_index\">dev_get_by_index</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#iface\">iface</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlbl_af4list_audit_addr\">netlbl_af4list_audit_addr</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#dev\">dev</a> != <a class=\"id\" href=\"#NULL\">NULL</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a> : <a class=\"id\" href=\"#NULL\">NULL</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#addr\">addr</a>-><a class=\"id\" href=\"#s_addr\">s_addr</a>, <a class=\"id\" href=\"#mask\">mask</a>-><a class=\"id\" href=\"#s_addr\">s_addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_put\">dev_put</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> != <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#security_secid_to_secctx\">security_secid_to_secctx</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#secid\">secid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#secctx\">secctx</a>, &amp;<a class=\"id\" href=\"#secctx_len\">secctx_len</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>, \" sec_obj=%s\", <a class=\"id\" href=\"#secctx\">secctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_release_secctx\">security_release_secctx</a>(<a class=\"id\" href=\"#secctx\">secctx</a>, <a class=\"id\" href=\"#secctx_len\">secctx_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
];
xr_frag_insert('l/fd/6b7ce3f50d8f5a440e4f01b287494daa6912f5.xr', __xr_tmp);
