var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#task\">task</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If thread creation fails, force writeout of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the bdi from the thread.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_flush_io\">bdi_flush_io</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The spinlock makes sure we do not lose</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * wake-ups when racing with 'bdi_queue_work()'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * And as soon as the bdi thread is visible, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * can start it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb_lock\">wb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb_lock\">wb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KILL_THREAD\">KILL_THREAD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#NO_ACTION\">NO_ACTION</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#wb_has_dirty_io\">wb_has_dirty_io</a>(<a class=\"id\" href=\"#me\">me</a>) || !<a class=\"id\" href=\"#dirty_writeback_interval\">dirty_writeback_interval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * There are no dirty data. The only thing we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * should now care about is checking for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * inactive bdi threads and killing them. Thus,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * let's sleep for longer time, save energy and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * be friendly for battery-driven devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#bdi_longest_inactive\">bdi_longest_inactive</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#dirty_writeback_interval\">dirty_writeback_interval</a> * 10));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Back to the main loop */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Clear pending bit and wakeup anybody waiting to tear us down.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#BDI_pending\">BDI_pending</a>, &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_clear_bit\">smp_mb__after_clear_bit</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_bit\">wake_up_bit</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#BDI_pending\">BDI_pending</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove bdi from bdi_list, and ensure that it is no longer visible</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#bdi_remove_from_list\">bdi_remove_from_list</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#bdi_lock\">bdi_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#bdi_list\">bdi_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#bdi_lock\">bdi_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"}", 
"", 
"int <a class=\"id\" href=\"#bdi_register\">bdi_register</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#dev\">dev</a>)<span class=\"ts\"/><span class=\"comment\">/* The driver needs to use separate queues per device */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#device_create_vargs\">device_create_vargs</a>(<a class=\"id\" href=\"#bdi_class\">bdi_class</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(0, 0), <a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Just start the forker thread for our default backing_dev_info,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and add other bdi's to the list. They will get a thread created</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on-demand when they need it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi_cap_flush_forker\">bdi_cap_flush_forker</a>(<a class=\"id\" href=\"#bdi\">bdi</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a> = &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#bdi_forker_thread\">bdi_forker_thread</a>, <a class=\"id\" href=\"#wb\">wb</a>, \"bdi-%s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#task\">task</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_debug_register\">bdi_debug_register</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#BDI_registered\">BDI_registered</a>, &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#bdi_lock\">bdi_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#bdi_list\">bdi_list</a>, &amp;<a class=\"id\" href=\"#bdi_list\">bdi_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#bdi_lock\">bdi_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_writeback_bdi_register\">trace_writeback_bdi_register</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bdi_register\">bdi_register</a>);", 
"", 
"int <a class=\"id\" href=\"#bdi_register_dev\">bdi_register_dev</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bdi_register\">bdi_register</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"%u:%u\", <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bdi_register_dev\">bdi_register_dev</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove bdi from the global list and shutdown any threads we have running</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#bdi_wb_shutdown\">bdi_wb_shutdown</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdi_cap_writeback_dirty\">bdi_cap_writeback_dirty</a>(<a class=\"id\" href=\"#bdi\">bdi</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure nobody finds us on the bdi_list anymore</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_remove_from_list\">bdi_remove_from_list</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If setup is pending, wait for that to complete first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_on_bit\">wait_on_bit</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#BDI_pending\">BDI_pending</a>, <a class=\"id\" href=\"#bdi_sched_wait\">bdi_sched_wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Finally, kill the kernel thread. We don't need to be RCU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * safe anymore, since the bdi is gone from visibility. Force</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unfreeze of the thread before calling kthread_stop(), otherwise</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it would never exet if it is currently stuck in the refrigerator.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thaw_process\">thaw_process</a>(<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This bdi is going away now, make sure that no super_blocks point to it</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#bdi_prune_sb\">bdi_prune_sb</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sb\">sb</a>, &amp;<a class=\"id\" href=\"#super_blocks\">super_blocks</a>, <a class=\"id\" href=\"#s_list\">s_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdi\">s_bdi</a> == <a class=\"id\" href=\"#bdi\">bdi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdi\">s_bdi</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#bdi_unregister\">bdi_unregister</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_writeback_bdi_unregister\">trace_writeback_bdi_unregister</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_prune_sb\">bdi_prune_sb</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#wakeup_timer\">wakeup_timer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdi_cap_flush_forker\">bdi_cap_flush_forker</a>(<a class=\"id\" href=\"#bdi\">bdi</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_wb_shutdown\">bdi_wb_shutdown</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_debug_unregister\">bdi_debug_unregister</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bdi_unregister\">bdi_unregister</a>);", 
"", 
"static void <a class=\"id\" href=\"#bdi_wb_init\">bdi_wb_init</a>(struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a>, struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#wb\">wb</a>, 0, sizeof(*<a class=\"id\" href=\"#wb\">wb</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#bdi\">bdi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#last_old_flush\">last_old_flush</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_dirty\">b_dirty</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_io\">b_io</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_more_io\">b_more_io</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_timer\">setup_timer</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#wakeup_timer\">wakeup_timer</a>, <a class=\"id\" href=\"#wakeup_timer_fn\">wakeup_timer_fn</a>, (unsigned long)<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#bdi_init\">bdi_init</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#min_ratio\">min_ratio</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#max_ratio\">max_ratio</a> = 100;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#max_prop_frac\">max_prop_frac</a> = <a class=\"id\" href=\"#PROP_FRAC_BASE\">PROP_FRAC_BASE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb_lock\">wb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#bdi_list\">bdi_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#work_list\">work_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_wb_init\">bdi_wb_init</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>, <a class=\"id\" href=\"#bdi\">bdi</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_BDI_STAT_ITEMS\">NR_BDI_STAT_ITEMS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#percpu_counter_init\">percpu_counter_init</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#bdi_stat\">bdi_stat</a>[<a class=\"id\" href=\"#i\">i</a>], 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#dirty_exceeded\">dirty_exceeded</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#prop_local_init_percpu\">prop_local_init_percpu</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#completions\">completions</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_destroy\">percpu_counter_destroy</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#bdi_stat\">bdi_stat</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bdi_init\">bdi_init</a>);", 
"", 
"void <a class=\"id\" href=\"#bdi_destroy\">bdi_destroy</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Splice our entries to the default_backing_dev_info, if this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bdi disappears</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi_has_dirty_io\">bdi_has_dirty_io</a>(<a class=\"id\" href=\"#bdi\">bdi</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#dst\">dst</a> = &amp;<a class=\"id\" href=\"#default_backing_dev_info\">default_backing_dev_info</a>.<a class=\"id\" href=\"#wb\">wb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#b_dirty\">b_dirty</a>, &amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#b_dirty\">b_dirty</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#b_io\">b_io</a>, &amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#b_io\">b_io</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#b_more_io\">b_more_io</a>, &amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#b_more_io\">b_more_io</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_unregister\">bdi_unregister</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_BDI_STAT_ITEMS\">NR_BDI_STAT_ITEMS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_destroy\">percpu_counter_destroy</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#bdi_stat\">bdi_stat</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_local_destroy_percpu\">prop_local_destroy_percpu</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#completions\">completions</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bdi_destroy\">bdi_destroy</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For use from filesystems to quickly init and register a bdi associated</span>", 
"<span class=\"comment\"> * with dirty writeback</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bdi_setup_and_register\">bdi_setup_and_register</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>, char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[32];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> = <a class=\"id\" href=\"#cap\">cap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#bdi_init\">bdi_init</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, \"%.28s%s\", <a class=\"id\" href=\"#name\">name</a>, \"-%d\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#bdi_register\">bdi_register</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#atomic_long_inc_return\">atomic_long_inc_return</a>(&amp;<a class=\"id\" href=\"#bdi_seq\">bdi_seq</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_destroy\">bdi_destroy</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bdi_setup_and_register\">bdi_setup_and_register</a>);", 
"", 
"static <a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#congestion_wqh\">congestion_wqh</a>[2] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__WAIT_QUEUE_HEAD_INITIALIZER\">__WAIT_QUEUE_HEAD_INITIALIZER</a>(<a class=\"id\" href=\"#congestion_wqh\">congestion_wqh</a>[0]),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__WAIT_QUEUE_HEAD_INITIALIZER\">__WAIT_QUEUE_HEAD_INITIALIZER</a>(<a class=\"id\" href=\"#congestion_wqh\">congestion_wqh</a>[1])", 
"<span class=\"ts\"/>};", 
"", 
"void <a class=\"id\" href=\"#clear_bdi_congested\">clear_bdi_congested</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>, int <a class=\"id\" href=\"#sync\">sync</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#bdi_state\">bdi_state</a> <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wqh\">wqh</a> = &amp;<a class=\"id\" href=\"#congestion_wqh\">congestion_wqh</a>[<a class=\"id\" href=\"#sync\">sync</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#sync\">sync</a> ? <a class=\"id\" href=\"#BDI_sync_congested\">BDI_sync_congested</a> : <a class=\"id\" href=\"#BDI_async_congested\">BDI_async_congested</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#bit\">bit</a>, &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_clear_bit\">smp_mb__after_clear_bit</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(<a class=\"id\" href=\"#wqh\">wqh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(<a class=\"id\" href=\"#wqh\">wqh</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#clear_bdi_congested\">clear_bdi_congested</a>);", 
"", 
"void <a class=\"id\" href=\"#set_bdi_congested\">set_bdi_congested</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>, int <a class=\"id\" href=\"#sync\">sync</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#bdi_state\">bdi_state</a> <a class=\"id\" href=\"#bit\">bit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#sync\">sync</a> ? <a class=\"id\" href=\"#BDI_sync_congested\">BDI_sync_congested</a> : <a class=\"id\" href=\"#BDI_async_congested\">BDI_async_congested</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#bit\">bit</a>, &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_bdi_congested\">set_bdi_congested</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * congestion_wait - wait for a backing_dev to become uncongested</span>", 
"<span class=\"comment\"> * @sync: SYNC or ASYNC IO</span>", 
"<span class=\"comment\"> * @timeout: timeout in jiffies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Waits for up to @timeout jiffies for a backing_dev (any backing_dev) to exit</span>", 
"<span class=\"comment\"> * write congestion.  If no backing_devs are congested then just wait for the</span>", 
"<span class=\"comment\"> * next write to be completed.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#congestion_wait\">congestion_wait</a>(int <a class=\"id\" href=\"#sync\">sync</a>, long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wqh\">wqh</a> = &amp;<a class=\"id\" href=\"#congestion_wqh\">congestion_wqh</a>[<a class=\"id\" href=\"#sync\">sync</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(<a class=\"id\" href=\"#wqh\">wqh</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#io_schedule_timeout\">io_schedule_timeout</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(<a class=\"id\" href=\"#wqh\">wqh</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#congestion_wait\">congestion_wait</a>);", 
"", 
];
xr_frag_insert('l/fd/cb8fe6bd44616946c7bf413cf3e8298a7bfa2d.xr', __xr_tmp);
