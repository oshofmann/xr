var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 6; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#REG_READ\">REG_READ</a>(<a class=\"id\" href=\"#REG_PORT\">REG_PORT</a>(<a class=\"id\" href=\"#i\">i</a>), 0x04);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_PORT\">REG_PORT</a>(<a class=\"id\" href=\"#i\">i</a>), 0x04, <a class=\"id\" href=\"#ret\">ret</a> &amp; 0xfffc);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for transmit queues to drain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(2);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reset the switch.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL\">REG_GLOBAL</a>, 0x0a, 0xa130);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait up to one second for reset to complete.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 1000; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#REG_READ\">REG_READ</a>(<a class=\"id\" href=\"#REG_GLOBAL\">REG_GLOBAL</a>, 0x00);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ret\">ret</a> &amp; 0x8000) == 0x0000)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 1000)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ETIMEDOUT\">ETIMEDOUT</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mv88e6060_setup_global\">mv88e6060_setup_global</a>(struct <a class=\"id\" href=\"#dsa_switch\">dsa_switch</a> *<a class=\"id\" href=\"#ds\">ds</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable discarding of frames with excessive collisions,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set the maximum frame size to 1536 bytes, and mask all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupt sources.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL\">REG_GLOBAL</a>, 0x04, 0x0800);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enable automatic address learning, set the address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * database size to 1024 entries, and set the default aging</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time to 5 minutes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#REG_GLOBAL\">REG_GLOBAL</a>, 0x0a, 0x2130);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mv88e6060_setup_port\">mv88e6060_setup_port</a>(struct <a class=\"id\" href=\"#dsa_switch\">dsa_switch</a> *<a class=\"id\" href=\"#ds\">ds</a>, int <a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#REG_PORT\">REG_PORT</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not force flow control, disable Ingress and Egress</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Header tagging, disable VLAN tunneling, and set the port</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state to Forwarding.  Additionally, if this is the CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * port, enable Ingress and Egress Trailer tagging mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x04, <a class=\"id\" href=\"#dsa_is_cpu_port\">dsa_is_cpu_port</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#p\">p</a>) ?  0x4103 : 0x0003);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Port based VLAN map: give each port its own address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * database, allow the CPU port to talk to each of the 'real'</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ports, and allow each of the 'real' ports to only talk to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the CPU port.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x06,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#p\">p</a> &amp; 0xf) << 12) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#dsa_is_cpu_port\">dsa_is_cpu_port</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#p\">p</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#phys_port_mask\">phys_port_mask</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#cpu_port\">cpu_port</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Port Association Vector: when learning source addresses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of packets, add the address to the address database using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a port bitmap that has only the bit for this port set and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the other bits clear.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0x0b, 1 << <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
];
xr_frag_insert('l/fd/d6e432d361228571c74a336d4c96c8aa7606a3.xr', __xr_tmp);
