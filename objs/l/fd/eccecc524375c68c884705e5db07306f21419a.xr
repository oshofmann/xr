var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Low-Level PCI Access for i386 machines</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 1993, 1994 Drew Eckhardt</span>", 
"<span class=\"comment\"> *      Visionary Computing</span>", 
"<span class=\"comment\"> *      (Unix and Linux consulting and custom programming)</span>", 
"<span class=\"comment\"> *      Drew@Colorado.EDU</span>", 
"<span class=\"comment\"> *      +1 (303) 786-7975</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Drew's work was sponsored by:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>iX Multiuser Multitasking Magazine</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Hannover, Germany</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hm@ix.de</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 1997--2000 Martin Mares &lt;mj@ucw.cz&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For more information, please consult the following manuals (look at</span>", 
"<span class=\"comment\"> * http://www.pcisig.com/ for how to get them):</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PCI BIOS Specification</span>", 
"<span class=\"comment\"> * PCI Local Bus Specification</span>", 
"<span class=\"comment\"> * PCI to PCI Bridge Specification</span>", 
"<span class=\"comment\"> * PCI System Design Guide</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pat\">pat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pci_x86\">pci_x86</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io_apic\">io_apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"static int", 
"<a class=\"id\" href=\"#skip_isa_ioresource_align\">skip_isa_ioresource_align</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>) {", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pci_probe\">pci_probe</a> &amp; <a class=\"id\" href=\"#PCI_CAN_SKIP_ISA_ALIGN\">PCI_CAN_SKIP_ISA_ALIGN</a>) &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#bridge_ctl\">bridge_ctl</a> &amp; <a class=\"id\" href=\"#PCI_BRIDGE_CTL_ISA\">PCI_BRIDGE_CTL_ISA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need to avoid collisions with `mirrored' VGA ports</span>", 
"<span class=\"comment\"> * and other strange ISA hardware, so we always want the</span>", 
"<span class=\"comment\"> * addresses to be allocated in the 0x000-0x0ff region</span>", 
"<span class=\"comment\"> * modulo 0x400.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Why? Because some silly external IO cards only decode</span>", 
"<span class=\"comment\"> * the low 10 bits of the IO address. The 0x00-0xff region</span>", 
"<span class=\"comment\"> * is reserved for motherboard devices that decode all 16</span>", 
"<span class=\"comment\"> * bits, so it's ok to allocate at, say, 0x2800-0x28ff,</span>", 
"<span class=\"comment\"> * but we want to try to avoid allocating at 0x2900-0x2bff</span>", 
"<span class=\"comment\"> * which might have be mirrored at 0x0100-0x03ff..</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a>", 
"<a class=\"id\" href=\"#pcibios_align_resource\">pcibios_align_resource</a>(void *<a class=\"id\" href=\"#data\">data</a>, const struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skip_isa_ioresource_align\">skip_isa_ioresource_align</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &amp; 0x300)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = (<a class=\"id\" href=\"#start\">start</a> + 0x3ff) &amp; ~0x3ff;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#BIOS_END\">BIOS_END</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#BIOS_END\">BIOS_END</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#start\">start</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pcibios_align_resource\">pcibios_align_resource</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Handle resources of PCI devices.  If the world were perfect, we could</span>", 
"<span class=\"comment\"> *  just allocate all the resource regions and do nothing more.  It isn't.</span>", 
"<span class=\"comment\"> *  On the other hand, we cannot just re-allocate all devices, as it would</span>", 
"<span class=\"comment\"> *  require us to know lots of host bridge internals.  So we attempt to</span>", 
"<span class=\"comment\"> *  keep as much of the original configuration as possible, but tweak it</span>", 
"<span class=\"comment\"> *  when it's found to be wrong.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Known BIOS problems we have to work around:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- I/O or memory regions not configured</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- regions configured, but not enabled in the command register</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- bogus I/O addresses above 64K used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- expansion ROMs left enabled (this may sound harmless, but given</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  the fact the PCI specs explicitly allow address decoders to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  shared between expansion ROMs and other resource regions, it's</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  at least dangerous)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- bad resource sizes or overlaps with other regions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Our solution:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(1) Allocate resources for all buses behind PCI-to-PCI bridges.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    This gives us fixed barriers on where we can allocate.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(2) Allocate resources for all enabled devices.  If there is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    a collision, just mark the resource as unallocated. Also</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    disable expansion ROMs during this step.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(3) Try to allocate resources for disabled devices.  If the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    resources were assigned correctly, everything goes well,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    if they weren't, they won't disturb allocation of other</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    resources.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(4) Assign new addresses to resources which were either</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    not configured at all or misconfigured.  If explicitly</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    requested by the user, configure expansion ROM address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    as well.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcibios_allocate_bus_resources\">pcibios_allocate_bus_resources</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#bus_list\">bus_list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Depth-First Search on bus tree */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#PCI_NUM_RESOURCES\">PCI_NUM_RESOURCES</a>; <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#idx\">idx</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pci_claim_resource\">pci_claim_resource</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#idx\">idx</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Something is wrong with the region.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Invalidate the resource to prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * child resource allocations in this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * range.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcibios_allocate_bus_resources\">pcibios_allocate_bus_resources</a>(&amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#children\">children</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"struct <a class=\"id\" href=\"#pci_check_idx_range\">pci_check_idx_range</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcibios_allocate_resources\">pcibios_allocate_resources</a>(int <a class=\"id\" href=\"#pass\">pass</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#disabled\">disabled</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#command\">command</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_check_idx_range\">pci_check_idx_range</a> <a class=\"id\" href=\"#idx_range\">idx_range</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#PCI_STD_RESOURCES\">PCI_STD_RESOURCES</a>, <a class=\"id\" href=\"#PCI_STD_RESOURCE_END\">PCI_STD_RESOURCE_END</a> },", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI_IOV\">CONFIG_PCI_IOV</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#PCI_IOV_RESOURCES\">PCI_IOV_RESOURCES</a>, <a class=\"id\" href=\"#PCI_IOV_RESOURCE_END\">PCI_IOV_RESOURCE_END</a> },", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_pci_dev\">for_each_pci_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#command\">command</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#idx_range\">idx_range</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#idx_range\">idx_range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#idx\">idx</a> <= <a class=\"id\" href=\"#idx_range\">idx_range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#idx\">idx</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#parent\">parent</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Already allocated */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Address not assigned at all */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disabled\">disabled</a> = !(<a class=\"id\" href=\"#command\">command</a> &amp; <a class=\"id\" href=\"#PCI_COMMAND_IO\">PCI_COMMAND_IO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disabled\">disabled</a> = !(<a class=\"id\" href=\"#command\">command</a> &amp; <a class=\"id\" href=\"#PCI_COMMAND_MEMORY\">PCI_COMMAND_MEMORY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pass\">pass</a> == <a class=\"id\" href=\"#disabled\">disabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"BAR %d: reserving %pr (d=%d, p=%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#disabled\">disabled</a>, <a class=\"id\" href=\"#pass\">pass</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_claim_resource\">pci_claim_resource</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#idx\">idx</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We'll assign a new address later */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#fw_addr\">fw_addr</a>[<a class=\"id\" href=\"#idx\">idx</a>] = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> -= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pass\">pass</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#PCI_ROM_RESOURCE\">PCI_ROM_RESOURCE</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_ROM_ENABLE\">IORESOURCE_ROM_ENABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Turn the ROM off, leave the resource region,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * but keep it unregistered. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#reg\">reg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"disabling ROM %pR\\n\", <a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#IORESOURCE_ROM_ENABLE\">IORESOURCE_ROM_ENABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rom_base_reg\">rom_base_reg</a>, &amp;<a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rom_base_reg\">rom_base_reg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> &amp; ~<a class=\"id\" href=\"#PCI_ROM_ADDRESS_ENABLE\">PCI_ROM_ADDRESS_ENABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcibios_assign_resources\">pcibios_assign_resources</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#pci_probe\">pci_probe</a> &amp; <a class=\"id\" href=\"#PCI_ASSIGN_ROMS\">PCI_ASSIGN_ROMS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Try to use BIOS settings for ROMs, otherwise let</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pci_assign_unassigned_resources() allocate the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * addresses.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_pci_dev\">for_each_pci_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#PCI_ROM_RESOURCE\">PCI_ROM_RESOURCE</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> || !<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_claim_resource\">pci_claim_resource</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_ROM_RESOURCE\">PCI_ROM_RESOURCE</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> -= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_assign_unassigned_resources\">pci_assign_unassigned_resources</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcibios_resource_survey\">pcibios_resource_survey</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DBG\">DBG</a>(\"PCI: Allocating resources\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_allocate_bus_resources\">pcibios_allocate_bus_resources</a>(&amp;<a class=\"id\" href=\"#pci_root_buses\">pci_root_buses</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_allocate_resources\">pcibios_allocate_resources</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_allocate_resources\">pcibios_allocate_resources</a>(1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e820_reserve_resources_late\">e820_reserve_resources_late</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Insert the IO APIC resources after PCI initialization has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * occured to handle IO APICS that are mapped in on a BAR in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PCI space, but before trying to assign unassigned pci res.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioapic_insert_resources\">ioapic_insert_resources</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * called in fs_initcall (one below subsys_initcall),</span>", 
"<span class=\"comment\"> * give a chance for motherboard reserve resources</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#fs_initcall\">fs_initcall</a>(<a class=\"id\" href=\"#pcibios_assign_resources\">pcibios_assign_resources</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  If we set up a device for bus mastering, we need to check the latency</span>", 
"<span class=\"comment\"> *  timer as certain crappy BIOSes forget to set it properly.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#pcibios_max_latency\">pcibios_max_latency</a> = 255;", 
"", 
"void <a class=\"id\" href=\"#pcibios_set_master\">pcibios_set_master</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#lat\">lat</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_LATENCY_TIMER\">PCI_LATENCY_TIMER</a>, &amp;<a class=\"id\" href=\"#lat\">lat</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lat\">lat</a> &lt; 16)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lat\">lat</a> = (64 <= <a class=\"id\" href=\"#pcibios_max_latency\">pcibios_max_latency</a>) ? 64 : <a class=\"id\" href=\"#pcibios_max_latency\">pcibios_max_latency</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#lat\">lat</a> &gt; <a class=\"id\" href=\"#pcibios_max_latency\">pcibios_max_latency</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lat\">lat</a> = <a class=\"id\" href=\"#pcibios_max_latency\">pcibios_max_latency</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"setting latency timer to %d\\n\", <a class=\"id\" href=\"#lat\">lat</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_LATENCY_TIMER\">PCI_LATENCY_TIMER</a>, <a class=\"id\" href=\"#lat\">lat</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#vm_operations_struct\">vm_operations_struct</a> <a class=\"id\" href=\"#pci_mmap_ops\">pci_mmap_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#access\">access</a> = <a class=\"id\" href=\"#generic_access_phys\">generic_access_phys</a>,", 
"};", 
"", 
"int <a class=\"id\" href=\"#pci_mmap_page_range\">pci_mmap_page_range</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#pci_mmap_state\">pci_mmap_state</a> <a class=\"id\" href=\"#mmap_state\">mmap_state</a>, int <a class=\"id\" href=\"#write_combine\">write_combine</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#prot\">prot</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* I/O space cannot be accessed via normal processor loads and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stores on this platform.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mmap_state\">mmap_state</a> == <a class=\"id\" href=\"#pci_mmap_io\">pci_mmap_io</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"> <span class=\"ts\"/> * Return error if pat is not enabled and write_combine is requested.</span>", 
"<span class=\"comment\"> <span class=\"ts\"/> * Caller can followup with UC MINUS request and add a WC mtrr if there</span>", 
"<span class=\"comment\"> <span class=\"ts\"/> * is a free mtrr slot.</span>", 
"<span class=\"comment\"> <span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a> && <a class=\"id\" href=\"#write_combine\">write_combine</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a> && <a class=\"id\" href=\"#write_combine\">write_combine</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> |= <a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a> || <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> &gt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ioremap() and ioremap_nocache() defaults to UC MINUS for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * To avoid attribute conflicts, request UC MINUS here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * aswell.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> |= <a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a> = <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#prot\">prot</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#io_remap_pfn_range\">io_remap_pfn_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> = &amp;<a class=\"id\" href=\"#pci_mmap_ops\">pci_mmap_ops</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/fd/eccecc524375c68c884705e5db07306f21419a.xr', __xr_tmp);
