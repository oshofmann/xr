var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/compr_mm.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Memory management for pre-boot and ramdisk uncompressors</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors: Alain Knaff &lt;alain@knaff.lu&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#DECOMPR_MM_H\">DECOMPR_MM_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECOMPR_MM_H\">DECOMPR_MM_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#STATIC\">STATIC</a>", 
"", 
"<span class=\"comment\">/* Code active when included from pre-boot environment: */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some architectures want to ensure there is no local data in their</span>", 
"<span class=\"comment\"> * pre-boot environment, so that data can arbitarily relocated (via</span>", 
"<span class=\"comment\"> * GOT references).  This is achieved by defining STATIC_RW_DATA to</span>", 
"<span class=\"comment\"> * be null.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#STATIC_RW_DATA\">STATIC_RW_DATA</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STATIC_RW_DATA\">STATIC_RW_DATA</a> static", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* A trivial malloc implementation, adapted from</span>", 
"<span class=\"comment\"> *  malloc by Hannu Savolainen 1993 and Matthias Urlichs 1994</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#STATIC_RW_DATA\">STATIC_RW_DATA</a> unsigned long <a class=\"id\" href=\"#malloc_ptr\">malloc_ptr</a>;", 
"<a class=\"id\" href=\"#STATIC_RW_DATA\">STATIC_RW_DATA</a> int <a class=\"id\" href=\"#malloc_count\">malloc_count</a>;", 
"", 
"static void *<a class=\"id\" href=\"#malloc\">malloc</a>(int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#malloc_ptr\">malloc_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#malloc_ptr\">malloc_ptr</a> = <a class=\"id\" href=\"#free_mem_ptr\">free_mem_ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#malloc_ptr\">malloc_ptr</a> = (<a class=\"id\" href=\"#malloc_ptr\">malloc_ptr</a> + 3) &amp; ~3;     <span class=\"comment\">/* Align */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (void *)<a class=\"id\" href=\"#malloc_ptr\">malloc_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#malloc_ptr\">malloc_ptr</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free_mem_end_ptr\">free_mem_end_ptr</a> && <a class=\"id\" href=\"#malloc_ptr\">malloc_ptr</a> >= <a class=\"id\" href=\"#free_mem_end_ptr\">free_mem_end_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#malloc_count\">malloc_count</a>++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free\">free</a>(void *<a class=\"id\" href=\"#where\">where</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#malloc_count\">malloc_count</a>--;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#malloc_count\">malloc_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#malloc_ptr\">malloc_ptr</a> = <a class=\"id\" href=\"#free_mem_ptr\">free_mem_ptr</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#large_malloc\">large_malloc</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#malloc\">malloc</a>(<a class=\"id\" href=\"#a\">a</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#large_free\">large_free</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#a\">a</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_error_fn\">set_error_fn</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT\">INIT</a>", 
"", 
"#else <span class=\"comment\">/* STATIC */</span>", 
"", 
"<span class=\"comment\">/* Code active when compiled standalone for use when loading ramdisk: */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
];
xr_frag_insert('l/fd/f6b7221b028904571736a49a2ac76c11721e30.xr', __xr_tmp);
