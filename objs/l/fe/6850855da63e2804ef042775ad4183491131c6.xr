var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_SCSI_DISK_H\">_SCSI_DISK_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_SCSI_DISK_H\">_SCSI_DISK_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * More than enough for everybody ;)  The huge number of majors</span>", 
"<span class=\"comment\"> * is a leftover from 16bit dev_t days, we don't really need that</span>", 
"<span class=\"comment\"> * much numberspace.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_MAJORS\">SD_MAJORS</a><span class=\"ts\"/>16", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is limited by the naming scheme enforced in sd_probe,</span>", 
"<span class=\"comment\"> * add another character to it if you really need more disks.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_MAX_DISKS\">SD_MAX_DISKS</a><span class=\"ts\"/>(((26 * 26) + 26 + 1) * 26)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Time out in seconds for disks and Magneto-opticals (which are slower).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_TIMEOUT\">SD_TIMEOUT</a><span class=\"ts\"/><span class=\"ts\"/>(30 * <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_MOD_TIMEOUT\">SD_MOD_TIMEOUT</a><span class=\"ts\"/><span class=\"ts\"/>(75 * <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Number of allowed retries</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_MAX_RETRIES\">SD_MAX_RETRIES</a><span class=\"ts\"/><span class=\"ts\"/>5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_PASSTHROUGH_RETRIES\">SD_PASSTHROUGH_RETRIES</a><span class=\"ts\"/>1", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Size of the initial data buffer for mode and read capacity data</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_BUF_SIZE\">SD_BUF_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>512", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Number of sectors at the end of the device to avoid multi-sector</span>", 
"<span class=\"comment\"> * accesses to in the case of last_sector_bug</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SD_LAST_BUGGY_SECTORS\">SD_LAST_BUGGY_SECTORS</a><span class=\"ts\"/>8", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_EXT_CDB_SIZE\">SD_EXT_CDB_SIZE</a> = 32,<span class=\"ts\"/><span class=\"comment\">/* Extended CDB size */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_MEMPOOL_SIZE\">SD_MEMPOOL_SIZE</a> = 2,<span class=\"ts\"/><span class=\"comment\">/* CDB pool size */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_driver\">scsi_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>;<span class=\"ts\"/><span class=\"comment\">/* always &amp;sd_template */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a><span class=\"ts\"/>*<a class=\"id\" href=\"#disk\">disk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><a class=\"id\" href=\"#openers\">openers</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a><span class=\"ts\"/><a class=\"id\" href=\"#capacity\">capacity</a>;<span class=\"ts\"/><span class=\"comment\">/* size in 512-byte sectors */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><a class=\"id\" href=\"#hw_sector_size\">hw_sector_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#media_present\">media_present</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_prot\">write_prot</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protection_type\">protection_type</a>;<span class=\"comment\">/* Data Integrity Field */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#previous_state\">previous_state</a> : 1;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#ATO\">ATO</a> : 1;<span class=\"ts\"/><span class=\"comment\">/* state of disk ATO bit */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#WCE\">WCE</a> : 1;<span class=\"ts\"/><span class=\"comment\">/* state of disk WCE bit */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#RCD\">RCD</a> : 1;<span class=\"ts\"/><span class=\"comment\">/* state of disk RCD bit, unused */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#DPOFUA\">DPOFUA</a> : 1;<span class=\"ts\"/><span class=\"comment\">/* state of disk DPOFUA bit */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#first_scan\">first_scan</a> : 1;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#thin_provisioning\">thin_provisioning</a> : 1;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#unmap\">unmap</a> : 1;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_scsi_disk\">to_scsi_disk</a>(<a class=\"id\" href=\"#obj\">obj</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#obj\">obj</a>,struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a>,<a class=\"id\" href=\"#dev\">dev</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#scsi_disk\">scsi_disk</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#private_data\">private_data</a>, struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a>, <a class=\"id\" href=\"#driver\">driver</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#prefix\">prefix</a>, <a class=\"id\" href=\"#sdsk\">sdsk</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#a\">a</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"        (<a class=\"id\" href=\"#sdsk\">sdsk</a>)-><a class=\"id\" href=\"#disk\">disk</a> ?<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#prefix\">prefix</a>, (<a class=\"id\" href=\"#sdsk\">sdsk</a>)-><a class=\"id\" href=\"#device\">device</a>, \"[%s] \" <a class=\"id\" href=\"#fmt\">fmt</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#sdsk\">sdsk</a>)-><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a>, ##<a class=\"id\" href=\"#a\">a</a>) :<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#prefix\">prefix</a>, (<a class=\"id\" href=\"#sdsk\">sdsk</a>)-><a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, ##<a class=\"id\" href=\"#a\">a</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A DIF-capable target device can be formatted with different</span>", 
"<span class=\"comment\"> * protection schemes.  Currently 0 through 3 are defined:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Type 0 is regular (unprotected) I/O</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Type 1 defines the contents of the guard and reference tags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Type 2 defines the contents of the guard and reference tags and</span>", 
"<span class=\"comment\"> * uses 32-byte commands to seed the latter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Type 3 defines the contents of the guard tag only</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum <a class=\"id\" href=\"#sd_dif_target_protection_types\">sd_dif_target_protection_types</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_DIF_TYPE0_PROTECTION\">SD_DIF_TYPE0_PROTECTION</a> = 0x0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_DIF_TYPE1_PROTECTION\">SD_DIF_TYPE1_PROTECTION</a> = 0x1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_DIF_TYPE2_PROTECTION\">SD_DIF_TYPE2_PROTECTION</a> = 0x2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SD_DIF_TYPE3_PROTECTION\">SD_DIF_TYPE3_PROTECTION</a> = 0x3,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Data Integrity Field tuple.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sd_dif_tuple\">sd_dif_tuple</a> {", 
"       <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#guard_tag\">guard_tag</a>;<span class=\"ts\"/><span class=\"comment\">/* Checksum */</span>", 
"       <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#app_tag\">app_tag</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Opaque storage */</span>", 
"       <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#ref_tag\">ref_tag</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Target LBA or indirect LBA */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_INTEGRITY\">CONFIG_BLK_DEV_INTEGRITY</a>", 
"", 
"extern void <a class=\"id\" href=\"#sd_dif_config_host\">sd_dif_config_host</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *);", 
"extern int <a class=\"id\" href=\"#sd_dif_prepare\">sd_dif_prepare</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a>, unsigned int);", 
"extern void <a class=\"id\" href=\"#sd_dif_complete\">sd_dif_complete</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *, unsigned int);", 
"", 
"#else <span class=\"comment\">/* CONFIG_BLK_DEV_INTEGRITY */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sd_dif_config_host\">sd_dif_config_host</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sd_dif_prepare\">sd_dif_prepare</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#s\">s</a>, unsigned int <a class=\"id\" href=\"#a\">a</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sd_dif_complete\">sd_dif_complete</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>, unsigned int <a class=\"id\" href=\"#a\">a</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_BLK_DEV_INTEGRITY */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _SCSI_DISK_H */</span>", 
];
xr_frag_insert('l/fe/6850855da63e2804ef042775ad4183491131c6.xr', __xr_tmp);
