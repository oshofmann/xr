var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#parse_bsd\">parse_bsd</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#origin\">origin</a>, \"bsd\", <a class=\"id\" href=\"#BSD_MAXPARTITIONS\">BSD_MAXPARTITIONS</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#parse_netbsd\">parse_netbsd</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#origin\">origin</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BSD_DISKLABEL\">CONFIG_BSD_DISKLABEL</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parse_bsd\">parse_bsd</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#origin\">origin</a>, \"netbsd\", <a class=\"id\" href=\"#BSD_MAXPARTITIONS\">BSD_MAXPARTITIONS</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#parse_openbsd\">parse_openbsd</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#origin\">origin</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BSD_DISKLABEL\">CONFIG_BSD_DISKLABEL</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parse_bsd\">parse_bsd</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#origin\">origin</a>, \"openbsd\",", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#OPENBSD_MAXPARTITIONS\">OPENBSD_MAXPARTITIONS</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create devices for Unixware partitions listed in a disklabel, under a</span>", 
"<span class=\"comment\"> * dos-like partition. See parse_extended() for more information.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#parse_unixware\">parse_unixware</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#origin\">origin</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_UNIXWARE_DISKLABEL\">CONFIG_UNIXWARE_DISKLABEL</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#unixware_disklabel\">unixware_disklabel</a> *<a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#unixware_slice\">unixware_slice</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#offset\">offset</a> + 29, &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#l\">l</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#d_magic\">d_magic</a>) != <a class=\"id\" href=\"#UNIXWARE_DISKMAGIC\">UNIXWARE_DISKMAGIC</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#vtoc\">vtoc</a>.<a class=\"id\" href=\"#v_magic\">v_magic</a>) != <a class=\"id\" href=\"#UNIXWARE_DISKMAGIC2\">UNIXWARE_DISKMAGIC2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[1 + <a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a> + 10 + 12 + 1];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>), \" %s%d: <unixware:\", <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#origin\">origin</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#vtoc\">vtoc</a>.<a class=\"id\" href=\"#v_slice\">v_slice</a>[1];", 
"<span class=\"ts\"/><span class=\"comment\">/* I omit the 0th slice as it is the same as whole disk. */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a> - &amp;<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#vtoc\">vtoc</a>.<a class=\"id\" href=\"#v_slice\">v_slice</a>[0] &lt; <a class=\"id\" href=\"#UNIXWARE_NUMSLICE\">UNIXWARE_NUMSLICE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#limit\">limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#s_label\">s_label</a> != <a class=\"id\" href=\"#UNIXWARE_FS_UNUSED\">UNIXWARE_FS_UNUSED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_partition\">put_partition</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>++,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start_sect\">start_sect</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nr_sects\">nr_sects</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \" >\\n\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Minix 2.0.0/2.0.2 subpartition support.</span>", 
"<span class=\"comment\"> * Anand Krishnamurthy &lt;anandk@wiproge.med.ge.com&gt;</span>", 
"<span class=\"comment\"> * Rajeev V. Pillai    &lt;rajeevvp@yahoo.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#parse_minix\">parse_minix</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#origin\">origin</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MINIX_SUBPARTITION\">CONFIG_MINIX_SUBPARTITION</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#partition\">partition</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#offset\">offset</a>, &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#partition\">partition</a> *)(<a class=\"id\" href=\"#data\">data</a> + 0x1be);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The first sector of a Minix partition can have either</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a secondary MBR describing its subpartitions, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the normal boot sector. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msdos_magic_present\">msdos_magic_present</a> (<a class=\"id\" href=\"#data\">data</a> + 510) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#SYS_IND\">SYS_IND</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#MINIX_PARTITION\">MINIX_PARTITION</a>) { <span class=\"comment\">/* subpartition table present */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[1 + <a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a> + 10 + 9 + 1];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>), \" %s%d: <minix:\", <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#origin\">origin</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MINIX_NR_SUBPARTITIONS\">MINIX_NR_SUBPARTITIONS</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#limit\">limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* add each partition in use */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#SYS_IND\">SYS_IND</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#MINIX_PARTITION\">MINIX_PARTITION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_partition\">put_partition</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a>++,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#start_sect\">start_sect</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#nr_sects\">nr_sects</a>(<a class=\"id\" href=\"#p\">p</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \" >\\n\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MINIX_SUBPARTITION */</span>", 
"}", 
"", 
"static struct {", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#parse\">parse</a>)(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *, <a class=\"id\" href=\"#sector_t\">sector_t</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a>, int);", 
"} <a class=\"id\" href=\"#subtypes\">subtypes</a>[] = {", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#FREEBSD_PARTITION\">FREEBSD_PARTITION</a>, <a class=\"id\" href=\"#parse_freebsd\">parse_freebsd</a>},", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#NETBSD_PARTITION\">NETBSD_PARTITION</a>, <a class=\"id\" href=\"#parse_netbsd\">parse_netbsd</a>},", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#OPENBSD_PARTITION\">OPENBSD_PARTITION</a>, <a class=\"id\" href=\"#parse_openbsd\">parse_openbsd</a>},", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#MINIX_PARTITION\">MINIX_PARTITION</a>, <a class=\"id\" href=\"#parse_minix\">parse_minix</a>},", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#UNIXWARE_PARTITION\">UNIXWARE_PARTITION</a>, <a class=\"id\" href=\"#parse_unixware\">parse_unixware</a>},", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#SOLARIS_X86_PARTITION\">SOLARIS_X86_PARTITION</a>, <a class=\"id\" href=\"#parse_solaris_x86\">parse_solaris_x86</a>},", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#NEW_SOLARIS_X86_PARTITION\">NEW_SOLARIS_X86_PARTITION</a>, <a class=\"id\" href=\"#parse_solaris_x86\">parse_solaris_x86</a>},", 
"<span class=\"ts\"/>{0, <a class=\"id\" href=\"#NULL\">NULL</a>},", 
"};", 
" ", 
"int <a class=\"id\" href=\"#msdos_partition\">msdos_partition</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector_size\">sector_size</a> = <a class=\"id\" href=\"#bdev_logical_block_size\">bdev_logical_block_size</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bdev\">bdev</a>) / 512;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#partition\">partition</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fat_boot_sector\">fat_boot_sector</a> *<a class=\"id\" href=\"#fb\">fb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slot\">slot</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, 0, &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#msdos_magic_present\">msdos_magic_present</a>(<a class=\"id\" href=\"#data\">data</a> + 510)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#aix_magic_present\">aix_magic_present</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \" [AIX]\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now that the 55aa signature is present, this is probably</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * either the boot sector of a FAT filesystem or a DOS-type</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * partition table. Reject this in case the boot indicator</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is not 0 or 0x80.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#partition\">partition</a> *) (<a class=\"id\" href=\"#data\">data</a> + 0x1be);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#slot\">slot</a> = 1; <a class=\"id\" href=\"#slot\">slot</a> <= 4; <a class=\"id\" href=\"#slot\">slot</a>++, <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#boot_ind\">boot_ind</a> != 0 && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#boot_ind\">boot_ind</a> != 0x80) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Even without a valid boot inidicator value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * its still possible this is valid FAT filesystem</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * without a partition table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fb\">fb</a> = (struct <a class=\"id\" href=\"#fat_boot_sector\">fat_boot_sector</a> *) <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> == 1 && <a class=\"id\" href=\"#fb\">fb</a>-><a class=\"id\" href=\"#reserved\">reserved</a> && <a class=\"id\" href=\"#fb\">fb</a>-><a class=\"id\" href=\"#fats\">fats</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#fat_valid_media\">fat_valid_media</a>(<a class=\"id\" href=\"#fb\">fb</a>-><a class=\"id\" href=\"#media\">media</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \"\\n\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EFI_PARTITION\">CONFIG_EFI_PARTITION</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#partition\">partition</a> *) (<a class=\"id\" href=\"#data\">data</a> + 0x1be);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#slot\">slot</a> = 1 ; <a class=\"id\" href=\"#slot\">slot</a> <= 4 ; <a class=\"id\" href=\"#slot\">slot</a>++, <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If this is an EFI GPT disk, msdos should ignore it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#SYS_IND\">SYS_IND</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#EFI_PMBR_OSTYPE_EFI_GPT\">EFI_PMBR_OSTYPE_EFI_GPT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#partition\">partition</a> *) (<a class=\"id\" href=\"#data\">data</a> + 0x1be);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Look for partitions in two passes:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First find the primary and DOS-type extended partitions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On the second pass look inside *BSD, Unixware and Solaris partitions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#next\">next</a> = 5;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#slot\">slot</a> = 1 ; <a class=\"id\" href=\"#slot\">slot</a> <= 4 ; <a class=\"id\" href=\"#slot\">slot</a>++, <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start_sect\">start_sect</a>(<a class=\"id\" href=\"#p\">p</a>)*<a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#nr_sects\">nr_sects</a>(<a class=\"id\" href=\"#p\">p</a>)*<a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_extended_partition\">is_extended_partition</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * prevent someone doing mkfs or mkswap on an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * extended partition, but leave room for LILO</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * FIXME: this uses one logical sector for &gt; 512b</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sector, although it may not be enough/proper.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#n\">n</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#sector_size\">sector_size</a>, <a class=\"id\" href=\"#n\">n</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_partition\">put_partition</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \" <\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parse_extended\">parse_extended</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \" >\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_partition\">put_partition</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#SYS_IND\">SYS_IND</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#LINUX_RAID_PARTITION\">LINUX_RAID_PARTITION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#parts\">parts</a>[<a class=\"id\" href=\"#slot\">slot</a>].<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#ADDPART_FLAG_RAID\">ADDPART_FLAG_RAID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#SYS_IND\">SYS_IND</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#DM6_PARTITION\">DM6_PARTITION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \"[DM]\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#SYS_IND\">SYS_IND</a>(<a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#EZD_PARTITION\">EZD_PARTITION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \"[EZD]\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \"\\n\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* second pass - output for each on a separate line */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (struct <a class=\"id\" href=\"#partition\">partition</a> *) (0x1be + <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#slot\">slot</a> = 1 ; <a class=\"id\" href=\"#slot\">slot</a> <= 4 ; <a class=\"id\" href=\"#slot\">slot</a>++, <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#SYS_IND\">SYS_IND</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_sects\">nr_sects</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = 0; <a class=\"id\" href=\"#subtypes\">subtypes</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#parse\">parse</a> && <a class=\"id\" href=\"#id\">id</a> != <a class=\"id\" href=\"#subtypes\">subtypes</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#id\">id</a>; <a class=\"id\" href=\"#n\">n</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#subtypes\">subtypes</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#parse\">parse</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#subtypes\">subtypes</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#parse\">parse</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#start_sect\">start_sect</a>(<a class=\"id\" href=\"#p\">p</a>) * <a class=\"id\" href=\"#sector_size\">sector_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#nr_sects\">nr_sects</a>(<a class=\"id\" href=\"#p\">p</a>) * <a class=\"id\" href=\"#sector_size\">sector_size</a>, <a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
];
xr_frag_insert('l/fe/a2a11ff04dab167623c93e5bb70bb521e2e403.xr', __xr_tmp);
