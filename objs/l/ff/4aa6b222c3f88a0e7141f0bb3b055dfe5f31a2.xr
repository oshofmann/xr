var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * There are multiple 16-bit CRC polynomials in common use, but this is</span>", 
"<span class=\"comment\"> * *the* standard CRC-32 polynomial, first popularized by Ethernet.</span>", 
"<span class=\"comment\"> * x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x^1+x^0</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CRCPOLY_LE\">CRCPOLY_LE</a> 0xedb88320", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CRCPOLY_BE\">CRCPOLY_BE</a> 0x04c11db7", 
"", 
"<span class=\"comment\">/* How many bits at a time to use.  Requires a table of 4&lt;&lt;CRC_xx_BITS bytes. */</span>", 
"<span class=\"comment\">/* For less performance-sensitive, use 4 */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a> ", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a> 8", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a> 8", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Little-endian CRC computation.  Used with serial bit streams sent</span>", 
"<span class=\"comment\"> * lsbit-first.  Be sure to use cpu_to_le32() to append the computed CRC.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a> &gt; 8 || <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a> &lt; 1 || <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a> &amp; <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a>-1", 
"# <a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a> <a class=\"id\" href=\"#must\">must</a> <a class=\"id\" href=\"#be\">be</a> <a class=\"id\" href=\"#a\">a</a> <a class=\"id\" href=\"#power\">power</a> <a class=\"id\" href=\"#of\">of</a> 2 <a class=\"id\" href=\"#between\">between</a> 1 <a class=\"id\" href=\"#and\">and</a> 8", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Big-endian CRC computation.  Used with serial bit streams sent</span>", 
"<span class=\"comment\"> * msbit-first.  Be sure to use cpu_to_be32() to append the computed CRC.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a> &gt; 8 || <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a> &lt; 1 || <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a> &amp; <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a>-1", 
"# <a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a> <a class=\"id\" href=\"#must\">must</a> <a class=\"id\" href=\"#be\">be</a> <a class=\"id\" href=\"#a\">a</a> <a class=\"id\" href=\"#power\">power</a> <a class=\"id\" href=\"#of\">of</a> 2 <a class=\"id\" href=\"#between\">between</a> 1 <a class=\"id\" href=\"#and\">and</a> 8", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/ff/4aa6b222c3f88a0e7141f0bb3b055dfe5f31a2.xr', __xr_tmp);
