var __xr_tmp = [
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strict_strtoul - convert a string to an unsigned long strictly</span>", 
"<span class=\"comment\"> * @cp: The string to be converted</span>", 
"<span class=\"comment\"> * @base: The number base to use</span>", 
"<span class=\"comment\"> * @res: The converted result value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * strict_strtoul converts a string to an unsigned long only if the</span>", 
"<span class=\"comment\"> * string is really an unsigned long string, any string containing</span>", 
"<span class=\"comment\"> * any invalid char at the tail will be rejected and -EINVAL is returned,</span>", 
"<span class=\"comment\"> * only a newline char at the tail is acceptible because people generally</span>", 
"<span class=\"comment\"> * change a module parameter in the following way:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>echo 1024 &gt; /sys/module/e1000/parameters/copybreak</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * echo will append a newline to the tail.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns 0 if conversion is successful and *res is set to the converted</span>", 
"<span class=\"comment\"> * value, otherwise it returns -EINVAL and *res is set to 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * simple_strtoul just ignores the successive invalid characters and</span>", 
"<span class=\"comment\"> * return the converted value of prefix part of the string.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(const char *<a class=\"id\" href=\"#cp\">cp</a>, unsigned int <a class=\"id\" href=\"#base\">base</a>, unsigned long *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#cp\">cp</a>, &amp;<a class=\"id\" href=\"#tail\">tail</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tail\">tail</a> == <a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tail\">tail</a>[0] == '\\0') || (<a class=\"id\" href=\"#tail\">tail</a>[0] == '\\n' && <a class=\"id\" href=\"#tail\">tail</a>[1] == '\\0')) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strict_strtol - convert a string to a long strictly</span>", 
"<span class=\"comment\"> * @cp: The string to be converted</span>", 
"<span class=\"comment\"> * @base: The number base to use</span>", 
"<span class=\"comment\"> * @res: The converted result value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * strict_strtol is similiar to strict_strtoul, but it allows the first</span>", 
"<span class=\"comment\"> * character of a string is '-'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns 0 if conversion is successful and *res is set to the converted</span>", 
"<span class=\"comment\"> * value, otherwise it returns -EINVAL and *res is set to 0.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#strict_strtol\">strict_strtol</a>(const char *<a class=\"id\" href=\"#cp\">cp</a>, unsigned int <a class=\"id\" href=\"#base\">base</a>, long *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#cp\">cp</a> == '-') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#cp\">cp</a> + 1, <a class=\"id\" href=\"#base\">base</a>, (unsigned long *)<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#res\">res</a> = -(*<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#base\">base</a>, (unsigned long *)<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strict_strtol\">strict_strtol</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strict_strtoull - convert a string to an unsigned long long strictly</span>", 
"<span class=\"comment\"> * @cp: The string to be converted</span>", 
"<span class=\"comment\"> * @base: The number base to use</span>", 
"<span class=\"comment\"> * @res: The converted result value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * strict_strtoull converts a string to an unsigned long long only if the</span>", 
"<span class=\"comment\"> * string is really an unsigned long long string, any string containing</span>", 
"<span class=\"comment\"> * any invalid char at the tail will be rejected and -EINVAL is returned,</span>", 
"<span class=\"comment\"> * only a newline char at the tail is acceptible because people generally</span>", 
"<span class=\"comment\"> * change a module parameter in the following way:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>echo 1024 &gt; /sys/module/e1000/parameters/copybreak</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * echo will append a newline to the tail of the string.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns 0 if conversion is successful and *res is set to the converted</span>", 
"<span class=\"comment\"> * value, otherwise it returns -EINVAL and *res is set to 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * simple_strtoull just ignores the successive invalid characters and</span>", 
"<span class=\"comment\"> * return the converted value of prefix part of the string.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#strict_strtoull\">strict_strtoull</a>(const char *<a class=\"id\" href=\"#cp\">cp</a>, unsigned int <a class=\"id\" href=\"#base\">base</a>, unsigned long long *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#simple_strtoull\">simple_strtoull</a>(<a class=\"id\" href=\"#cp\">cp</a>, &amp;<a class=\"id\" href=\"#tail\">tail</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tail\">tail</a> == <a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tail\">tail</a>[0] == '\\0') || (<a class=\"id\" href=\"#tail\">tail</a>[0] == '\\n' && <a class=\"id\" href=\"#tail\">tail</a>[1] == '\\0')) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strict_strtoull\">strict_strtoull</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * strict_strtoll - convert a string to a long long strictly</span>", 
"<span class=\"comment\"> * @cp: The string to be converted</span>", 
"<span class=\"comment\"> * @base: The number base to use</span>", 
"<span class=\"comment\"> * @res: The converted result value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * strict_strtoll is similiar to strict_strtoull, but it allows the first</span>", 
"<span class=\"comment\"> * character of a string is '-'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns 0 if conversion is successful and *res is set to the converted</span>", 
"<span class=\"comment\"> * value, otherwise it returns -EINVAL and *res is set to 0.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#strict_strtoll\">strict_strtoll</a>(const char *<a class=\"id\" href=\"#cp\">cp</a>, unsigned int <a class=\"id\" href=\"#base\">base</a>, long long *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#cp\">cp</a> == '-') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoull\">strict_strtoull</a>(<a class=\"id\" href=\"#cp\">cp</a> + 1, <a class=\"id\" href=\"#base\">base</a>, (unsigned long long *)<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#res\">res</a> = -(*<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoull\">strict_strtoull</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#base\">base</a>, (unsigned long long *)<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#strict_strtoll\">strict_strtoll</a>);", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"int <a class=\"id\" href=\"#skip_atoi\">skip_atoi</a>(const char **<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#isdigit\">isdigit</a>(**<a class=\"id\" href=\"#s\">s</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#i\">i</a>*10 + *((*<a class=\"id\" href=\"#s\">s</a>)++) - '0';", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Decimal conversion is by far the most typical, and is used</span>", 
"<span class=\"comment\"> * for /proc and /sys data. This directly impacts e.g. top performance</span>", 
"<span class=\"comment\"> * with many processes running. We optimize it for speed</span>", 
"<span class=\"comment\"> * using code from</span>", 
"<span class=\"comment\"> * http://www.cs.uiowa.edu/~jones/bcd/decimal.html</span>", 
"<span class=\"comment\"> * (with permission from the author, Douglas W. Jones). */</span>", 
"", 
"<span class=\"comment\">/* Formats correctly any integer in [0,99999].</span>", 
"<span class=\"comment\"> * Outputs from one to five digits depending on input.</span>", 
"<span class=\"comment\"> * On i386 gcc 4.1.2 -O2: ~250 bytes of code. */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#put_dec_trunc\">put_dec_trunc</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned <a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#d3\">d3</a>, <a class=\"id\" href=\"#d2\">d2</a>, <a class=\"id\" href=\"#d1\">d1</a>, <a class=\"id\" href=\"#d0\">d0</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d1\">d1</a> = (<a class=\"id\" href=\"#q\">q</a>>>4) &amp; 0xf;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d2\">d2</a> = (<a class=\"id\" href=\"#q\">q</a>>>8) &amp; 0xf;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d3\">d3</a> = (<a class=\"id\" href=\"#q\">q</a>>>12);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d0\">d0</a> = 6*(<a class=\"id\" href=\"#d3\">d3</a> + <a class=\"id\" href=\"#d2\">d2</a> + <a class=\"id\" href=\"#d1\">d1</a>) + (<a class=\"id\" href=\"#q\">q</a> &amp; 0xf);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = (<a class=\"id\" href=\"#d0\">d0</a> * 0xcd) >> 11;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d0\">d0</a> = <a class=\"id\" href=\"#d0\">d0</a> - 10*<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#d0\">d0</a> + '0'; <span class=\"comment\">/* least significant digit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d1\">d1</a> = <a class=\"id\" href=\"#q\">q</a> + 9*<a class=\"id\" href=\"#d3\">d3</a> + 5*<a class=\"id\" href=\"#d2\">d2</a> + <a class=\"id\" href=\"#d1\">d1</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d1\">d1</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = (<a class=\"id\" href=\"#d1\">d1</a> * 0xcd) >> 11;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d1\">d1</a> = <a class=\"id\" href=\"#d1\">d1</a> - 10*<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#d1\">d1</a> + '0'; <span class=\"comment\">/* next digit */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d2\">d2</a> = <a class=\"id\" href=\"#q\">q</a> + 2*<a class=\"id\" href=\"#d2\">d2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#d2\">d2</a> != 0) || (<a class=\"id\" href=\"#d3\">d3</a> != 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = (<a class=\"id\" href=\"#d2\">d2</a> * 0xd) >> 7;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d2\">d2</a> = <a class=\"id\" href=\"#d2\">d2</a> - 10*<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#d2\">d2</a> + '0'; <span class=\"comment\">/* next digit */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d3\">d3</a> = <a class=\"id\" href=\"#q\">q</a> + 4*<a class=\"id\" href=\"#d3\">d3</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d3\">d3</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = (<a class=\"id\" href=\"#d3\">d3</a> * 0xcd) >> 11;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d3\">d3</a> = <a class=\"id\" href=\"#d3\">d3</a> - 10*<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#d3\">d3</a> + '0';  <span class=\"comment\">/* next digit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#q\">q</a> + '0'; <span class=\"comment\">/* most sign. digit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"<span class=\"comment\">/* Same with if's removed. Always emits five digits */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#put_dec_full\">put_dec_full</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned <a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* BTW, if q is in [0,9999], 8-bit ints will be enough, */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* but anyway, gcc produces better code with full-sized ints */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#d3\">d3</a>, <a class=\"id\" href=\"#d2\">d2</a>, <a class=\"id\" href=\"#d1\">d1</a>, <a class=\"id\" href=\"#d0\">d0</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d1\">d1</a> = (<a class=\"id\" href=\"#q\">q</a>>>4) &amp; 0xf;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d2\">d2</a> = (<a class=\"id\" href=\"#q\">q</a>>>8) &amp; 0xf;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d3\">d3</a> = (<a class=\"id\" href=\"#q\">q</a>>>12);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Possible ways to approx. divide by 10</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * gcc -O2 replaces multiply with shifts and adds</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (x * 0xcd) &gt;&gt; 11: 11001101 - shorter code than * 0x67 (on i386)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (x * 0x67) &gt;&gt; 10:  1100111</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (x * 0x34) &gt;&gt; 9:    110100 - same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (x * 0x1a) &gt;&gt; 8:     11010 - same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (x * 0x0d) &gt;&gt; 7:      1101 - same, shortest code (on i386)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d0\">d0</a> = 6*(<a class=\"id\" href=\"#d3\">d3</a> + <a class=\"id\" href=\"#d2\">d2</a> + <a class=\"id\" href=\"#d1\">d1</a>) + (<a class=\"id\" href=\"#q\">q</a> &amp; 0xf);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = (<a class=\"id\" href=\"#d0\">d0</a> * 0xcd) >> 11;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d0\">d0</a> = <a class=\"id\" href=\"#d0\">d0</a> - 10*<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#d0\">d0</a> + '0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d1\">d1</a> = <a class=\"id\" href=\"#q\">q</a> + 9*<a class=\"id\" href=\"#d3\">d3</a> + 5*<a class=\"id\" href=\"#d2\">d2</a> + <a class=\"id\" href=\"#d1\">d1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = (<a class=\"id\" href=\"#d1\">d1</a> * 0xcd) >> 11;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d1\">d1</a> = <a class=\"id\" href=\"#d1\">d1</a> - 10*<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#d1\">d1</a> + '0';", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d2\">d2</a> = <a class=\"id\" href=\"#q\">q</a> + 2*<a class=\"id\" href=\"#d2\">d2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = (<a class=\"id\" href=\"#d2\">d2</a> * 0xd) >> 7;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d2\">d2</a> = <a class=\"id\" href=\"#d2\">d2</a> - 10*<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#d2\">d2</a> + '0';", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d3\">d3</a> = <a class=\"id\" href=\"#q\">q</a> + 4*<a class=\"id\" href=\"#d3\">d3</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = (<a class=\"id\" href=\"#d3\">d3</a> * 0xcd) >> 11; <span class=\"comment\">/* - shorter code */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* q = (d3 * 0x67) &gt;&gt; 10; - would also work */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d3\">d3</a> = <a class=\"id\" href=\"#d3\">d3</a> - 10*<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#d3\">d3</a> + '0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#q\">q</a> + '0';", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"<span class=\"comment\">/* No inlining helps gcc to use registers better */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#put_dec\">put_dec</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long long <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#rem\">rem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> &lt; 100000)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#put_dec_trunc\">put_dec_trunc</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rem\">rem</a> = <a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#num\">num</a>, 100000);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#put_dec_full\">put_dec_full</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#rem\">rem</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZEROPAD\">ZEROPAD</a><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* pad with zero */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIGN\">SIGN</a><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unsigned/signed long */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PLUS\">PLUS</a><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* show plus */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SPACE\">SPACE</a><span class=\"ts\"/>8<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* space if plus */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LEFT\">LEFT</a><span class=\"ts\"/>16<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* left justified */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SMALL\">SMALL</a><span class=\"ts\"/>32<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* use lowercase in hex (must be 32 == 0x20) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SPECIAL\">SPECIAL</a><span class=\"ts\"/>64<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* prefix hex with \"0x\", octal with \"0\" */</span>", 
"", 
"enum <a class=\"id\" href=\"#format_type\">format_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_NONE\">FORMAT_TYPE_NONE</a>, <span class=\"comment\">/* Just a string part */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_WIDTH\">FORMAT_TYPE_WIDTH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_PRECISION\">FORMAT_TYPE_PRECISION</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_CHAR\">FORMAT_TYPE_CHAR</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_STR\">FORMAT_TYPE_STR</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_PTR\">FORMAT_TYPE_PTR</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_PERCENT_CHAR\">FORMAT_TYPE_PERCENT_CHAR</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_INVALID\">FORMAT_TYPE_INVALID</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_LONG_LONG\">FORMAT_TYPE_LONG_LONG</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_ULONG\">FORMAT_TYPE_ULONG</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_LONG\">FORMAT_TYPE_LONG</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_UBYTE\">FORMAT_TYPE_UBYTE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_BYTE\">FORMAT_TYPE_BYTE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_USHORT\">FORMAT_TYPE_USHORT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_SHORT\">FORMAT_TYPE_SHORT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_UINT\">FORMAT_TYPE_UINT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_INT\">FORMAT_TYPE_INT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_NRCHARS\">FORMAT_TYPE_NRCHARS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_SIZE_T\">FORMAT_TYPE_SIZE_T</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FORMAT_TYPE_PTRDIFF\">FORMAT_TYPE_PTRDIFF</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* format_type enum */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* flags to number() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* number base, 8, 10 or 16 only */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#qualifier\">qualifier</a>;<span class=\"ts\"/><span class=\"comment\">/* number qualifier, one of 'hHlLtzZ' */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s16\">s16</a><span class=\"ts\"/><a class=\"id\" href=\"#field_width\">field_width</a>;<span class=\"ts\"/><span class=\"comment\">/* width of output field */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s16\">s16</a><span class=\"ts\"/><a class=\"id\" href=\"#precision\">precision</a>;<span class=\"ts\"/><span class=\"comment\">/* # of digits/chars */</span>", 
"};", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#number\">number</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#end\">end</a>, unsigned long long <a class=\"id\" href=\"#num\">num</a>,", 
"<span class=\"ts\"/>     struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#spec\">spec</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* we are called with base 8, 10 or 16, only, thus don't need \"G...\"  */</span>", 
"<span class=\"ts\"/>static const char <a class=\"id\" href=\"#digits\">digits</a>[16] = \"0123456789ABCDEF\"; <span class=\"comment\">/* \"GHIJKLMNOPQRSTUVWXYZ\"; */</span>", 
"", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[66];", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#sign\">sign</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#locase\">locase</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_pfx\">need_pfx</a> = ((<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SPECIAL\">SPECIAL</a>) && <a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#base\">base</a> != 10);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* locase = 0 or 0x20. ORing digits or letters with 'locase'</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * produces same digits or (maybe lowercased) letters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locase\">locase</a> = (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SMALL\">SMALL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#LEFT\">LEFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ZEROPAD\">ZEROPAD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sign\">sign</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGN\">SIGN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((signed long long)<a class=\"id\" href=\"#num\">num</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sign\">sign</a> = '-';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = -(signed long long)<a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PLUS\">PLUS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sign\">sign</a> = '+';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SPACE\">SPACE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sign\">sign</a> = ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_pfx\">need_pfx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#base\">base</a> == 16)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* generate full string in tmp[], in reverse order */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#i\">i</a>++] = '0';", 
"<span class=\"ts\"/><span class=\"comment\">/* Generic code, for any base:</span>", 
"<span class=\"comment\"><span class=\"ts\"/>else do {</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>tmp[i++] = (digits[do_div(num,base)] | locase);</span>", 
"<span class=\"comment\"><span class=\"ts\"/>} while (num != 0);</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#base\">base</a> != 10) { <span class=\"comment\">/* 8 or 16 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#base\">base</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#shift\">shift</a> = 3;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#base\">base</a> == 16)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#i\">i</a>++] = (<a class=\"id\" href=\"#digits\">digits</a>[((unsigned char)<a class=\"id\" href=\"#num\">num</a>) &amp; <a class=\"id\" href=\"#mask\">mask</a>] | <a class=\"id\" href=\"#locase\">locase</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> >>= <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/>} else { <span class=\"comment\">/* base 10 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#put_dec\">put_dec</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#num\">num</a>) - <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* printing 100 using %2d gives \"100\", not \"00\" */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; <a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#precision\">precision</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#precision\">precision</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* leading space padding */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> -= <a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#precision\">precision</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#ZEROPAD\">ZEROPAD</a>+<a class=\"id\" href=\"#LEFT\">LEFT</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* sign */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sign\">sign</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#sign\">sign</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* \"0x\" / \"0\" prefix */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_pfx\">need_pfx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = '0';", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#base\">base</a> == 16) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = ('X' | <a class=\"id\" href=\"#locase\">locase</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* zero or space padding */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#LEFT\">LEFT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a> = (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ZEROPAD\">ZEROPAD</a>) ? '0' : ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* hmm even more zero padding? */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> <= --<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#precision\">precision</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = '0';", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* actual digits of result */</span>", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#i\">i</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* trailing space padding */</span>", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#string\">string</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#end\">end</a>, const char *<a class=\"id\" href=\"#s\">s</a>, struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#spec\">spec</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if ((unsigned long)<a class=\"id\" href=\"#s\">s</a> &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = \"(null)\";", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strnlen\">strnlen</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#precision\">precision</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#LEFT\">LEFT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#buf\">buf</a>; ++<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#symbol_string\">symbol_string</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#end\">end</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#spec\">spec</a>, char <a class=\"id\" href=\"#ext\">ext</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#value\">value</a> = (unsigned long) <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KALLSYMS\">CONFIG_KALLSYMS</a>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#sym\">sym</a>[<a class=\"id\" href=\"#KSYM_SYMBOL_LEN\">KSYM_SYMBOL_LEN</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext\">ext</a> != 'f' && <a class=\"id\" href=\"#ext\">ext</a> != 's')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sprint_symbol\">sprint_symbol</a>(<a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kallsyms_lookup\">kallsyms_lookup</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#sym\">sym</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#spec\">spec</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> = 2 * sizeof(void *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SPECIAL\">SPECIAL</a> | <a class=\"id\" href=\"#SMALL\">SMALL</a> | <a class=\"id\" href=\"#ZEROPAD\">ZEROPAD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#base\">base</a> = 16;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#number\">number</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#spec\">spec</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#resource_string\">resource_string</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#end\">end</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#spec\">spec</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#IO_RSRC_PRINTK_SIZE\">IO_RSRC_PRINTK_SIZE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IO_RSRC_PRINTK_SIZE\">IO_RSRC_PRINTK_SIZE</a><span class=\"ts\"/>6", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#MEM_RSRC_PRINTK_SIZE\">MEM_RSRC_PRINTK_SIZE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEM_RSRC_PRINTK_SIZE\">MEM_RSRC_PRINTK_SIZE</a><span class=\"ts\"/>10", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#io_spec\">io_spec</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#base\">base</a> = 16,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#field_width\">field_width</a> = <a class=\"id\" href=\"#IO_RSRC_PRINTK_SIZE\">IO_RSRC_PRINTK_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#precision\">precision</a> = -1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#SPECIAL\">SPECIAL</a> | <a class=\"id\" href=\"#SMALL\">SMALL</a> | <a class=\"id\" href=\"#ZEROPAD\">ZEROPAD</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#mem_spec\">mem_spec</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#base\">base</a> = 16,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#field_width\">field_width</a> = <a class=\"id\" href=\"#MEM_RSRC_PRINTK_SIZE\">MEM_RSRC_PRINTK_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#precision\">precision</a> = -1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#SPECIAL\">SPECIAL</a> | <a class=\"id\" href=\"#SMALL\">SMALL</a> | <a class=\"id\" href=\"#ZEROPAD\">ZEROPAD</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#bus_spec\">bus_spec</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#base\">base</a> = 16,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#field_width\">field_width</a> = 2,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#precision\">precision</a> = -1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#SMALL\">SMALL</a> | <a class=\"id\" href=\"#ZEROPAD\">ZEROPAD</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#dec_spec\">dec_spec</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#base\">base</a> = 10,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#precision\">precision</a> = -1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = 0,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#str_spec\">str_spec</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#field_width\">field_width</a> = -1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#precision\">precision</a> = 10,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#LEFT\">LEFT</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#flag_spec\">flag_spec</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#base\">base</a> = 16,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#precision\">precision</a> = -1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#SPECIAL\">SPECIAL</a> | <a class=\"id\" href=\"#SMALL\">SMALL</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 32-bit res (sizeof==4): 10 chars in dec, 10 in hex (\"0x\" + 8)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 64-bit res (sizeof==8): 20 chars in dec, 18 in hex (\"0x\" + 16) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RSRC_BUF_SIZE\">RSRC_BUF_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>((2 * sizeof(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a>)) + 4)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_BUF_SIZE\">FLAG_BUF_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>(2 * sizeof(<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECODED_BUF_SIZE\">DECODED_BUF_SIZE</a><span class=\"ts\"/>sizeof(\"[mem - 64bit pref window disabled]\")", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RAW_BUF_SIZE\">RAW_BUF_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>sizeof(\"[mem - flags 0x]\")", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#sym\">sym</a>[<a class=\"id\" href=\"#max\">max</a>(2*<a class=\"id\" href=\"#RSRC_BUF_SIZE\">RSRC_BUF_SIZE</a> + <a class=\"id\" href=\"#DECODED_BUF_SIZE\">DECODED_BUF_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     2*<a class=\"id\" href=\"#RSRC_BUF_SIZE\">RSRC_BUF_SIZE</a> + <a class=\"id\" href=\"#FLAG_BUF_SIZE\">FLAG_BUF_SIZE</a> + <a class=\"id\" href=\"#RAW_BUF_SIZE\">RAW_BUF_SIZE</a>)];", 
"", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#sym\">sym</a>, *<a class=\"id\" href=\"#pend\">pend</a> = <a class=\"id\" href=\"#sym\">sym</a> + sizeof(<a class=\"id\" href=\"#sym\">sym</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#decode\">decode</a> = (<a class=\"id\" href=\"#fmt\">fmt</a>[0] == 'R') ? 1 : 0;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> *<a class=\"id\" href=\"#specp\">specp</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = '[';", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, \"io  \", <a class=\"id\" href=\"#str_spec\">str_spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#specp\">specp</a> = &amp;<a class=\"id\" href=\"#io_spec\">io_spec</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, \"mem \", <a class=\"id\" href=\"#str_spec\">str_spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#specp\">specp</a> = &amp;<a class=\"id\" href=\"#mem_spec\">mem_spec</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_IRQ\">IORESOURCE_IRQ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, \"irq \", <a class=\"id\" href=\"#str_spec\">str_spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#specp\">specp</a> = &amp;<a class=\"id\" href=\"#dec_spec\">dec_spec</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_DMA\">IORESOURCE_DMA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, \"dma \", <a class=\"id\" href=\"#str_spec\">str_spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#specp\">specp</a> = &amp;<a class=\"id\" href=\"#dec_spec\">dec_spec</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_BUS\">IORESOURCE_BUS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, \"bus \", <a class=\"id\" href=\"#str_spec\">str_spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#specp\">specp</a> = &amp;<a class=\"id\" href=\"#bus_spec\">bus_spec</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, \"??? \", <a class=\"id\" href=\"#str_spec\">str_spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#specp\">specp</a> = &amp;<a class=\"id\" href=\"#mem_spec\">mem_spec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#decode\">decode</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#number\">number</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a>, *<a class=\"id\" href=\"#specp\">specp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> != <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = '-';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#number\">number</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a>, *<a class=\"id\" href=\"#specp\">specp</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#decode\">decode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM_64\">IORESOURCE_MEM_64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, \" 64bit\", <a class=\"id\" href=\"#str_spec\">str_spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, \" pref\", <a class=\"id\" href=\"#str_spec\">str_spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_WINDOW\">IORESOURCE_WINDOW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, \" window\", <a class=\"id\" href=\"#str_spec\">str_spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_DISABLED\">IORESOURCE_DISABLED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, \" disabled\", <a class=\"id\" href=\"#str_spec\">str_spec</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, \" flags \", <a class=\"id\" href=\"#str_spec\">str_spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#number\">number</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pend\">pend</a>, <a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#flag_spec\">flag_spec</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = ']';", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = '\\0';", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#spec\">spec</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#mac_address_string\">mac_address_string</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#spec\">spec</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#mac_addr\">mac_addr</a>[sizeof(\"xx:xx:xx:xx:xx:xx\")];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#mac_addr\">mac_addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#separator\">separator</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fmt\">fmt</a>[1] == 'F') {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FDDI canonical format */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#separator\">separator</a> = '-';", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#separator\">separator</a> = ':';", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 6; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fmt\">fmt</a>[0] == 'M' && <a class=\"id\" href=\"#i\">i</a> != 5)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = <a class=\"id\" href=\"#separator\">separator</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = '\\0';", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#mac_addr\">mac_addr</a>, <a class=\"id\" href=\"#spec\">spec</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#ip4_string\">ip4_string</a>(char *<a class=\"id\" href=\"#p\">p</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#leading_zeros\">leading_zeros</a> = (<a class=\"id\" href=\"#fmt\">fmt</a>[0] == 'i');", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#step\">step</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#fmt\">fmt</a>[2]) {", 
"<span class=\"ts\"/>case 'h':", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__BIG_ENDIAN\">__BIG_ENDIAN</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#step\">step</a> = 1;", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#step\">step</a> = -1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'l':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#step\">step</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'n':", 
"<span class=\"ts\"/>case 'b':", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#step\">step</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#temp\">temp</a>[3];<span class=\"ts\"/><span class=\"comment\">/* hold each IP quad in reverse order */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#digits\">digits</a> = <a class=\"id\" href=\"#put_dec_trunc\">put_dec_trunc</a>(<a class=\"id\" href=\"#temp\">temp</a>, <a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#index\">index</a>]) - <a class=\"id\" href=\"#temp\">temp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#leading_zeros\">leading_zeros</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#digits\">digits</a> &lt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = '0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#digits\">digits</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = '0';", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reverse the digits in the quad */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#digits\">digits</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = <a class=\"id\" href=\"#temp\">temp</a>[<a class=\"id\" href=\"#digits\">digits</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = '.';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> += <a class=\"id\" href=\"#step\">step</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = '\\0';", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#ip6_compressed_string\">ip6_compressed_string</a>(char *<a class=\"id\" href=\"#p\">p</a>, const char *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#range\">range</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#zerolength\">zerolength</a>[8];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#longest\">longest</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#colonpos\">colonpos</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#word\">word</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#hi\">hi</a>, <a class=\"id\" href=\"#lo\">lo</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#needcolon\">needcolon</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#useIPv4\">useIPv4</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> <a class=\"id\" href=\"#in6\">in6</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#in6\">in6</a>, <a class=\"id\" href=\"#addr\">addr</a>, sizeof(struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#useIPv4\">useIPv4</a> = <a class=\"id\" href=\"#ipv6_addr_v4mapped\">ipv6_addr_v4mapped</a>(&amp;<a class=\"id\" href=\"#in6\">in6</a>) || <a class=\"id\" href=\"#ipv6_addr_is_isatap\">ipv6_addr_is_isatap</a>(&amp;<a class=\"id\" href=\"#in6\">in6</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#zerolength\">zerolength</a>, 0, sizeof(<a class=\"id\" href=\"#zerolength\">zerolength</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#useIPv4\">useIPv4</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#range\">range</a> = 6;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#range\">range</a> = 8;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* find position of longest 0 run */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#range\">range</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#range\">range</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in6\">in6</a>.<a class=\"id\" href=\"#s6_addr16\">s6_addr16</a>[<a class=\"id\" href=\"#j\">j</a>] != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zerolength\">zerolength</a>[<a class=\"id\" href=\"#i\">i</a>]++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#range\">range</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zerolength\">zerolength</a>[<a class=\"id\" href=\"#i\">i</a>] &gt; <a class=\"id\" href=\"#longest\">longest</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#longest\">longest</a> = <a class=\"id\" href=\"#zerolength\">zerolength</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#colonpos\">colonpos</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* emit address */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#range\">range</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#colonpos\">colonpos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#needcolon\">needcolon</a> || <a class=\"id\" href=\"#i\">i</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = ':';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = ':';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needcolon\">needcolon</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#longest\">longest</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#needcolon\">needcolon</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = ':';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needcolon\">needcolon</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hex u16 without leading 0s */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#word\">word</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#in6\">in6</a>.<a class=\"id\" href=\"#s6_addr16\">s6_addr16</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hi\">hi</a> = <a class=\"id\" href=\"#word\">word</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lo\">lo</a> = <a class=\"id\" href=\"#word\">word</a> &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hi\">hi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hi\">hi</a> &gt; 0x0f)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = <a class=\"id\" href=\"#hex_asc_lo\">hex_asc_lo</a>(<a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#lo\">lo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#lo\">lo</a> &gt; 0x0f)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#lo\">lo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = <a class=\"id\" href=\"#hex_asc_lo\">hex_asc_lo</a>(<a class=\"id\" href=\"#lo\">lo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needcolon\">needcolon</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#useIPv4\">useIPv4</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#needcolon\">needcolon</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = ':';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#ip4_string\">ip4_string</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#in6\">in6</a>.<a class=\"id\" href=\"#s6_addr\">s6_addr</a>[12], \"I4\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = '\\0';", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#ip6_string\">ip6_string</a>(char *<a class=\"id\" href=\"#p\">p</a>, const char *<a class=\"id\" href=\"#addr\">addr</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 8; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#addr\">addr</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#addr\">addr</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fmt\">fmt</a>[0] == 'I' && <a class=\"id\" href=\"#i\">i</a> != 7)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = ':';", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = '\\0';", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#ip6_addr_string\">ip6_addr_string</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#end\">end</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#spec\">spec</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#ip6_addr\">ip6_addr</a>[sizeof(\"xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:255.255.255.255\")];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fmt\">fmt</a>[0] == 'I' && <a class=\"id\" href=\"#fmt\">fmt</a>[2] == 'c')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip6_compressed_string\">ip6_compressed_string</a>(<a class=\"id\" href=\"#ip6_addr\">ip6_addr</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip6_string\">ip6_string</a>(<a class=\"id\" href=\"#ip6_addr\">ip6_addr</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#ip6_addr\">ip6_addr</a>, <a class=\"id\" href=\"#spec\">spec</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#ip4_addr_string\">ip4_addr_string</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#end\">end</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#spec\">spec</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#ip4_addr\">ip4_addr</a>[sizeof(\"255.255.255.255\")];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip4_string\">ip4_string</a>(<a class=\"id\" href=\"#ip4_addr\">ip4_addr</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#ip4_addr\">ip4_addr</a>, <a class=\"id\" href=\"#spec\">spec</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#uuid_string\">uuid_string</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#end\">end</a>, const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#spec\">spec</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#uuid\">uuid</a>[sizeof(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#uuid\">uuid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>static const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#be\">be</a>[16] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};", 
"<span class=\"ts\"/>static const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#le\">le</a>[16] = {3,2,1,0,5,4,7,6,8,9,10,11,12,13,14,15};", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#be\">be</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#uc\">uc</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>switch (*(++<a class=\"id\" href=\"#fmt\">fmt</a>)) {", 
"<span class=\"ts\"/>case 'L':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uc\">uc</a> = <a class=\"id\" href=\"#true\">true</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall-through */</span>", 
"<span class=\"ts\"/>case 'l':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#le\">le</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'B':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uc\">uc</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 16; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#index\">index</a>[<a class=\"id\" href=\"#i\">i</a>]]);", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 3:", 
"<span class=\"ts\"/><span class=\"ts\"/>case 5:", 
"<span class=\"ts\"/><span class=\"ts\"/>case 7:", 
"<span class=\"ts\"/><span class=\"ts\"/>case 9:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = '-';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uc\">uc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#uuid\">uuid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#toupper\">toupper</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (*(++<a class=\"id\" href=\"#p\">p</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#uuid\">uuid</a>, <a class=\"id\" href=\"#spec\">spec</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Show a '%p' thing.  A kernel extension is that the '%p' is followed</span>", 
"<span class=\"comment\"> * by an extra set of alphanumeric characters that are extended format</span>", 
"<span class=\"comment\"> * specifiers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Right now we handle:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - 'F' For symbolic function descriptor pointers with offset</span>", 
"<span class=\"comment\"> * - 'f' For simple symbolic function names without offset</span>", 
"<span class=\"comment\"> * - 'S' For symbolic direct pointers with offset</span>", 
"<span class=\"comment\"> * - 's' For symbolic direct pointers without offset</span>", 
"<span class=\"comment\"> * - 'R' For decoded struct resource, e.g., [mem 0x0-0x1f 64bit pref]</span>", 
"<span class=\"comment\"> * - 'r' For raw struct resource, e.g., [mem 0x0-0x1f flags 0x201]</span>", 
"<span class=\"comment\"> * - 'M' For a 6-byte MAC address, it prints the address in the</span>", 
"<span class=\"comment\"> *       usual colon-separated hex notation</span>", 
"<span class=\"comment\"> * - 'm' For a 6-byte MAC address, it prints the hex address without colons</span>", 
"<span class=\"comment\"> * - 'MF' For a 6-byte MAC FDDI address, it prints the address</span>", 
"<span class=\"comment\"> *       with a dash-separated hex notation</span>", 
"<span class=\"comment\"> * - 'I' [46] for IPv4/IPv6 addresses printed in the usual way</span>", 
"<span class=\"comment\"> *       IPv4 uses dot-separated decimal without leading 0's (1.2.3.4)</span>", 
"<span class=\"comment\"> *       IPv6 uses colon separated network-order 16 bit hex with leading 0's</span>", 
"<span class=\"comment\"> * - 'i' [46] for 'raw' IPv4/IPv6 addresses</span>", 
"<span class=\"comment\"> *       IPv6 omits the colons (01020304...0f)</span>", 
"<span class=\"comment\"> *       IPv4 uses dot-separated decimal with leading 0's (010.123.045.006)</span>", 
"<span class=\"comment\"> * - '[Ii]4[hnbl]' IPv4 addresses in host, network, big or little endian order</span>", 
"<span class=\"comment\"> * - 'I6c' for IPv6 addresses printed as specified by</span>", 
"<span class=\"comment\"> *       http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-00</span>", 
"<span class=\"comment\"> * - 'U' For a 16 byte UUID/GUID, it prints the UUID/GUID in the form</span>", 
"<span class=\"comment\"> *       \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"</span>", 
"<span class=\"comment\"> *       Options for %pU are:</span>", 
"<span class=\"comment\"> *         b big endian lower case hex (default)</span>", 
"<span class=\"comment\"> *         B big endian UPPER case hex</span>", 
"<span class=\"comment\"> *         l little endian lower case hex</span>", 
"<span class=\"comment\"> *         L little endian UPPER case hex</span>", 
"<span class=\"comment\"> *           big endian output byte order is:</span>", 
"<span class=\"comment\"> *             [0][1][2][3]-[4][5]-[6][7]-[8][9]-[10][11][12][13][14][15]</span>", 
"<span class=\"comment\"> *           little endian output byte order is:</span>", 
"<span class=\"comment\"> *             [3][2][1][0]-[5][4]-[7][6]-[8][9]-[10][11][12][13][14][15]</span>", 
"<span class=\"comment\"> * - 'V' For a struct va_format which contains a format string * and va_list *,</span>", 
"<span class=\"comment\"> *       call vsnprintf(-&gt;format, *-&gt;va_list).</span>", 
"<span class=\"comment\"> *       Implements a \"recursive vsnprintf\".</span>", 
"<span class=\"comment\"> *       Do not use this feature without some mechanism to verify the</span>", 
"<span class=\"comment\"> *       correctness of the format string and va_list arguments.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: The difference between 'S' and 'F' is that on ia64 and ppc64</span>", 
"<span class=\"comment\"> * function pointers are really function descriptors, which contain a</span>", 
"<span class=\"comment\"> * pointer to the real address.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"char *<a class=\"id\" href=\"#pointer\">pointer</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#end\">end</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#spec\">spec</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, \"(null)\", <a class=\"id\" href=\"#spec\">spec</a>);", 
"", 
"<span class=\"ts\"/>switch (*<a class=\"id\" href=\"#fmt\">fmt</a>) {", 
"<span class=\"ts\"/>case 'F':", 
"<span class=\"ts\"/>case 'f':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#dereference_function_descriptor\">dereference_function_descriptor</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fallthrough */</span>", 
"<span class=\"ts\"/>case 'S':", 
"<span class=\"ts\"/>case 's':", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#symbol_string\">symbol_string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#spec\">spec</a>, *<a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/>case 'R':", 
"<span class=\"ts\"/>case 'r':", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#resource_string\">resource_string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#spec\">spec</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/>case 'M':<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Colon separated: 00:01:02:03:04:05 */</span>", 
"<span class=\"ts\"/>case 'm':<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Contiguous: 000102030405 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* [mM]F (FDDI, bit reversed) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mac_address_string\">mac_address_string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#spec\">spec</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/>case 'I':<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Formatted IP supported</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 4:<span class=\"ts\"/>1.2.3.4</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 6:<span class=\"ts\"/>0001:0203:...:0708</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 6c:<span class=\"ts\"/>1::708 or 1::1.2.3.4</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>case 'i':<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Contiguous:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 4:<span class=\"ts\"/>001.002.003.004</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 6:   000102...0f</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#fmt\">fmt</a>[1]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case '6':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ip6_addr_string\">ip6_addr_string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#spec\">spec</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>case '4':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ip4_addr_string\">ip4_addr_string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#spec\">spec</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'U':", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#uuid_string\">uuid_string</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#spec\">spec</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/>case 'V':", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       ((struct <a class=\"id\" href=\"#va_format\">va_format</a> *)<a class=\"id\" href=\"#ptr\">ptr</a>)-><a class=\"id\" href=\"#fmt\">fmt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       *(((struct <a class=\"id\" href=\"#va_format\">va_format</a> *)<a class=\"id\" href=\"#ptr\">ptr</a>)-><a class=\"id\" href=\"#va\">va</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SMALL\">SMALL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> = 2*sizeof(void *);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ZEROPAD\">ZEROPAD</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#base\">base</a> = 16;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#number\">number</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#end\">end</a>, (unsigned long) <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#spec\">spec</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper function to decode printf style format.</span>", 
"<span class=\"comment\"> * Each call decode a token from the format and return the</span>", 
"<span class=\"comment\"> * number of characters read (or likely the delta where it wants</span>", 
"<span class=\"comment\"> * to go on the next call).</span>", 
"<span class=\"comment\"> * The decoded token is returned through the parameters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 'h', 'l', or 'L' for integer fields</span>", 
"<span class=\"comment\"> * 'z' support added 23/7/1999 S.H.</span>", 
"<span class=\"comment\"> * 'z' changed to 'Z' --davidm 1/25/99</span>", 
"<span class=\"comment\"> * 't' added for ptrdiff_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @fmt: the format string</span>", 
"<span class=\"comment\"> * @type of the token returned</span>", 
"<span class=\"comment\"> * @flags: various flags such as +, -, # tokens..</span>", 
"<span class=\"comment\"> * @field_width: overwritten width</span>", 
"<span class=\"comment\"> * @base: base of the number (octal, hex, ...)</span>", 
"<span class=\"comment\"> * @precision: precision of a number</span>", 
"<span class=\"comment\"> * @qualifier: qualifier of a number (long, size_t, ...)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"int <a class=\"id\" href=\"#format_decode\">format_decode</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> *<a class=\"id\" href=\"#spec\">spec</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#fmt\">fmt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we finished early by reading the field width */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#FORMAT_TYPE_WIDTH\">FORMAT_TYPE_WIDTH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#field_width\">field_width</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#field_width\">field_width</a> = -<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#field_width\">field_width</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#LEFT\">LEFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_NONE\">FORMAT_TYPE_NONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#precision\">precision</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we finished early by reading the precision */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#FORMAT_TYPE_PRECISION\">FORMAT_TYPE_PRECISION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#precision\">precision</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#precision\">precision</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_NONE\">FORMAT_TYPE_NONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#qualifier\">qualifier</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* By default */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_NONE\">FORMAT_TYPE_NONE</a>;", 
"", 
"<span class=\"ts\"/>for (; *<a class=\"id\" href=\"#fmt\">fmt</a> ; ++<a class=\"id\" href=\"#fmt\">fmt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#fmt\">fmt</a> == '%')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return the current non-format string */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fmt\">fmt</a> != <a class=\"id\" href=\"#start\">start</a> || !*<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fmt\">fmt</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Process flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"", 
"<span class=\"ts\"/>while (1) { <span class=\"comment\">/* this also skips first '%' */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#fmt\">fmt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (*<a class=\"id\" href=\"#fmt\">fmt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case '-': <a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#LEFT\">LEFT</a>;    break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case '+': <a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PLUS\">PLUS</a>;    break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case ' ': <a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SPACE\">SPACE</a>;   break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case '#': <a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SPECIAL\">SPECIAL</a>; break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case '0': <a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ZEROPAD\">ZEROPAD</a>; break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:  <a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#found\">found</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* get field width */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#field_width\">field_width</a> = -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#fmt\">fmt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#field_width\">field_width</a> = <a class=\"id\" href=\"#skip_atoi\">skip_atoi</a>(&amp;<a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/>else if (*<a class=\"id\" href=\"#fmt\">fmt</a> == '*') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* it's the next argument */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_WIDTH\">FORMAT_TYPE_WIDTH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return ++<a class=\"id\" href=\"#fmt\">fmt</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#precision\">precision</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* get the precision */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#precision\">precision</a> = -1;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#fmt\">fmt</a> == '.') {", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#fmt\">fmt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#fmt\">fmt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#precision\">precision</a> = <a class=\"id\" href=\"#skip_atoi\">skip_atoi</a>(&amp;<a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#precision\">precision</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#precision\">precision</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (*<a class=\"id\" href=\"#fmt\">fmt</a> == '*') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* it's the next argument */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_PRECISION\">FORMAT_TYPE_PRECISION</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return ++<a class=\"id\" href=\"#fmt\">fmt</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#qualifier\">qualifier</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* get the conversion qualifier */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a> = -1;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#fmt\">fmt</a> == 'h' || <a class=\"id\" href=\"#TOLOWER\">TOLOWER</a>(*<a class=\"id\" href=\"#fmt\">fmt</a>) == 'l' ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#TOLOWER\">TOLOWER</a>(*<a class=\"id\" href=\"#fmt\">fmt</a>) == 'z' || *<a class=\"id\" href=\"#fmt\">fmt</a> == 't') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a> = *<a class=\"id\" href=\"#fmt\">fmt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a> == *<a class=\"id\" href=\"#fmt\">fmt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a> == 'l') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a> = 'L';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#fmt\">fmt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a> == 'h') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a> = 'H';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#fmt\">fmt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* default base */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#base\">base</a> = 10;", 
"<span class=\"ts\"/>switch (*<a class=\"id\" href=\"#fmt\">fmt</a>) {", 
"<span class=\"ts\"/>case 'c':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_CHAR\">FORMAT_TYPE_CHAR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return ++<a class=\"id\" href=\"#fmt\">fmt</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/>case 's':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_STR\">FORMAT_TYPE_STR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return ++<a class=\"id\" href=\"#fmt\">fmt</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/>case 'p':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_PTR\">FORMAT_TYPE_PTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fmt\">fmt</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip alnum */</span>", 
"", 
"<span class=\"ts\"/>case 'n':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_NRCHARS\">FORMAT_TYPE_NRCHARS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return ++<a class=\"id\" href=\"#fmt\">fmt</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/>case '%':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_PERCENT_CHAR\">FORMAT_TYPE_PERCENT_CHAR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return ++<a class=\"id\" href=\"#fmt\">fmt</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* integer number formats - set up the flags and \"break\" */</span>", 
"<span class=\"ts\"/>case 'o':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#base\">base</a> = 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 'x':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SMALL\">SMALL</a>;", 
"", 
"<span class=\"ts\"/>case 'X':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#base\">base</a> = 16;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 'd':", 
"<span class=\"ts\"/>case 'i':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SIGN\">SIGN</a>;", 
"<span class=\"ts\"/>case 'u':", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_INVALID\">FORMAT_TYPE_INVALID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fmt\">fmt</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a> == 'L')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_LONG_LONG\">FORMAT_TYPE_LONG_LONG</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a> == 'l') {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGN\">SIGN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_LONG\">FORMAT_TYPE_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_ULONG\">FORMAT_TYPE_ULONG</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#TOLOWER\">TOLOWER</a>(<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a>) == 'z') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_SIZE_T\">FORMAT_TYPE_SIZE_T</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a> == 't') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_PTRDIFF\">FORMAT_TYPE_PTRDIFF</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a> == 'H') {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGN\">SIGN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_BYTE\">FORMAT_TYPE_BYTE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_UBYTE\">FORMAT_TYPE_UBYTE</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#qualifier\">qualifier</a> == 'h') {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGN\">SIGN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_SHORT\">FORMAT_TYPE_SHORT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_USHORT\">FORMAT_TYPE_USHORT</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGN\">SIGN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_INT\">FORMAT_TYPE_INT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#FORMAT_TYPE_UINT\">FORMAT_TYPE_UINT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return ++<a class=\"id\" href=\"#fmt\">fmt</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vsnprintf - Format a string and place it in a buffer</span>", 
"<span class=\"comment\"> * @buf: The buffer to place the result into</span>", 
"<span class=\"comment\"> * @size: The size of the buffer, including the trailing null space</span>", 
"<span class=\"comment\"> * @fmt: The format string to use</span>", 
"<span class=\"comment\"> * @args: Arguments for the format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function follows C99 vsnprintf, but has some extensions:</span>", 
"<span class=\"comment\"> * %pS output the name of a text symbol with offset</span>", 
"<span class=\"comment\"> * %ps output the name of a text symbol without offset</span>", 
"<span class=\"comment\"> * %pF output the name of a function pointer with its offset</span>", 
"<span class=\"comment\"> * %pf output the name of a function pointer without its offset</span>", 
"<span class=\"comment\"> * %pR output the address range in a struct resource with decoded flags</span>", 
"<span class=\"comment\"> * %pr output the address range in a struct resource with raw flags</span>", 
"<span class=\"comment\"> * %pM output a 6-byte MAC address with colons</span>", 
"<span class=\"comment\"> * %pm output a 6-byte MAC address without colons</span>", 
"<span class=\"comment\"> * %pI4 print an IPv4 address without leading zeros</span>", 
"<span class=\"comment\"> * %pi4 print an IPv4 address with leading zeros</span>", 
"<span class=\"comment\"> * %pI6 print an IPv6 address with colons</span>", 
"<span class=\"comment\"> * %pi6 print an IPv6 address without colons</span>", 
"<span class=\"comment\"> * %pI6c print an IPv6 address as specified by</span>", 
"<span class=\"comment\"> *   http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-00</span>", 
"<span class=\"comment\"> * %pU[bBlL] print a UUID/GUID in big or little endian using lower or upper</span>", 
"<span class=\"comment\"> *   case.</span>", 
"<span class=\"comment\"> * %n is ignored</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value is the number of characters which would</span>", 
"<span class=\"comment\"> * be generated for the given input, excluding the trailing</span>", 
"<span class=\"comment\"> * '\\0', as per ISO C99. If you want to have the exact</span>", 
"<span class=\"comment\"> * number of characters written into @buf as return value</span>", 
"<span class=\"comment\"> * (not including the trailing '\\0'), use vscnprintf(). If the</span>", 
"<span class=\"comment\"> * return is greater than or equal to @size, the resulting</span>", 
"<span class=\"comment\"> * string is truncated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call this function if you are already dealing with a va_list.</span>", 
"<span class=\"comment\"> * You probably want snprintf() instead.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#str\">str</a>, *<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#spec\">spec</a> = {0};", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reject out-of-range values early.  Large positive sizes are</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   used for unknown buffer sizes. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>((int) <a class=\"id\" href=\"#size\">size</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure end is always &gt;= buf */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = ((void *)-1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#fmt\">fmt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#old_fmt\">old_fmt</a> = <a class=\"id\" href=\"#fmt\">fmt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#format_decode\">format_decode</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, &amp;<a class=\"id\" href=\"#spec\">spec</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a> += <a class=\"id\" href=\"#read\">read</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_NONE\">FORMAT_TYPE_NONE</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#old_fmt\">old_fmt</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += <a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_WIDTH\">FORMAT_TYPE_WIDTH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_PRECISION\">FORMAT_TYPE_PRECISION</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#precision\">precision</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_CHAR\">FORMAT_TYPE_CHAR</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#LEFT\">LEFT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> = ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = (unsigned char) <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> = ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_STR\">FORMAT_TYPE_STR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, char *), <a class=\"id\" href=\"#spec\">spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_PTR\">FORMAT_TYPE_PTR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#pointer\">pointer</a>(<a class=\"id\" href=\"#fmt\">fmt</a>+1, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#spec\">spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#isalnum\">isalnum</a>(*<a class=\"id\" href=\"#fmt\">fmt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_PERCENT_CHAR\">FORMAT_TYPE_PERCENT_CHAR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> = '%';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_INVALID\">FORMAT_TYPE_INVALID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> = '%';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_NRCHARS\">FORMAT_TYPE_NRCHARS</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#qualifier\">qualifier</a> = <a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#qualifier\">qualifier</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qualifier\">qualifier</a> == 'l') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long *<a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, long *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ip\">ip</a> = (<a class=\"id\" href=\"#str\">str</a> - <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#TOLOWER\">TOLOWER</a>(<a class=\"id\" href=\"#qualifier\">qualifier</a>) == 'z') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ip\">ip</a> = (<a class=\"id\" href=\"#str\">str</a> - <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ip\">ip</a> = (<a class=\"id\" href=\"#str\">str</a> - <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_LONG_LONG\">FORMAT_TYPE_LONG_LONG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, long long);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_ULONG\">FORMAT_TYPE_ULONG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, unsigned long);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_LONG\">FORMAT_TYPE_LONG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, long);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_SIZE_T\">FORMAT_TYPE_SIZE_T</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_PTRDIFF\">FORMAT_TYPE_PTRDIFF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#ptrdiff_t\">ptrdiff_t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_UBYTE\">FORMAT_TYPE_UBYTE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = (unsigned char) <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_BYTE\">FORMAT_TYPE_BYTE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = (signed char) <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_USHORT\">FORMAT_TYPE_USHORT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = (unsigned short) <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_SHORT\">FORMAT_TYPE_SHORT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = (short) <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_INT\">FORMAT_TYPE_INT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = (int) <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, unsigned int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#number\">number</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#spec\">spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a>[-1] = '\\0';", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the trailing null byte doesn't count towards the total */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#str\">str</a>-<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vscnprintf - Format a string and place it in a buffer</span>", 
"<span class=\"comment\"> * @buf: The buffer to place the result into</span>", 
"<span class=\"comment\"> * @size: The size of the buffer, including the trailing null space</span>", 
"<span class=\"comment\"> * @fmt: The format string to use</span>", 
"<span class=\"comment\"> * @args: Arguments for the format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value is the number of characters which have been written into</span>", 
"<span class=\"comment\"> * the @buf not including the trailing '\\0'. If @size is &lt;= 0 the function</span>", 
"<span class=\"comment\"> * returns 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call this function if you are already dealing with a va_list.</span>", 
"<span class=\"comment\"> * You probably want scnprintf() instead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See the vsnprintf() documentation for format string extensions over C99.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vscnprintf\">vscnprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#size\">size</a>) ? (<a class=\"id\" href=\"#size\">size</a> - 1) : <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vscnprintf\">vscnprintf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * snprintf - Format a string and place it in a buffer</span>", 
"<span class=\"comment\"> * @buf: The buffer to place the result into</span>", 
"<span class=\"comment\"> * @size: The size of the buffer, including the trailing null space</span>", 
"<span class=\"comment\"> * @fmt: The format string to use</span>", 
"<span class=\"comment\"> * @...: Arguments for the format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value is the number of characters which would be</span>", 
"<span class=\"comment\"> * generated for the given input, excluding the trailing null,</span>", 
"<span class=\"comment\"> * as per ISO C99.  If the return is greater than or equal to</span>", 
"<span class=\"comment\"> * @size, the resulting string is truncated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See the vsnprintf() documentation for format string extensions over C99.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#snprintf\">snprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#snprintf\">snprintf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scnprintf - Format a string and place it in a buffer</span>", 
"<span class=\"comment\"> * @buf: The buffer to place the result into</span>", 
"<span class=\"comment\"> * @size: The size of the buffer, including the trailing null space</span>", 
"<span class=\"comment\"> * @fmt: The format string to use</span>", 
"<span class=\"comment\"> * @...: Arguments for the format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value is the number of characters written into @buf not including</span>", 
"<span class=\"comment\"> * the trailing '\\0'. If @size is &lt;= 0 the function returns 0.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#size\">size</a>) ? (<a class=\"id\" href=\"#size\">size</a> - 1) : <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scnprintf\">scnprintf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vsprintf - Format a string and place it in a buffer</span>", 
"<span class=\"comment\"> * @buf: The buffer to place the result into</span>", 
"<span class=\"comment\"> * @fmt: The format string to use</span>", 
"<span class=\"comment\"> * @args: Arguments for the format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns the number of characters written</span>", 
"<span class=\"comment\"> * into @buf. Use vsnprintf() or vscnprintf() in order to avoid</span>", 
"<span class=\"comment\"> * buffer overflows.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call this function if you are already dealing with a va_list.</span>", 
"<span class=\"comment\"> * You probably want sprintf() instead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See the vsnprintf() documentation for format string extensions over C99.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vsprintf\">vsprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vsprintf\">vsprintf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sprintf - Format a string and place it in a buffer</span>", 
"<span class=\"comment\"> * @buf: The buffer to place the result into</span>", 
"<span class=\"comment\"> * @fmt: The format string to use</span>", 
"<span class=\"comment\"> * @...: Arguments for the format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns the number of characters written</span>", 
"<span class=\"comment\"> * into @buf. Use snprintf() or scnprintf() in order to avoid</span>", 
"<span class=\"comment\"> * buffer overflows.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See the vsnprintf() documentation for format string extensions over C99.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sprintf\">sprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sprintf\">sprintf</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BINARY_PRINTF\">CONFIG_BINARY_PRINTF</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bprintf service:</span>", 
"<span class=\"comment\"> * vbin_printf() - VA arguments to binary data</span>", 
"<span class=\"comment\"> * bstr_printf() - Binary data to text string</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vbin_printf - Parse a format string and place args' binary value in a buffer</span>", 
"<span class=\"comment\"> * @bin_buf: The buffer to place args' binary value</span>", 
"<span class=\"comment\"> * @size: The size of the buffer(by words(32bits), not characters)</span>", 
"<span class=\"comment\"> * @fmt: The format string to use</span>", 
"<span class=\"comment\"> * @args: Arguments for the format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The format follows C99 vsnprintf, except %n is ignored, and its argument</span>", 
"<span class=\"comment\"> * is skiped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value is the number of words(32bits) which would be generated for</span>", 
"<span class=\"comment\"> * the given input.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE:</span>", 
"<span class=\"comment\"> * If the return value is greater than @size, the resulting bin_buf is NOT</span>", 
"<span class=\"comment\"> * valid for bstr_printf().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vbin_printf\">vbin_printf</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#bin_buf\">bin_buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#spec\">spec</a> = {0};", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#str\">str</a>, *<a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = (char *)<a class=\"id\" href=\"#bin_buf\">bin_buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = (char *)(<a class=\"id\" href=\"#bin_buf\">bin_buf</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#save_arg\">save_arg</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#type\">type</a>) == 8) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#value\">value</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#PTR_ALIGN\">PTR_ALIGN</a>(<a class=\"id\" href=\"#str\">str</a>, sizeof(<a class=\"id\" href=\"#u32\">u32</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, unsigned long long);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> + sizeof(<a class=\"id\" href=\"#type\">type</a>) <= <a class=\"id\" href=\"#end\">end</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#str\">str</a> = *(<a class=\"id\" href=\"#u32\">u32</a> *)&amp;<a class=\"id\" href=\"#value\">value</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#u32\">u32</a> *)(<a class=\"id\" href=\"#str\">str</a> + 4) = *((<a class=\"id\" href=\"#u32\">u32</a> *)&amp;<a class=\"id\" href=\"#value\">value</a> + 1);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#value\">value</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#PTR_ALIGN\">PTR_ALIGN</a>(<a class=\"id\" href=\"#str\">str</a>, sizeof(<a class=\"id\" href=\"#type\">type</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> + sizeof(<a class=\"id\" href=\"#type\">type</a>) <= <a class=\"id\" href=\"#end\">end</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#type\">type</a>) *)<a class=\"id\" href=\"#str\">str</a> = (<a class=\"id\" href=\"#type\">type</a>)<a class=\"id\" href=\"#value\">value</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += sizeof(<a class=\"id\" href=\"#type\">type</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#fmt\">fmt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#format_decode\">format_decode</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, &amp;<a class=\"id\" href=\"#spec\">spec</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a> += <a class=\"id\" href=\"#read\">read</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_NONE\">FORMAT_TYPE_NONE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_INVALID\">FORMAT_TYPE_INVALID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_PERCENT_CHAR\">FORMAT_TYPE_PERCENT_CHAR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_WIDTH\">FORMAT_TYPE_WIDTH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_PRECISION\">FORMAT_TYPE_PRECISION</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_arg\">save_arg</a>(int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_CHAR\">FORMAT_TYPE_CHAR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_arg\">save_arg</a>(char);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_STR\">FORMAT_TYPE_STR</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#save_str\">save_str</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, char *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((unsigned long)<a class=\"id\" href=\"#save_str\">save_str</a> &gt; (unsigned long)-<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>|| (unsigned long)<a class=\"id\" href=\"#save_str\">save_str</a> &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_str\">save_str</a> = \"(null)\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#save_str\">save_str</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> + <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#save_str\">save_str</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_PTR\">FORMAT_TYPE_PTR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_arg\">save_arg</a>(void *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip all alphanumeric pointer suffixes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#isalnum\">isalnum</a>(*<a class=\"id\" href=\"#fmt\">fmt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_NRCHARS\">FORMAT_TYPE_NRCHARS</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip %n 's argument */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#qualifier\">qualifier</a> = <a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#qualifier\">qualifier</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#skip_arg\">skip_arg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qualifier\">qualifier</a> == 'l')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip_arg\">skip_arg</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, long *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#TOLOWER\">TOLOWER</a>(<a class=\"id\" href=\"#qualifier\">qualifier</a>) == 'z')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip_arg\">skip_arg</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip_arg\">skip_arg</a> = <a class=\"id\" href=\"#va_arg\">va_arg</a>(<a class=\"id\" href=\"#args\">args</a>, int *);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#type\">type</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_LONG_LONG\">FORMAT_TYPE_LONG_LONG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_arg\">save_arg</a>(long long);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_ULONG\">FORMAT_TYPE_ULONG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_LONG\">FORMAT_TYPE_LONG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_arg\">save_arg</a>(unsigned long);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_SIZE_T\">FORMAT_TYPE_SIZE_T</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_arg\">save_arg</a>(<a class=\"id\" href=\"#size_t\">size_t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_PTRDIFF\">FORMAT_TYPE_PTRDIFF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_arg\">save_arg</a>(<a class=\"id\" href=\"#ptrdiff_t\">ptrdiff_t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_UBYTE\">FORMAT_TYPE_UBYTE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_BYTE\">FORMAT_TYPE_BYTE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_arg\">save_arg</a>(char);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_USHORT\">FORMAT_TYPE_USHORT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_SHORT\">FORMAT_TYPE_SHORT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_arg\">save_arg</a>(short);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_arg\">save_arg</a>(int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u32\">u32</a> *)(<a class=\"id\" href=\"#PTR_ALIGN\">PTR_ALIGN</a>(<a class=\"id\" href=\"#str\">str</a>, sizeof(<a class=\"id\" href=\"#u32\">u32</a>))) - <a class=\"id\" href=\"#bin_buf\">bin_buf</a>;", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#save_arg\">save_arg</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#vbin_printf\">vbin_printf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bstr_printf - Format a string from binary arguments and place it in a buffer</span>", 
"<span class=\"comment\"> * @buf: The buffer to place the result into</span>", 
"<span class=\"comment\"> * @size: The size of the buffer, including the trailing null space</span>", 
"<span class=\"comment\"> * @fmt: The format string to use</span>", 
"<span class=\"comment\"> * @bin_buf: Binary arguments for the format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function like C99 vsnprintf, but the difference is that vsnprintf gets</span>", 
"<span class=\"comment\"> * arguments from stack, and bstr_printf gets arguments from @bin_buf which is</span>", 
"<span class=\"comment\"> * a binary buffer that generated by vbin_printf.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The format follows C99 vsnprintf, but has some extensions:</span>", 
"<span class=\"comment\"> *  see vsnprintf comment for details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value is the number of characters which would</span>", 
"<span class=\"comment\"> * be generated for the given input, excluding the trailing</span>", 
"<span class=\"comment\"> * '\\0', as per ISO C99. If you want to have the exact</span>", 
"<span class=\"comment\"> * number of characters written into @buf as return value</span>", 
"<span class=\"comment\"> * (not including the trailing '\\0'), use vscnprintf(). If the</span>", 
"<span class=\"comment\"> * return is greater than or equal to @size, the resulting</span>", 
"<span class=\"comment\"> * string is truncated.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bstr_printf\">bstr_printf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, const <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#bin_buf\">bin_buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#printf_spec\">printf_spec</a> <a class=\"id\" href=\"#spec\">spec</a> = {0};", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#str\">str</a>, *<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#args\">args</a> = (const char *)<a class=\"id\" href=\"#bin_buf\">bin_buf</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>((int) <a class=\"id\" href=\"#size\">size</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_arg\">get_arg</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#type\">type</a>) <a class=\"id\" href=\"#value\">value</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#type\">type</a>) == 8) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a> = <a class=\"id\" href=\"#PTR_ALIGN\">PTR_ALIGN</a>(<a class=\"id\" href=\"#args\">args</a>, sizeof(<a class=\"id\" href=\"#u32\">u32</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#u32\">u32</a> *)&amp;<a class=\"id\" href=\"#value\">value</a> = *(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#args\">args</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>*((<a class=\"id\" href=\"#u32\">u32</a> *)&amp;<a class=\"id\" href=\"#value\">value</a> + 1) = *(<a class=\"id\" href=\"#u32\">u32</a> *)(<a class=\"id\" href=\"#args\">args</a> + 4);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a> = <a class=\"id\" href=\"#PTR_ALIGN\">PTR_ALIGN</a>(<a class=\"id\" href=\"#args\">args</a>, sizeof(<a class=\"id\" href=\"#type\">type</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = *(<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#type\">type</a>) *)<a class=\"id\" href=\"#args\">args</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a> += sizeof(<a class=\"id\" href=\"#type\">type</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure end is always &gt;= buf */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = ((void *)-1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#fmt\">fmt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#old_fmt\">old_fmt</a> = <a class=\"id\" href=\"#fmt\">fmt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#format_decode\">format_decode</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, &amp;<a class=\"id\" href=\"#spec\">spec</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a> += <a class=\"id\" href=\"#read\">read</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_NONE\">FORMAT_TYPE_NONE</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#old_fmt\">old_fmt</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += <a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_WIDTH\">FORMAT_TYPE_WIDTH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> = <a class=\"id\" href=\"#get_arg\">get_arg</a>(int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_PRECISION\">FORMAT_TYPE_PRECISION</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#precision\">precision</a> = <a class=\"id\" href=\"#get_arg\">get_arg</a>(int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_CHAR\">FORMAT_TYPE_CHAR</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#LEFT\">LEFT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> = ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = (unsigned char) <a class=\"id\" href=\"#get_arg\">get_arg</a>(char);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#field_width\">field_width</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> = ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_STR\">FORMAT_TYPE_STR</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#str_arg\">str_arg</a> = <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#str_arg\">str_arg</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#string\">string</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#end\">end</a>, (char *)<a class=\"id\" href=\"#str_arg\">str_arg</a>, <a class=\"id\" href=\"#spec\">spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_PTR\">FORMAT_TYPE_PTR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#pointer\">pointer</a>(<a class=\"id\" href=\"#fmt\">fmt</a>+1, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#get_arg\">get_arg</a>(void *), <a class=\"id\" href=\"#spec\">spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#isalnum\">isalnum</a>(*<a class=\"id\" href=\"#fmt\">fmt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_PERCENT_CHAR\">FORMAT_TYPE_PERCENT_CHAR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_INVALID\">FORMAT_TYPE_INVALID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> = '%';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_NRCHARS\">FORMAT_TYPE_NRCHARS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#num\">num</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#spec\">spec</a>.<a class=\"id\" href=\"#type\">type</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_LONG_LONG\">FORMAT_TYPE_LONG_LONG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#get_arg\">get_arg</a>(long long);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_ULONG\">FORMAT_TYPE_ULONG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_LONG\">FORMAT_TYPE_LONG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#get_arg\">get_arg</a>(unsigned long);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_SIZE_T\">FORMAT_TYPE_SIZE_T</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#get_arg\">get_arg</a>(<a class=\"id\" href=\"#size_t\">size_t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_PTRDIFF\">FORMAT_TYPE_PTRDIFF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#get_arg\">get_arg</a>(<a class=\"id\" href=\"#ptrdiff_t\">ptrdiff_t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_UBYTE\">FORMAT_TYPE_UBYTE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#get_arg\">get_arg</a>(unsigned char);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_BYTE\">FORMAT_TYPE_BYTE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#get_arg\">get_arg</a>(signed char);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_USHORT\">FORMAT_TYPE_USHORT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#get_arg\">get_arg</a>(unsigned short);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_SHORT\">FORMAT_TYPE_SHORT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#get_arg\">get_arg</a>(short);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FORMAT_TYPE_UINT\">FORMAT_TYPE_UINT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#get_arg\">get_arg</a>(unsigned int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#get_arg\">get_arg</a>(int);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#number\">number</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#spec\">spec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} <span class=\"comment\">/* default: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} <span class=\"comment\">/* switch(spec.type) */</span>", 
"<span class=\"ts\"/>} <span class=\"comment\">/* while(*fmt) */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a>[-1] = '\\0';", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#get_arg\">get_arg</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the trailing null byte doesn't count towards the total */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#str\">str</a> - <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#bstr_printf\">bstr_printf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bprintf - Parse a format string and place args' binary value in a buffer</span>", 
"<span class=\"comment\"> * @bin_buf: The buffer to place args' binary value</span>", 
"<span class=\"comment\"> * @size: The size of the buffer(by words(32bits), not characters)</span>", 
"<span class=\"comment\"> * @fmt: The format string to use</span>", 
"<span class=\"comment\"> * @...: Arguments for the format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns the number of words(u32) written</span>", 
"<span class=\"comment\"> * into @bin_buf.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bprintf\">bprintf</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#bin_buf\">bin_buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vbin_printf\">vbin_printf</a>(<a class=\"id\" href=\"#bin_buf\">bin_buf</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#bprintf\">bprintf</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_BINARY_PRINTF */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vsscanf - Unformat a buffer into a list of arguments</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/>input buffer</span>", 
"<span class=\"comment\"> * @fmt:<span class=\"ts\"/>format of buffer</span>", 
"<span class=\"comment\"> * @args:<span class=\"ts\"/>arguments</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#vsscanf\">vsscanf</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#digit\">digit</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#qualifier\">qualifier</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s16\">s16</a> <a class=\"id\" href=\"#field_width\">field_width</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_sign\">is_sign</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#fmt\">fmt</a> && *<a class=\"id\" href=\"#str\">str</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip any white space in format */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* white space in format matchs any amount of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * white space, including none, in the input.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#isspace\">isspace</a>(*<a class=\"id\" href=\"#fmt\">fmt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a> = <a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>(++<a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#skip_spaces\">skip_spaces</a>(<a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* anything that is not a conversion must match exactly */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#fmt\">fmt</a> != '%' && *<a class=\"id\" href=\"#fmt\">fmt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#fmt\">fmt</a>++ != *<a class=\"id\" href=\"#str\">str</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#fmt\">fmt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip this conversion.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * advance both strings to next white space</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#fmt\">fmt</a> == '*') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#isspace\">isspace</a>(*<a class=\"id\" href=\"#fmt\">fmt</a>) && *<a class=\"id\" href=\"#fmt\">fmt</a> != '%' && *<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#isspace\">isspace</a>(*<a class=\"id\" href=\"#str\">str</a>) && *<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
];
xr_frag_insert('l/ff/a18b946c9a5426b3c75067a46bf6ed9c849a17.xr', __xr_tmp);
