var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008 Red Hat, Inc., Eric Paris &lt;eparis@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2, or (at your option)</span>", 
"<span class=\"comment\"> *  any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; see the file COPYING.  If not, write to</span>", 
"<span class=\"comment\"> *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* for inode_lock */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify_backend\">fsnotify_backend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"fsnotify.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Recalculate the mask of events relevant to a given inode locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#fsnotify_recalc_inode_mask_locked\">fsnotify_recalc_inode_mask_locked</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#new_mask\">new_mask</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fsnotify_marks\">i_fsnotify_marks</a>, <a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#i_list\">i_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_mask\">new_mask</a> |= <a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fsnotify_mask\">i_fsnotify_mask</a> = <a class=\"id\" href=\"#new_mask\">new_mask</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Recalculate the inode-&gt;i_fsnotify_mask, or the mask of all FS_* event types</span>", 
"<span class=\"comment\"> * any notifier is interested in hearing for this inode.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_recalc_inode_mask\">fsnotify_recalc_inode_mask</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_recalc_inode_mask_locked\">fsnotify_recalc_inode_mask_locked</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__fsnotify_update_child_dentry_flags\">__fsnotify_update_child_dentry_flags</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#fsnotify_destroy_inode_mark\">fsnotify_destroy_inode_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#mark_lock\">mark_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_init_rcu\">hlist_del_init_rcu</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this mark is now off the inode-&gt;i_fsnotify_marks list and we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hold the inode-&gt;i_lock, so this is the perfect time to update the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inode-&gt;i_fsnotify_mask</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_recalc_inode_mask_locked\">fsnotify_recalc_inode_mask_locked</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Given an inode, destroy all of the marks associated with that inode.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_clear_marks_by_inode\">fsnotify_clear_marks_by_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>, *<a class=\"id\" href=\"#lmark\">lmark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#free_list\">free_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fsnotify_marks\">i_fsnotify_marks</a>, <a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#i_list\">i_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#free_i_list\">free_i_list</a>, &amp;<a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_init_rcu\">hlist_del_init_rcu</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_get_mark\">fsnotify_get_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#lmark\">lmark</a>, &amp;<a class=\"id\" href=\"#free_list\">free_list</a>, <a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#free_i_list\">free_i_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Given a group clear all of the inode marks associated with that group.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_clear_inode_marks_by_group\">fsnotify_clear_inode_marks_by_group</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_clear_marks_by_group_flags\">fsnotify_clear_marks_by_group_flags</a>(<a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_INODE\">FSNOTIFY_MARK_FLAG_INODE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * given a group and inode, find the mark associated with that combination.</span>", 
"<span class=\"comment\"> * if found take a reference to that mark and return it, else return NULL</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#fsnotify_find_inode_mark_locked\">fsnotify_find_inode_mark_locked</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fsnotify_marks\">i_fsnotify_marks</a>, <a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#i_list\">i_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#group\">group</a> == <a class=\"id\" href=\"#group\">group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_get_mark\">fsnotify_get_mark</a>(<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * given a group and inode, find the mark associated with that combination.</span>", 
"<span class=\"comment\"> * if found take a reference to that mark and return it, else return NULL</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#fsnotify_find_inode_mark\">fsnotify_find_inode_mark</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a> = <a class=\"id\" href=\"#fsnotify_find_inode_mark_locked\">fsnotify_find_inode_mark_locked</a>(<a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mark\">mark</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If we are setting a mark mask on an inode mark we should pin the inode</span>", 
"<span class=\"comment\"> * in memory.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_set_inode_mark_mask_locked\">fsnotify_set_inode_mark_mask_locked</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a> &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_OBJECT_PINNED\">FSNOTIFY_MARK_FLAG_OBJECT_PINNED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_OBJECT_PINNED\">FSNOTIFY_MARK_FLAG_OBJECT_PINNED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#igrab\">igrab</a>(<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we shouldn't be able to get here if the inode wasn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * already safely held in memory.  But bug in case it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ever is wrong.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attach an initialized mark to a given inode.</span>", 
"<span class=\"comment\"> * These marks may be used for the fsnotify backend to determine which</span>", 
"<span class=\"comment\"> * event types should be delivered to which group and for which inodes.  These</span>", 
"<span class=\"comment\"> * marks are ordered according to the group's location in memory.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fsnotify_add_inode_mark\">fsnotify_add_inode_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#allow_dups\">allow_dups</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#lmark\">lmark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FSNOTIFY_MARK_FLAG_INODE\">FSNOTIFY_MARK_FLAG_INODE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#mark_lock\">mark_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* is mark the first mark? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hlist_empty\">hlist_empty</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fsnotify_marks\">i_fsnotify_marks</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fsnotify_marks\">i_fsnotify_marks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* should mark be in the middle of the current list? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#lmark\">lmark</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fsnotify_marks\">i_fsnotify_marks</a>, <a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#i_list\">i_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#lmark\">lmark</a>-><a class=\"id\" href=\"#group\">group</a> == <a class=\"id\" href=\"#group\">group</a>) && !<a class=\"id\" href=\"#allow_dups\">allow_dups</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#lmark\">lmark</a>-><a class=\"id\" href=\"#group\">group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_before_rcu\">hlist_add_before_rcu</a>(&amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#lmark\">lmark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#last\">last</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* mark should be the last entry.  last is the current last entry */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_after_rcu\">hlist_add_after_rcu</a>(<a class=\"id\" href=\"#last\">last</a>, &amp;<a class=\"id\" href=\"#mark\">mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_recalc_inode_mask_locked\">fsnotify_recalc_inode_mask_locked</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * fsnotify_unmount_inodes - an sb is unmounting.  handle any watched inodes.</span>", 
"<span class=\"comment\"> * @list: list of inodes being unmounted (sb-&gt;s_inodes)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with inode_lock held, protecting the unmounting super block's list</span>", 
"<span class=\"comment\"> * of inodes, and with iprune_mutex held, keeping shrink_icache_memory() at bay.</span>", 
"<span class=\"comment\"> * We temporarily drop inode_lock, however, and CAN block.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_unmount_inodes\">fsnotify_unmount_inodes</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, *<a class=\"id\" href=\"#next_i\">next_i</a>, *<a class=\"id\" href=\"#need_iput\">need_iput</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#next_i\">next_i</a>, <a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#i_sb_list\">i_sb_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#need_iput_tmp\">need_iput_tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We cannot __iget() an inode in state I_FREEING,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * I_WILL_FREE, or I_NEW which is fine because by that point</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the inode cannot have any associated watches.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>|<a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>|<a class=\"id\" href=\"#I_NEW\">I_NEW</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If i_count is zero, the inode cannot have any watches and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * doing an __iget/iput with MS_ACTIVE clear would actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * evict all inodes with zero i_count from icache which is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unnecessarily violent and may in fact be illegal to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_iput_tmp\">need_iput_tmp</a> = <a class=\"id\" href=\"#need_iput\">need_iput</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_iput\">need_iput</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* In case fsnotify_inode_delete() drops a reference. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a> != <a class=\"id\" href=\"#need_iput_tmp\">need_iput_tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_iput_tmp\">need_iput_tmp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* In case the dropping of a reference would nuke next_i. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((&amp;<a class=\"id\" href=\"#next_i\">next_i</a>-><a class=\"id\" href=\"#i_sb_list\">i_sb_list</a> != <a class=\"id\" href=\"#list\">list</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#next_i\">next_i</a>-><a class=\"id\" href=\"#i_count\">i_count</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#next_i\">next_i</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_FREEING\">I_FREEING</a> | <a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#next_i\">next_i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_iput\">need_iput</a> = <a class=\"id\" href=\"#next_i\">next_i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can safely drop inode_lock here because we hold</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * references on both inode and next_i.  Also no new inodes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will be added since the umount has begun.  Finally,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * iprune_mutex keeps shrink_icache_memory() away.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_iput_tmp\">need_iput_tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#need_iput_tmp\">need_iput_tmp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for each watch, send FS_UNMOUNT and then remove it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify\">fsnotify</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#FS_UNMOUNT\">FS_UNMOUNT</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#FSNOTIFY_EVENT_INODE\">FSNOTIFY_EVENT_INODE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_inode_delete\">fsnotify_inode_delete</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/ff/b266ad6e80bca7096ac9dfe70e022ec3da4d0d.xr', __xr_tmp);
