var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/include/asm/dma.h: Defines for using and allocating dma channels.</span>", 
"<span class=\"comment\"> * Written by Hennus Bergman, 1992.</span>", 
"<span class=\"comment\"> * High DMA channel support &amp; info by Hannu Savolainen</span>", 
"<span class=\"comment\"> * and John Boyd, Nov. 1992.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_DMA_H\">_ASM_X86_DMA_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_DMA_H\">_ASM_X86_DMA_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"comment\">/* And spinlocks */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* need byte IO */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#HAVE_REALLY_SLOW_DMA_CONTROLLER\">HAVE_REALLY_SLOW_DMA_CONTROLLER</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dma_outb\">dma_outb</a><span class=\"ts\"/><a class=\"id\" href=\"#outb_p\">outb_p</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dma_outb\">dma_outb</a><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dma_inb\">dma_inb</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inb\">inb</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTES about DMA transfers:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  controller 1: channels 0-3, byte operations, ports 00-1F</span>", 
"<span class=\"comment\"> *  controller 2: channels 4-7, word operations, ports C0-DF</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - ALL registers are 8 bits only, regardless of transfer size</span>", 
"<span class=\"comment\"> *  - channel 4 is not used - cascades 1 into 2.</span>", 
"<span class=\"comment\"> *  - channels 0-3 are byte - addresses/counts are for physical bytes</span>", 
"<span class=\"comment\"> *  - channels 5-7 are word - addresses/counts are for physical words</span>", 
"<span class=\"comment\"> *  - transfers must not cross physical 64K (0-3) or 128K (5-7) boundaries</span>", 
"<span class=\"comment\"> *  - transfer count loaded to registers is 1 less than actual count</span>", 
"<span class=\"comment\"> *  - controller 2 offsets are all even (2x offsets for controller 1)</span>", 
"<span class=\"comment\"> *  - page registers for 5-7 don't use data bit 0, represent 128K pages</span>", 
"<span class=\"comment\"> *  - page registers for 0-3 use bit 0, represent 64K pages</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DMA transfers are limited to the lower 16MB of _physical_ memory.</span>", 
"<span class=\"comment\"> * Note that addresses loaded into registers must be _physical_ addresses,</span>", 
"<span class=\"comment\"> * not logical addresses (which may differ if paging is active).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Address mapping for channels 0-3:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   A23 ... A16 A15 ... A8  A7 ... A0    (Physical addresses)</span>", 
"<span class=\"comment\"> *    |  ...  |   |  ... |   |  ... |</span>", 
"<span class=\"comment\"> *    |  ...  |   |  ... |   |  ... |</span>", 
"<span class=\"comment\"> *    |  ...  |   |  ... |   |  ... |</span>", 
"<span class=\"comment\"> *   P7  ...  P0  A7 ... A0  A7 ... A0</span>", 
"<span class=\"comment\"> * |    Page    | Addr MSB | Addr LSB |   (DMA registers)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Address mapping for channels 5-7:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   A23 ... A17 A16 A15 ... A9 A8 A7 ... A1 A0    (Physical addresses)</span>", 
"<span class=\"comment\"> *    |  ...  |   \\   \\   ... \\  \\  \\  ... \\  \\</span>", 
"<span class=\"comment\"> *    |  ...  |    \\   \\   ... \\  \\  \\  ... \\  (not used)</span>", 
"<span class=\"comment\"> *    |  ...  |     \\   \\   ... \\  \\  \\  ... \\</span>", 
"<span class=\"comment\"> *   P7  ...  P1 (0) A7 A6  ... A0 A7 A6 ... A0</span>", 
"<span class=\"comment\"> * |      Page      |  Addr MSB   |  Addr LSB  |   (DMA registers)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Again, channels 5-7 transfer _physical_ words (16 bits), so addresses</span>", 
"<span class=\"comment\"> * and counts _must_ be word-aligned (the lowest address bit is _ignored_ at</span>", 
"<span class=\"comment\"> * the hardware level, so odd-byte transfers aren't possible).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Transfer count (_not # bytes_) is limited to 64K, represented as actual</span>", 
"<span class=\"comment\"> * count - 1 : 64K =&gt; 0xFFFF, 1 =&gt; 0x0000.  Thus, count is always 1 or more,</span>", 
"<span class=\"comment\"> * and up to 128K bytes may be transferred on channels 5-7 in one operation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_DMA_CHANNELS\">MAX_DMA_CHANNELS</a><span class=\"ts\"/>8", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"", 
"<span class=\"comment\">/* The maximum address that we can perform a DMA transfer to on this platform */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_DMA_ADDRESS\">MAX_DMA_ADDRESS</a>      (<a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a> + 0x1000000)", 
"", 
"#else", 
"", 
"<span class=\"comment\">/* 16MB ISA DMA zone */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_DMA_PFN\">MAX_DMA_PFN</a>   ((16 * 1024 * 1024) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"", 
"<span class=\"comment\">/* 4GB broken PCI/AGP hardware bus master zone */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a> ((4UL * 1024 * 1024 * 1024) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"", 
"<span class=\"comment\">/* Compat define for old dma zone */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_DMA_ADDRESS\">MAX_DMA_ADDRESS</a> ((unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#MAX_DMA_PFN\">MAX_DMA_PFN</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* 8237 DMA controllers */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IO_DMA1_BASE\">IO_DMA1_BASE</a><span class=\"ts\"/>0x00<span class=\"ts\"/><span class=\"comment\">/* 8 bit slave DMA, channels 0..3 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IO_DMA2_BASE\">IO_DMA2_BASE</a><span class=\"ts\"/>0xC0<span class=\"ts\"/><span class=\"comment\">/* 16 bit master DMA, ch 4(=slave input)..7 */</span>", 
"", 
"<span class=\"comment\">/* DMA controller registers */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA1_CMD_REG\">DMA1_CMD_REG</a><span class=\"ts\"/><span class=\"ts\"/>0x08<span class=\"ts\"/><span class=\"comment\">/* command register (w) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA1_STAT_REG\">DMA1_STAT_REG</a><span class=\"ts\"/><span class=\"ts\"/>0x08<span class=\"ts\"/><span class=\"comment\">/* status register (r) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA1_REQ_REG\">DMA1_REQ_REG</a><span class=\"ts\"/><span class=\"ts\"/>0x09    <span class=\"comment\">/* request register (w) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA1_MASK_REG\">DMA1_MASK_REG</a><span class=\"ts\"/><span class=\"ts\"/>0x0A<span class=\"ts\"/><span class=\"comment\">/* single-channel mask (w) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA1_MODE_REG\">DMA1_MODE_REG</a><span class=\"ts\"/><span class=\"ts\"/>0x0B<span class=\"ts\"/><span class=\"comment\">/* mode register (w) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA1_CLEAR_FF_REG\">DMA1_CLEAR_FF_REG</a><span class=\"ts\"/>0x0C<span class=\"ts\"/><span class=\"comment\">/* clear pointer flip-flop (w) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA1_TEMP_REG\">DMA1_TEMP_REG</a><span class=\"ts\"/><span class=\"ts\"/>0x0D    <span class=\"comment\">/* Temporary Register (r) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA1_RESET_REG\">DMA1_RESET_REG</a><span class=\"ts\"/><span class=\"ts\"/>0x0D<span class=\"ts\"/><span class=\"comment\">/* Master Clear (w) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA1_CLR_MASK_REG\">DMA1_CLR_MASK_REG</a>       0x0E    <span class=\"comment\">/* Clear Mask */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA1_MASK_ALL_REG\">DMA1_MASK_ALL_REG</a>       0x0F    <span class=\"comment\">/* all-channels mask (w) */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA2_CMD_REG\">DMA2_CMD_REG</a><span class=\"ts\"/><span class=\"ts\"/>0xD0<span class=\"ts\"/><span class=\"comment\">/* command register (w) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA2_STAT_REG\">DMA2_STAT_REG</a><span class=\"ts\"/><span class=\"ts\"/>0xD0<span class=\"ts\"/><span class=\"comment\">/* status register (r) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA2_REQ_REG\">DMA2_REQ_REG</a><span class=\"ts\"/><span class=\"ts\"/>0xD2    <span class=\"comment\">/* request register (w) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA2_MASK_REG\">DMA2_MASK_REG</a><span class=\"ts\"/><span class=\"ts\"/>0xD4<span class=\"ts\"/><span class=\"comment\">/* single-channel mask (w) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA2_MODE_REG\">DMA2_MODE_REG</a><span class=\"ts\"/><span class=\"ts\"/>0xD6<span class=\"ts\"/><span class=\"comment\">/* mode register (w) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA2_CLEAR_FF_REG\">DMA2_CLEAR_FF_REG</a><span class=\"ts\"/>0xD8<span class=\"ts\"/><span class=\"comment\">/* clear pointer flip-flop (w) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA2_TEMP_REG\">DMA2_TEMP_REG</a><span class=\"ts\"/><span class=\"ts\"/>0xDA    <span class=\"comment\">/* Temporary Register (r) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA2_RESET_REG\">DMA2_RESET_REG</a><span class=\"ts\"/><span class=\"ts\"/>0xDA<span class=\"ts\"/><span class=\"comment\">/* Master Clear (w) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA2_CLR_MASK_REG\">DMA2_CLR_MASK_REG</a>       0xDC    <span class=\"comment\">/* Clear Mask */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA2_MASK_ALL_REG\">DMA2_MASK_ALL_REG</a>       0xDE    <span class=\"comment\">/* all-channels mask (w) */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_ADDR_0\">DMA_ADDR_0</a><span class=\"ts\"/><span class=\"ts\"/>0x00    <span class=\"comment\">/* DMA address registers */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_ADDR_1\">DMA_ADDR_1</a><span class=\"ts\"/><span class=\"ts\"/>0x02", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_ADDR_2\">DMA_ADDR_2</a><span class=\"ts\"/><span class=\"ts\"/>0x04", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_ADDR_3\">DMA_ADDR_3</a><span class=\"ts\"/><span class=\"ts\"/>0x06", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_ADDR_4\">DMA_ADDR_4</a><span class=\"ts\"/><span class=\"ts\"/>0xC0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_ADDR_5\">DMA_ADDR_5</a><span class=\"ts\"/><span class=\"ts\"/>0xC4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_ADDR_6\">DMA_ADDR_6</a><span class=\"ts\"/><span class=\"ts\"/>0xC8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_ADDR_7\">DMA_ADDR_7</a><span class=\"ts\"/><span class=\"ts\"/>0xCC", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_CNT_0\">DMA_CNT_0</a><span class=\"ts\"/><span class=\"ts\"/>0x01    <span class=\"comment\">/* DMA count registers */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_CNT_1\">DMA_CNT_1</a><span class=\"ts\"/><span class=\"ts\"/>0x03", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_CNT_2\">DMA_CNT_2</a><span class=\"ts\"/><span class=\"ts\"/>0x05", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_CNT_3\">DMA_CNT_3</a><span class=\"ts\"/><span class=\"ts\"/>0x07", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_CNT_4\">DMA_CNT_4</a><span class=\"ts\"/><span class=\"ts\"/>0xC2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_CNT_5\">DMA_CNT_5</a><span class=\"ts\"/><span class=\"ts\"/>0xC6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_CNT_6\">DMA_CNT_6</a><span class=\"ts\"/><span class=\"ts\"/>0xCA", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_CNT_7\">DMA_CNT_7</a><span class=\"ts\"/><span class=\"ts\"/>0xCE", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_PAGE_0\">DMA_PAGE_0</a><span class=\"ts\"/><span class=\"ts\"/>0x87    <span class=\"comment\">/* DMA page registers */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_PAGE_1\">DMA_PAGE_1</a><span class=\"ts\"/><span class=\"ts\"/>0x83", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_PAGE_2\">DMA_PAGE_2</a><span class=\"ts\"/><span class=\"ts\"/>0x81", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_PAGE_3\">DMA_PAGE_3</a><span class=\"ts\"/><span class=\"ts\"/>0x82", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_PAGE_5\">DMA_PAGE_5</a><span class=\"ts\"/><span class=\"ts\"/>0x8B", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_PAGE_6\">DMA_PAGE_6</a><span class=\"ts\"/><span class=\"ts\"/>0x89", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_PAGE_7\">DMA_PAGE_7</a><span class=\"ts\"/><span class=\"ts\"/>0x8A", 
"", 
"<span class=\"comment\">/* I/O to memory, no autoinit, increment, single mode */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_MODE_READ\">DMA_MODE_READ</a><span class=\"ts\"/><span class=\"ts\"/>0x44", 
"<span class=\"comment\">/* memory to I/O, no autoinit, increment, single mode */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_MODE_WRITE\">DMA_MODE_WRITE</a><span class=\"ts\"/><span class=\"ts\"/>0x48", 
"<span class=\"comment\">/* pass thru DREQ-&gt;HRQ, DACK&lt;-HLDA only */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_MODE_CASCADE\">DMA_MODE_CASCADE</a><span class=\"ts\"/>0xC0", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DMA_AUTOINIT\">DMA_AUTOINIT</a><span class=\"ts\"/><span class=\"ts\"/>0x10", 
"", 
"", 
"extern <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a>  <a class=\"id\" href=\"#dma_spin_lock\">dma_spin_lock</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#claim_dma_lock\">claim_dma_lock</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dma_spin_lock\">dma_spin_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#flags\">flags</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#release_dma_lock\">release_dma_lock</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dma_spin_lock\">dma_spin_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/* enable/disable a specific DMA channel */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#enable_dma\">enable_dma</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmanr\">dmanr</a> <= 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#dmanr\">dmanr</a>, <a class=\"id\" href=\"#DMA1_MASK_REG\">DMA1_MASK_REG</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3, <a class=\"id\" href=\"#DMA2_MASK_REG\">DMA2_MASK_REG</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#disable_dma\">disable_dma</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmanr\">dmanr</a> <= 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#dmanr\">dmanr</a> | 4, <a class=\"id\" href=\"#DMA1_MASK_REG\">DMA1_MASK_REG</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>((<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3) | 4, <a class=\"id\" href=\"#DMA2_MASK_REG\">DMA2_MASK_REG</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Clear the 'DMA Pointer Flip Flop'.</span>", 
"<span class=\"comment\"> * Write 0 for LSB/MSB, 1 for MSB/LSB access.</span>", 
"<span class=\"comment\"> * Use this once to initialize the FF to a known state.</span>", 
"<span class=\"comment\"> * After that, keep track of it. :-)</span>", 
"<span class=\"comment\"> * --- In order to do that, the DMA routines below should ---</span>", 
"<span class=\"comment\"> * --- only be used while holding the DMA lock ! ---</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_dma_ff\">clear_dma_ff</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmanr\">dmanr</a> <= 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(0, <a class=\"id\" href=\"#DMA1_CLEAR_FF_REG\">DMA1_CLEAR_FF_REG</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(0, <a class=\"id\" href=\"#DMA2_CLEAR_FF_REG\">DMA2_CLEAR_FF_REG</a>);", 
"}", 
"", 
"<span class=\"comment\">/* set mode (above) for a specific DMA channel */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_dma_mode\">set_dma_mode</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>, char <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmanr\">dmanr</a> <= 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#mode\">mode</a> | <a class=\"id\" href=\"#dmanr\">dmanr</a>, <a class=\"id\" href=\"#DMA1_MODE_REG\">DMA1_MODE_REG</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#mode\">mode</a> | (<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3), <a class=\"id\" href=\"#DMA2_MODE_REG\">DMA2_MODE_REG</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Set only the page register bits of the transfer address.</span>", 
"<span class=\"comment\"> * This is used for successive transfers when we know the contents of</span>", 
"<span class=\"comment\"> * the lower 16 bits of the DMA current address register, but a 64k boundary</span>", 
"<span class=\"comment\"> * may have been crossed.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_dma_page\">set_dma_page</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>, char <a class=\"id\" href=\"#pagenr\">pagenr</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#dmanr\">dmanr</a>) {", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#pagenr\">pagenr</a>, <a class=\"id\" href=\"#DMA_PAGE_0\">DMA_PAGE_0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#pagenr\">pagenr</a>, <a class=\"id\" href=\"#DMA_PAGE_1\">DMA_PAGE_1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#pagenr\">pagenr</a>, <a class=\"id\" href=\"#DMA_PAGE_2\">DMA_PAGE_2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 3:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#pagenr\">pagenr</a>, <a class=\"id\" href=\"#DMA_PAGE_3\">DMA_PAGE_3</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 5:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#pagenr\">pagenr</a> &amp; 0xfe, <a class=\"id\" href=\"#DMA_PAGE_5\">DMA_PAGE_5</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 6:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#pagenr\">pagenr</a> &amp; 0xfe, <a class=\"id\" href=\"#DMA_PAGE_6\">DMA_PAGE_6</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 7:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#pagenr\">pagenr</a> &amp; 0xfe, <a class=\"id\" href=\"#DMA_PAGE_7\">DMA_PAGE_7</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Set transfer address &amp; page bits for specific DMA channel.</span>", 
"<span class=\"comment\"> * Assumes dma flipflop is clear.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_dma_addr\">set_dma_addr</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>, unsigned int <a class=\"id\" href=\"#a\">a</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_dma_page\">set_dma_page</a>(<a class=\"id\" href=\"#dmanr\">dmanr</a>, <a class=\"id\" href=\"#a\">a</a>>>16);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmanr\">dmanr</a> <= 3)  {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#a\">a</a> &amp; 0xff, ((<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3) << 1) + <a class=\"id\" href=\"#IO_DMA1_BASE\">IO_DMA1_BASE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>((<a class=\"id\" href=\"#a\">a</a> >> 8) &amp; 0xff, ((<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3) << 1) + <a class=\"id\" href=\"#IO_DMA1_BASE\">IO_DMA1_BASE</a>);", 
"<span class=\"ts\"/>}  else  {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>((<a class=\"id\" href=\"#a\">a</a> >> 1) &amp; 0xff, ((<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3) << 2) + <a class=\"id\" href=\"#IO_DMA2_BASE\">IO_DMA2_BASE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>((<a class=\"id\" href=\"#a\">a</a> >> 9) &amp; 0xff, ((<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3) << 2) + <a class=\"id\" href=\"#IO_DMA2_BASE\">IO_DMA2_BASE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Set transfer size (max 64k for DMA0..3, 128k for DMA5..7) for</span>", 
"<span class=\"comment\"> * a specific DMA channel.</span>", 
"<span class=\"comment\"> * You must ensure the parameters are valid.</span>", 
"<span class=\"comment\"> * NOTE: from a manual: \"the number of transfers is one more</span>", 
"<span class=\"comment\"> * than the initial word count\"! This is taken into account.</span>", 
"<span class=\"comment\"> * Assumes dma flip-flop is clear.</span>", 
"<span class=\"comment\"> * NOTE 2: \"count\" represents _bytes_ and must be even for channels 5-7.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_dma_count\">set_dma_count</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>, unsigned int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmanr\">dmanr</a> <= 3)  {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>(<a class=\"id\" href=\"#count\">count</a> &amp; 0xff, ((<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3) << 1) + 1 + <a class=\"id\" href=\"#IO_DMA1_BASE\">IO_DMA1_BASE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>((<a class=\"id\" href=\"#count\">count</a> >> 8) &amp; 0xff,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> ((<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3) << 1) + 1 + <a class=\"id\" href=\"#IO_DMA1_BASE\">IO_DMA1_BASE</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>((<a class=\"id\" href=\"#count\">count</a> >> 1) &amp; 0xff,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> ((<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3) << 2) + 2 + <a class=\"id\" href=\"#IO_DMA2_BASE\">IO_DMA2_BASE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_outb\">dma_outb</a>((<a class=\"id\" href=\"#count\">count</a> >> 9) &amp; 0xff,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> ((<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3) << 2) + 2 + <a class=\"id\" href=\"#IO_DMA2_BASE\">IO_DMA2_BASE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Get DMA residue count. After a DMA transfer, this</span>", 
"<span class=\"comment\"> * should return zero. Reading this while a DMA transfer is</span>", 
"<span class=\"comment\"> * still in progress will return unpredictable results.</span>", 
"<span class=\"comment\"> * If called before the channel has been used, it may return 1.</span>", 
"<span class=\"comment\"> * Otherwise, it returns the number of _bytes_ left to transfer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Assumes DMA flip-flop is clear.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#get_dma_residue\">get_dma_residue</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#io_port\">io_port</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* using short to get 16-bit wrap around */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_port\">io_port</a> = (<a class=\"id\" href=\"#dmanr\">dmanr</a> <= 3) ? ((<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3) << 1) + 1 + <a class=\"id\" href=\"#IO_DMA1_BASE\">IO_DMA1_BASE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>: ((<a class=\"id\" href=\"#dmanr\">dmanr</a> &amp; 3) << 2) + 2 + <a class=\"id\" href=\"#IO_DMA2_BASE\">IO_DMA2_BASE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 1 + <a class=\"id\" href=\"#dma_inb\">dma_inb</a>(<a class=\"id\" href=\"#io_port\">io_port</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#dma_inb\">dma_inb</a>(<a class=\"id\" href=\"#io_port\">io_port</a>) << 8;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dmanr\">dmanr</a> <= 3) ? <a class=\"id\" href=\"#count\">count</a> : (<a class=\"id\" href=\"#count\">count</a> << 1);", 
"}", 
"", 
"", 
"<span class=\"comment\">/* These are in kernel/dma.c: */</span>", 
"extern int <a class=\"id\" href=\"#request_dma\">request_dma</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>, const char *<a class=\"id\" href=\"#device_id\">device_id</a>);", 
"extern void <a class=\"id\" href=\"#free_dma\">free_dma</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>);", 
"", 
"<span class=\"comment\">/* From PCI */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"extern int <a class=\"id\" href=\"#isa_dma_bridge_buggy\">isa_dma_bridge_buggy</a>;", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#isa_dma_bridge_buggy\">isa_dma_bridge_buggy</a><span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_DMA_H */</span>", 
];
xr_frag_insert('l/ff/e5cb659e1654688105db17bbffd21665f15fad.xr', __xr_tmp);
