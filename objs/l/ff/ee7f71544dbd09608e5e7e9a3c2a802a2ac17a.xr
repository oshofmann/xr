var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright (C) 1995  Linus Torvalds</span>", 
"<span class=\"comment\"> *  Copyright (C) 2001, 2002 Andi Kleen, SuSE Labs.</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008-2009, Red Hat Inc., Ingo Molnar</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* STACK_END_MAGIC<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* test_thread_flag(), ...<span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* oops_begin/end, ...<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* search_exception_table<span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* max_low_pfn<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* __kprobes, ...<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmiotrace\">mmiotrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kmmio_handler, ...<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* perf_sw_event<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#traps\">traps</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* dotraplinkage, ...<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgalloc\">pgalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* pgd_*(), ...<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#kmemcheck\">kmemcheck</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kmemcheck_*(), ...<span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Page fault error code bits:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   bit 0 ==<span class=\"ts\"/> 0: no page found<span class=\"ts\"/>1: protection fault</span>", 
"<span class=\"comment\"> *   bit 1 ==<span class=\"ts\"/> 0: read access<span class=\"ts\"/><span class=\"ts\"/>1: write access</span>", 
"<span class=\"comment\"> *   bit 2 ==<span class=\"ts\"/> 0: kernel-mode access<span class=\"ts\"/>1: user-mode access</span>", 
"<span class=\"comment\"> *   bit 3 ==<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1: use of reserved bit detected</span>", 
"<span class=\"comment\"> *   bit 4 ==<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1: fault was an instruction fetch</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#x86_pf_error_code\">x86_pf_error_code</a> {", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PF_PROT\">PF_PROT</a><span class=\"ts\"/><span class=\"ts\"/>=<span class=\"ts\"/><span class=\"ts\"/>1 << 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PF_WRITE\">PF_WRITE</a><span class=\"ts\"/>=<span class=\"ts\"/><span class=\"ts\"/>1 << 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PF_USER\">PF_USER</a><span class=\"ts\"/><span class=\"ts\"/>=<span class=\"ts\"/><span class=\"ts\"/>1 << 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PF_RSVD\">PF_RSVD</a><span class=\"ts\"/><span class=\"ts\"/>=<span class=\"ts\"/><span class=\"ts\"/>1 << 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PF_INSTR\">PF_INSTR</a><span class=\"ts\"/>=<span class=\"ts\"/><span class=\"ts\"/>1 << 4,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns 0 if mmiotrace is disabled, or if the fault is not</span>", 
"<span class=\"comment\"> * handled by mmiotrace:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__kprobes\">__kprobes</a>", 
"<a class=\"id\" href=\"#kmmio_fault\">kmmio_fault</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#is_kmmio_active\">is_kmmio_active</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kmmio_handler\">kmmio_handler</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#addr\">addr</a>) == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#notify_page_fault\">notify_page_fault</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* kprobe_running() needs smp_processor_id() */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobes_built_in\">kprobes_built_in</a>() && !<a class=\"id\" href=\"#user_mode_vm\">user_mode_vm</a>(<a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobe_running\">kprobe_running</a>() && <a class=\"id\" href=\"#kprobe_fault_handler\">kprobe_fault_handler</a>(<a class=\"id\" href=\"#regs\">regs</a>, 14))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prefetch quirks:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 32-bit mode:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Sometimes AMD Athlon/Opteron CPUs report invalid exceptions on prefetch.</span>", 
"<span class=\"comment\"> *   Check that here and ignore it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 64-bit mode:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Sometimes the CPU reports invalid exceptions on prefetch.</span>", 
"<span class=\"comment\"> *   Check that here and ignore it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Opcode checker based on code by Richard Brunner.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#check_prefetch_opcode\">check_prefetch_opcode</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned char *<a class=\"id\" href=\"#instr\">instr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned char <a class=\"id\" href=\"#opcode\">opcode</a>, int *<a class=\"id\" href=\"#prefetch\">prefetch</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#instr_hi\">instr_hi</a> = <a class=\"id\" href=\"#opcode\">opcode</a> &amp; 0xf0;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#instr_lo\">instr_lo</a> = <a class=\"id\" href=\"#opcode\">opcode</a> &amp; 0x0f;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#instr_hi\">instr_hi</a>) {", 
"<span class=\"ts\"/>case 0x20:", 
"<span class=\"ts\"/>case 0x30:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Values 0x26,0x2E,0x36,0x3E are valid x86 prefixes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In X86_64 long mode, the CPU will signal invalid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * opcode if some of these prefixes are present so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * X86_64 will never get here anyway</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return ((<a class=\"id\" href=\"#instr_lo\">instr_lo</a> &amp; 7) == 0x6);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>case 0x40:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In AMD64 long mode 0x40..0x4F are valid REX prefixes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Need to figure out under what instruction mode the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * instruction was issued. Could check the LDT for lm,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but for now it's good enough to assume that long</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mode only uses well known segments or kernel.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return (!<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>)) || (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a> == <a class=\"id\" href=\"#__USER_CS\">__USER_CS</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>case 0x60:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0x64 thru 0x67 are valid prefixes in all modes. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#instr_lo\">instr_lo</a> &amp; 0xC) == 0x4;", 
"<span class=\"ts\"/>case 0xF0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0xF0, 0xF2, 0xF3 are valid prefixes in all modes. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return !<a class=\"id\" href=\"#instr_lo\">instr_lo</a> || (<a class=\"id\" href=\"#instr_lo\">instr_lo</a>>>1) == 1;", 
"<span class=\"ts\"/>case 0x00:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Prefetch instruction is 0x0F0D or 0x0F18 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_kernel_address\">probe_kernel_address</a>(<a class=\"id\" href=\"#instr\">instr</a>, <a class=\"id\" href=\"#opcode\">opcode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#prefetch\">prefetch</a> = (<a class=\"id\" href=\"#instr_lo\">instr_lo</a> == 0xF) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#opcode\">opcode</a> == 0x0D || <a class=\"id\" href=\"#opcode\">opcode</a> == 0x18);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#is_prefetch\">is_prefetch</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#max_instr\">max_instr</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#instr\">instr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prefetch\">prefetch</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it was a exec (instruction fetch) fault on NX page, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do not ignore the fault:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error_code\">error_code</a> &amp; <a class=\"id\" href=\"#PF_INSTR\">PF_INSTR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#instr\">instr</a> = (void *)<a class=\"id\" href=\"#convert_ip_to_linear\">convert_ip_to_linear</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_instr\">max_instr</a> = <a class=\"id\" href=\"#instr\">instr</a> + 15;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>) && <a class=\"id\" href=\"#instr\">instr</a> >= (unsigned char *)<a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#instr\">instr</a> &lt; <a class=\"id\" href=\"#max_instr\">max_instr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_kernel_address\">probe_kernel_address</a>(<a class=\"id\" href=\"#instr\">instr</a>, <a class=\"id\" href=\"#opcode\">opcode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#instr\">instr</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_prefetch_opcode\">check_prefetch_opcode</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#instr\">instr</a>, <a class=\"id\" href=\"#opcode\">opcode</a>, &amp;<a class=\"id\" href=\"#prefetch\">prefetch</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#prefetch\">prefetch</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#force_sig_info_fault\">force_sig_info_fault</a>(int <a class=\"id\" href=\"#si_signo\">si_signo</a>, int <a class=\"id\" href=\"#si_code\">si_code</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> <a class=\"id\" href=\"#info\">info</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a><span class=\"ts\"/>= <a class=\"id\" href=\"#si_signo\">si_signo</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_errno\">si_errno</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a><span class=\"ts\"/>= <a class=\"id\" href=\"#si_code\">si_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_addr\">si_addr</a><span class=\"ts\"/>= (void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_addr_lsb\">si_addr_lsb</a> = <a class=\"id\" href=\"#si_code\">si_code</a> == <a class=\"id\" href=\"#BUS_MCEERR_AR\">BUS_MCEERR_AR</a> ? <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> : 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_sig_info\">force_sig_info</a>(<a class=\"id\" href=\"#si_signo\">si_signo</a>, &amp;<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>);", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#pgd_list\">pgd_list</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#vmalloc_sync_one\">vmalloc_sync_one</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd_k\">pgd_k</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>, *<a class=\"id\" href=\"#pud_k\">pud_k</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>, *<a class=\"id\" href=\"#pmd_k\">pmd_k</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> += <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_k\">pgd_k</a> = <a class=\"id\" href=\"#init_mm\">init_mm</a>.<a class=\"id\" href=\"#pgd\">pgd</a> + <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgd_present\">pgd_present</a>(*<a class=\"id\" href=\"#pgd_k\">pgd_k</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set_pgd(pgd, *pgd_k); here would be useless on PAE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and redundant with the set_pmd() on non-PAE. As would</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set_pud.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_k\">pud_k</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd_k\">pgd_k</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pud_present\">pud_present</a>(*<a class=\"id\" href=\"#pud_k\">pud_k</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_k\">pmd_k</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud_k\">pud_k</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*<a class=\"id\" href=\"#pmd_k\">pmd_k</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pmd\">set_pmd</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, *<a class=\"id\" href=\"#pmd_k\">pmd_k</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pmd_page\">pmd_page</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>) != <a class=\"id\" href=\"#pmd_page\">pmd_page</a>(*<a class=\"id\" href=\"#pmd_k\">pmd_k</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pmd_k\">pmd_k</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#vmalloc_sync_all\">vmalloc_sync_all</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#SHARED_KERNEL_PMD\">SHARED_KERNEL_PMD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a> &amp; <a class=\"id\" href=\"#PMD_MASK\">PMD_MASK</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#address\">address</a> >= <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> && <a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#FIXADDR_TOP\">FIXADDR_TOP</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#address\">address</a> += <a class=\"id\" href=\"#PMD_SIZE\">PMD_SIZE</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#pgd_list\">pgd_list</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vmalloc_sync_one\">vmalloc_sync_one</a>(<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#address\">address</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 32-bit:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Handle a fault on the vmalloc or module mapping area</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> int <a class=\"id\" href=\"#vmalloc_fault\">vmalloc_fault</a>(unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pgd_paddr\">pgd_paddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd_k\">pmd_k</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte_k\">pte_k</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure we are in vmalloc area: */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#address\">address</a> >= <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a> && <a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Synchronize this task's top level page-table</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with the 'reference' page table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do _not_ use \"current\" here. We might be inside</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an interrupt in the middle of a task switch..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_paddr\">pgd_paddr</a> = <a class=\"id\" href=\"#read_cr3\">read_cr3</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_k\">pmd_k</a> = <a class=\"id\" href=\"#vmalloc_sync_one\">vmalloc_sync_one</a>(<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#pgd_paddr\">pgd_paddr</a>), <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd_k\">pmd_k</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_k\">pte_k</a> = <a class=\"id\" href=\"#pte_offset_kernel\">pte_offset_kernel</a>(<a class=\"id\" href=\"#pmd_k\">pmd_k</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_present\">pte_present</a>(*<a class=\"id\" href=\"#pte_k\">pte_k</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Did it hit the DOS screen memory VA from vm86 mode?</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#check_v8086_mode\">check_v8086_mode</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bit\">bit</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#v8086_mode\">v8086_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = (<a class=\"id\" href=\"#address\">address</a> - 0xA0000) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bit\">bit</a> &lt; 32)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#screen_bitmap\">screen_bitmap</a> |= 1 << <a class=\"id\" href=\"#bit\">bit</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#low_pfn\">low_pfn</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#max_low_pfn\">max_low_pfn</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dump_pagetable\">dump_pagetable</a>(unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#read_cr3\">read_cr3</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a> = &amp;<a class=\"id\" href=\"#base\">base</a>[<a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#address\">address</a>)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_PAE\">CONFIG_X86_PAE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"*pdpt = %016Lx \", <a class=\"id\" href=\"#pgd_val\">pgd_val</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#low_pfn\">low_pfn</a>(<a class=\"id\" href=\"#pgd_val\">pgd_val</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) || !<a class=\"id\" href=\"#pgd_present\">pgd_present</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>), <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"*pde = %0*Lx \", sizeof(*<a class=\"id\" href=\"#pmd\">pmd</a>) * 2, (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#pmd_val\">pmd_val</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must not directly access the pte in the highpte</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case if the page table is located in highmem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * And let's rather not kmap-atomic the pte, just in case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's allocated already:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#low_pfn\">low_pfn</a>(<a class=\"id\" href=\"#pmd_pfn\">pmd_pfn</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>)) || !<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>) || <a class=\"id\" href=\"#pmd_large\">pmd_large</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_kernel\">pte_offset_kernel</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"*pte = %0*Lx \", sizeof(*<a class=\"id\" href=\"#pte\">pte</a>) * 2, (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#pte_val\">pte_val</a>(*<a class=\"id\" href=\"#pte\">pte</a>));", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"}", 
"", 
"#else <span class=\"comment\">/* CONFIG_X86_64: */</span>", 
"", 
"void <a class=\"id\" href=\"#vmalloc_sync_all\">vmalloc_sync_all</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a> &amp; <a class=\"id\" href=\"#PGDIR_MASK\">PGDIR_MASK</a>; <a class=\"id\" href=\"#address\">address</a> <= <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#address\">address</a> += <a class=\"id\" href=\"#PGDIR_SIZE\">PGDIR_SIZE</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd_ref\">pgd_ref</a> = <a class=\"id\" href=\"#pgd_offset_k\">pgd_offset_k</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(*<a class=\"id\" href=\"#pgd_ref\">pgd_ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#pgd_list\">pgd_list</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = (<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) + <a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pgd\">set_pgd</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, *<a class=\"id\" href=\"#pgd_ref\">pgd_ref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pgd_page_vaddr\">pgd_page_vaddr</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>) != <a class=\"id\" href=\"#pgd_page_vaddr\">pgd_page_vaddr</a>(*<a class=\"id\" href=\"#pgd_ref\">pgd_ref</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 64-bit:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Handle a fault on the vmalloc area</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This assumes no large pages in there.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> int <a class=\"id\" href=\"#vmalloc_fault\">vmalloc_fault</a>(unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>, *<a class=\"id\" href=\"#pgd_ref\">pgd_ref</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>, *<a class=\"id\" href=\"#pud_ref\">pud_ref</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>, *<a class=\"id\" href=\"#pmd_ref\">pmd_ref</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>, *<a class=\"id\" href=\"#pte_ref\">pte_ref</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure we are in vmalloc area: */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#address\">address</a> >= <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a> && <a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Copy kernel mappings over when needed. This can also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * happen within a race in page table update. In the later</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case just flush:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_ref\">pgd_ref</a> = <a class=\"id\" href=\"#pgd_offset_k\">pgd_offset_k</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(*<a class=\"id\" href=\"#pgd_ref\">pgd_ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pgd\">set_pgd</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, *<a class=\"id\" href=\"#pgd_ref\">pgd_ref</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pgd_page_vaddr\">pgd_page_vaddr</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>) != <a class=\"id\" href=\"#pgd_page_vaddr\">pgd_page_vaddr</a>(*<a class=\"id\" href=\"#pgd_ref\">pgd_ref</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Below here mismatches are bugs because these lower tables</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are shared:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_ref\">pud_ref</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd_ref\">pgd_ref</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none\">pud_none</a>(*<a class=\"id\" href=\"#pud_ref\">pud_ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none\">pud_none</a>(*<a class=\"id\" href=\"#pud\">pud</a>) || <a class=\"id\" href=\"#pud_page_vaddr\">pud_page_vaddr</a>(*<a class=\"id\" href=\"#pud\">pud</a>) != <a class=\"id\" href=\"#pud_page_vaddr\">pud_page_vaddr</a>(*<a class=\"id\" href=\"#pud_ref\">pud_ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_ref\">pmd_ref</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud_ref\">pud_ref</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none\">pmd_none</a>(*<a class=\"id\" href=\"#pmd_ref\">pmd_ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none\">pmd_none</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>) || <a class=\"id\" href=\"#pmd_page\">pmd_page</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>) != <a class=\"id\" href=\"#pmd_page\">pmd_page</a>(*<a class=\"id\" href=\"#pmd_ref\">pmd_ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_ref\">pte_ref</a> = <a class=\"id\" href=\"#pte_offset_kernel\">pte_offset_kernel</a>(<a class=\"id\" href=\"#pmd_ref\">pmd_ref</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_present\">pte_present</a>(*<a class=\"id\" href=\"#pte_ref\">pte_ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_kernel\">pte_offset_kernel</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't use pte_page here, because the mappings can point</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * outside mem_map, and the NUMA hash lookup cannot handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_present\">pte_present</a>(*<a class=\"id\" href=\"#pte\">pte</a>) || <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(*<a class=\"id\" href=\"#pte\">pte</a>) != <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(*<a class=\"id\" href=\"#pte_ref\">pte_ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const char <a class=\"id\" href=\"#errata93_warning\">errata93_warning</a>[] =", 
"<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> ", 
"\"******* Your BIOS seems to not contain a fix for K8 errata #93\\n\"", 
"\"******* Working around it, but it may cause SEGVs or burn power.\\n\"", 
"\"******* Please consider a BIOS update.\\n\"", 
"\"******* Disabling USB legacy in the BIOS may also help.\\n\";", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * No vm86 mode in 64-bit mode:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#check_v8086_mode\">check_v8086_mode</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"}", 
"", 
"static int <a class=\"id\" href=\"#bad_address\">bad_address</a>(void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dummy\">dummy</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#probe_kernel_address\">probe_kernel_address</a>((unsigned long *)<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#dummy\">dummy</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dump_pagetable\">dump_pagetable</a>(unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#read_cr3\">read_cr3</a>() &amp; <a class=\"id\" href=\"#PHYSICAL_PAGE_MASK\">PHYSICAL_PAGE_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bad_address\">bad_address</a>(<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"PGD %lx \", <a class=\"id\" href=\"#pgd_val\">pgd_val</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgd_present\">pgd_present</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bad_address\">bad_address</a>(<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"PUD %lx \", <a class=\"id\" href=\"#pud_val\">pud_val</a>(*<a class=\"id\" href=\"#pud\">pud</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pud_present\">pud_present</a>(*<a class=\"id\" href=\"#pud\">pud</a>) || <a class=\"id\" href=\"#pud_large\">pud_large</a>(*<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bad_address\">bad_address</a>(<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"PMD %lx \", <a class=\"id\" href=\"#pmd_val\">pmd_val</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>) || <a class=\"id\" href=\"#pmd_large\">pmd_large</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_kernel\">pte_offset_kernel</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bad_address\">bad_address</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"PTE %lx\", <a class=\"id\" href=\"#pte_val\">pte_val</a>(*<a class=\"id\" href=\"#pte\">pte</a>));", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/>return;", 
"<a class=\"id\" href=\"#bad\">bad</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"BAD\\n\");", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Workaround for K8 erratum #93 &amp; buggy BIOS.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * BIOS SMM functions are required to use a specific workaround</span>", 
"<span class=\"comment\"> * to avoid corruption of the 64bit RIP register on C stepping K8.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A lot of BIOS that didn't get tested properly miss this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The OS sees this as a page fault with the upper 32bits of RIP cleared.</span>", 
"<span class=\"comment\"> * Try to work around it here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note we only handle faults in kernel here.</span>", 
"<span class=\"comment\"> * Does nothing on 32-bit.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#is_errata93\">is_errata93</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> != <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#address\">address</a> >> 32) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> |= 0xffffffffUL << 32;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#address\">address</a> >= (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#_stext\">_stext</a> && <a class=\"id\" href=\"#address\">address</a> <= (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#_etext\">_etext</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#address\">address</a> >= <a class=\"id\" href=\"#MODULES_VADDR\">MODULES_VADDR</a> && <a class=\"id\" href=\"#address\">address</a> <= <a class=\"id\" href=\"#MODULES_END\">MODULES_END</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk_once\">printk_once</a>(<a class=\"id\" href=\"#errata93_warning\">errata93_warning</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Work around K8 erratum #100 K8 in compat mode occasionally jumps</span>", 
"<span class=\"comment\"> * to illegal addresses &gt;4GB.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We catch this in the page fault handler because these addresses</span>", 
"<span class=\"comment\"> * are not reachable. Just detect this case and return.  Any code</span>", 
"<span class=\"comment\"> * segment in LDT is compatibility mode.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#is_errata100\">is_errata100</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a> == <a class=\"id\" href=\"#__USER32_CS\">__USER32_CS</a> || (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a> &amp; (1<<2))) && (<a class=\"id\" href=\"#address\">address</a> >> 32))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#is_f00f_bug\">is_f00f_bug</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_F00F_BUG\">CONFIG_X86_F00F_BUG</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Pentium F0 0F C7 C8 bug workaround:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#f00f_bug\">f00f_bug</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = (<a class=\"id\" href=\"#address\">address</a> - <a class=\"id\" href=\"#idt_descr\">idt_descr</a>.<a class=\"id\" href=\"#address\">address</a>) >> 3;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> == 6) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_invalid_op\">do_invalid_op</a>(<a class=\"id\" href=\"#regs\">regs</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const char <a class=\"id\" href=\"#nx_warning\">nx_warning</a>[] = <a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a>", 
"\"kernel tried to execute NX-protected page - exploit attempt? (uid: %d)\\n\";", 
"", 
"static void", 
"<a class=\"id\" href=\"#show_fault_oops\">show_fault_oops</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#oops_may_print\">oops_may_print</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error_code\">error_code</a> &amp; <a class=\"id\" href=\"#PF_INSTR\">PF_INSTR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte\">pte</a> && <a class=\"id\" href=\"#pte_present\">pte_present</a>(*<a class=\"id\" href=\"#pte\">pte</a>) && !<a class=\"id\" href=\"#pte_exec\">pte_exec</a>(*<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#nx_warning\">nx_warning</a>, <a class=\"id\" href=\"#current_uid\">current_uid</a>());", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> \"BUG: unable to handle kernel \");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"NULL pointer dereference\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"paging request\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" at %p\\n\", (void *) <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> \"IP:\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_address\">printk_address</a>(<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_pagetable\">dump_pagetable</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void", 
"<a class=\"id\" href=\"#pgtable_bad\">pgtable_bad</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sig\">sig</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#oops_begin\">oops_begin</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> \"%s: Corrupted page table at address %lx\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_pagetable\">dump_pagetable</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#cr2\">cr2</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#trap_no\">trap_no</a><span class=\"ts\"/>= 14;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#error_code\">error_code</a><span class=\"ts\"/>= <a class=\"id\" href=\"#error_code\">error_code</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__die\">__die</a>(\"Bad pagetable\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oops_end\">oops_end</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void", 
"<a class=\"id\" href=\"#no_context\">no_context</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#stackend\">stackend</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sig\">sig</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Are we prepared to handle this kernel fault? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fixup_exception\">fixup_exception</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32-bit:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   Valid to do another page fault here, because if this fault</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   had been triggered by is_prefetch fixup_exception would have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   handled it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 64-bit:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   Hall of shame of CPU/BIOS bugs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_prefetch\">is_prefetch</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_errata93\">is_errata93</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#address\">address</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Oops. The kernel tried to access some bad page. We'll have to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * terminate things with extreme prejudice:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#oops_begin\">oops_begin</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_fault_oops\">show_fault_oops</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stackend\">stackend</a> = <a class=\"id\" href=\"#end_of_stack\">end_of_stack</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a> != &amp;<a class=\"id\" href=\"#init_task\">init_task</a> && *<a class=\"id\" href=\"#stackend\">stackend</a> != <a class=\"id\" href=\"#STACK_END_MAGIC\">STACK_END_MAGIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> \"Thread overran stack, or stack corrupted\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#cr2\">cr2</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#trap_no\">trap_no</a><span class=\"ts\"/>= 14;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#error_code\">error_code</a><span class=\"ts\"/>= <a class=\"id\" href=\"#error_code\">error_code</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__die\">__die</a>(\"Oops\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Executive summary in case the body of the oops scrolled away */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"CR2: %016lx\\n\", <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oops_end\">oops_end</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Print out info about fatal segfaults, if the show_unhandled_signals</span>", 
"<span class=\"comment\"> * sysctl is set:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#show_signal_msg\">show_signal_msg</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#unhandled_signal\">unhandled_signal</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s%s[%d]: segfault at %lx ip %p sp %p error %lx\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>) &gt; 1 ? <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> : <a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>), <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(void *)<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>, (void *)<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#error_code\">error_code</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_vma_addr\">print_vma_addr</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" in \", <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"\\n\");", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#__bad_area_nosemaphore\">__bad_area_nosemaphore</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#address\">address</a>, int <a class=\"id\" href=\"#si_code\">si_code</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* User mode accesses just cause a SIGSEGV */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error_code\">error_code</a> &amp; <a class=\"id\" href=\"#PF_USER\">PF_USER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It's possible to have interrupts off here:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Valid to do another page fault here because this one came</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * from user space:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_prefetch\">is_prefetch</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_errata100\">is_errata100</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#address\">address</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#show_unhandled_signals\">show_unhandled_signals</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_signal_msg\">show_signal_msg</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Kernel addresses are always protection faults: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#cr2\">cr2</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#error_code\">error_code</a><span class=\"ts\"/>= <a class=\"id\" href=\"#error_code\">error_code</a> | (<a class=\"id\" href=\"#address\">address</a> >= <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#trap_no\">trap_no</a><span class=\"ts\"/>= 14;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_sig_info_fault\">force_sig_info_fault</a>(<a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>, <a class=\"id\" href=\"#si_code\">si_code</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_f00f_bug\">is_f00f_bug</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#address\">address</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#no_context\">no_context</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void", 
"<a class=\"id\" href=\"#bad_area_nosemaphore\">bad_area_nosemaphore</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bad_area_nosemaphore\">__bad_area_nosemaphore</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#SEGV_MAPERR\">SEGV_MAPERR</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#__bad_area\">__bad_area</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#address\">address</a>, int <a class=\"id\" href=\"#si_code\">si_code</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Something tried to access memory that isn't in our memory map..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fix it, but check if it's kernel or user first..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bad_area_nosemaphore\">__bad_area_nosemaphore</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#si_code\">si_code</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void", 
"<a class=\"id\" href=\"#bad_area\">bad_area</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bad_area\">__bad_area</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#SEGV_MAPERR\">SEGV_MAPERR</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void", 
"<a class=\"id\" href=\"#bad_area_access_error\">bad_area_access_error</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bad_area\">__bad_area</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#SEGV_ACCERR\">SEGV_ACCERR</a>);", 
"}", 
"", 
"<span class=\"comment\">/* TODO: fixup for \"mm-invoke-oom-killer-from-page-fault.patch\" */</span>", 
"static void", 
"<a class=\"id\" href=\"#out_of_memory\">out_of_memory</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We ran out of memory, call the OOM killer, and return the userspace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (which will retry the fault, or kill us if we got oom-killed):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_out_of_memory\">pagefault_out_of_memory</a>();", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#do_sigbus\">do_sigbus</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#fault\">fault</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#code\">code</a> = <a class=\"id\" href=\"#BUS_ADRERR\">BUS_ADRERR</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Kernel mode? Handle exceptions or die: */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#error_code\">error_code</a> &amp; <a class=\"id\" href=\"#PF_USER\">PF_USER</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#no_context\">no_context</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* User-space =&gt; ok to do another page fault: */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_prefetch\">is_prefetch</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#cr2\">cr2</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#error_code\">error_code</a><span class=\"ts\"/>= <a class=\"id\" href=\"#error_code\">error_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#trap_no\">trap_no</a><span class=\"ts\"/>= 14;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_FAILURE\">CONFIG_MEMORY_FAILURE</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fault\">fault</a> &amp; <a class=\"id\" href=\"#VM_FAULT_HWPOISON\">VM_FAULT_HWPOISON</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/>\"MCE: Killing %s:%d due to hardware memory corruption fault at %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#code\">code</a> = <a class=\"id\" href=\"#BUS_MCEERR_AR\">BUS_MCEERR_AR</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_sig_info_fault\">force_sig_info_fault</a>(<a class=\"id\" href=\"#SIGBUS\">SIGBUS</a>, <a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void", 
"<a class=\"id\" href=\"#mm_fault_error\">mm_fault_error</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#address\">address</a>, unsigned int <a class=\"id\" href=\"#fault\">fault</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fault\">fault</a> &amp; <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_of_memory\">out_of_memory</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fault\">fault</a> &amp; (<a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>|<a class=\"id\" href=\"#VM_FAULT_HWPOISON\">VM_FAULT_HWPOISON</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_sigbus\">do_sigbus</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#fault\">fault</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#spurious_fault_check\">spurious_fault_check</a>(unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#error_code\">error_code</a> &amp; <a class=\"id\" href=\"#PF_WRITE\">PF_WRITE</a>) && !<a class=\"id\" href=\"#pte_write\">pte_write</a>(*<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#error_code\">error_code</a> &amp; <a class=\"id\" href=\"#PF_INSTR\">PF_INSTR</a>) && !<a class=\"id\" href=\"#pte_exec\">pte_exec</a>(*<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle a spurious fault caused by a stale TLB entry.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This allows us to lazily refresh the TLB when increasing the</span>", 
"<span class=\"comment\"> * permissions of a kernel page (RO -&gt; RW or NX -&gt; X).  Doing it</span>", 
"<span class=\"comment\"> * eagerly is very expensive since that implies doing a full</span>", 
"<span class=\"comment\"> * cross-processor TLB flush, even if no stale TLB entries exist</span>", 
"<span class=\"comment\"> * on other processors.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are no security implications to leaving a stale TLB when</span>", 
"<span class=\"comment\"> * increasing the permissions on a page.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> int", 
"<a class=\"id\" href=\"#spurious_fault\">spurious_fault</a>(unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reserved-bit violation or user access to kernel space? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error_code\">error_code</a> &amp; (<a class=\"id\" href=\"#PF_USER\">PF_USER</a> | <a class=\"id\" href=\"#PF_RSVD\">PF_RSVD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#init_mm\">init_mm</a>.<a class=\"id\" href=\"#pgd\">pgd</a> + <a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgd_present\">pgd_present</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pud_present\">pud_present</a>(*<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_large\">pud_large</a>(*<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#spurious_fault_check\">spurious_fault_check</a>(<a class=\"id\" href=\"#error_code\">error_code</a>, (<a class=\"id\" href=\"#pte_t\">pte_t</a> *) <a class=\"id\" href=\"#pud\">pud</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_large\">pmd_large</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#spurious_fault_check\">spurious_fault_check</a>(<a class=\"id\" href=\"#error_code\">error_code</a>, (<a class=\"id\" href=\"#pte_t\">pte_t</a> *) <a class=\"id\" href=\"#pmd\">pmd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_kernel\">pte_offset_kernel</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_present\">pte_present</a>(*<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#spurious_fault_check\">spurious_fault_check</a>(<a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure we have permissions in PMD.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If not, then there's a bug in the page tables:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#spurious_fault_check\">spurious_fault_check</a>(<a class=\"id\" href=\"#error_code\">error_code</a>, (<a class=\"id\" href=\"#pte_t\">pte_t</a> *) <a class=\"id\" href=\"#pmd\">pmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(!<a class=\"id\" href=\"#ret\">ret</a>, \"PMD has incorrect permission bits\\n\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#show_unhandled_signals\">show_unhandled_signals</a> = 1;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#access_error\">access_error</a>(unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>, int <a class=\"id\" href=\"#write\">write</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* write, present and write, not present: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* read, present: */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error_code\">error_code</a> &amp; <a class=\"id\" href=\"#PF_PROT\">PF_PROT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* read, not present: */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_READ\">VM_READ</a> | <a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a> | <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#fault_in_kernel_space\">fault_in_kernel_space</a>(unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#address\">address</a> >= <a class=\"id\" href=\"#TASK_SIZE_MAX\">TASK_SIZE_MAX</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This routine handles page faults.  It determines the address,</span>", 
"<span class=\"comment\"> * and the problem, and then passes it off to one of the appropriate</span>", 
"<span class=\"comment\"> * routines.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void <a class=\"id\" href=\"#__kprobes\">__kprobes</a>", 
"<a class=\"id\" href=\"#do_page_fault\">do_page_fault</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#write\">write</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fault\">fault</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the faulting address: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#read_cr2\">read_cr2</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Detect and handle instructions that would cause a page fault for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * both a tracked kernel page and a userspace page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kmemcheck_active\">kmemcheck_active</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_hide\">kmemcheck_hide</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prefetchw\">prefetchw</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#kmmio_fault\">kmmio_fault</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#address\">address</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We fault-in kernel-space virtual memory on-demand. The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'reference' page table is init_mm.pgd.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE! We MUST NOT take any locks for this case. We may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be in an interrupt or a critical region, and should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only copy the information from the master page table,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nothing more.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This verifies that the fault happens in kernel space</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (error_code &amp; 4) == 0, and that the fault was not a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * protection error (error_code &amp; 9) == 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#fault_in_kernel_space\">fault_in_kernel_space</a>(<a class=\"id\" href=\"#address\">address</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#error_code\">error_code</a> &amp; (<a class=\"id\" href=\"#PF_RSVD\">PF_RSVD</a> | <a class=\"id\" href=\"#PF_USER\">PF_USER</a> | <a class=\"id\" href=\"#PF_PROT\">PF_PROT</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vmalloc_fault\">vmalloc_fault</a>(<a class=\"id\" href=\"#address\">address</a>) >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kmemcheck_fault\">kmemcheck_fault</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#error_code\">error_code</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Can handle a stale RO-&gt;RW TLB: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spurious_fault\">spurious_fault</a>(<a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kprobes don't want to hook the spurious faults: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_page_fault\">notify_page_fault</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't take the mm semaphore here. If we fixup a prefetch</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fault we could otherwise deadlock:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_area_nosemaphore\">bad_area_nosemaphore</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* kprobes don't want to hook the spurious faults: */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#notify_page_fault\">notify_page_fault</a>(<a class=\"id\" href=\"#regs\">regs</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It's safe to allow irq's after cr2 has been saved and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * vmalloc fault has been handled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * User-mode registers count as a user access even for any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * potential system fault or CPU buglet:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#user_mode_vm\">user_mode_vm</a>(<a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_code\">error_code</a> |= <a class=\"id\" href=\"#PF_USER\">PF_USER</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error_code\">error_code</a> &amp; <a class=\"id\" href=\"#PF_RSVD\">PF_RSVD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgtable_bad\">pgtable_bad</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_sw_event\">perf_sw_event</a>(<a class=\"id\" href=\"#PERF_COUNT_SW_PAGE_FAULTS\">PERF_COUNT_SW_PAGE_FAULTS</a>, 1, 0, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're in an interrupt, have no user context or are running</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in an atomic region then we must not take the fault:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#in_atomic\">in_atomic</a>() || !<a class=\"id\" href=\"#mm\">mm</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_area_nosemaphore\">bad_area_nosemaphore</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When running in the kernel we expect faults to occur only to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * addresses in user space.  All other faults represent errors in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the kernel and should generate an OOPS.  Unfortunately, in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case of an erroneous fault occurring in a code path which already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holds mmap_sem we will deadlock attempting to validate the fault</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * against the address space.  Luckily the kernel only validly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * references user space from well defined areas of code, which are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * listed in the exceptions table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * As the vast majority of faults will be valid we will only perform</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the source reference check when there is a possibility of a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * deadlock. Attempt to lock the address space, if we cannot we then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * validate the source. If this is invalid we can skip the address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * space check, thus avoiding the deadlock:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#down_read_trylock\">down_read_trylock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#error_code\">error_code</a> &amp; <a class=\"id\" href=\"#PF_USER\">PF_USER</a>) == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#search_exception_tables\">search_exception_tables</a>(<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_area_nosemaphore\">bad_area_nosemaphore</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The above down_read_trylock() might have succeeded in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which case we'll have missed the might_sleep() from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * down_read():</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#vma\">vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_area\">bad_area</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> <= <a class=\"id\" href=\"#address\">address</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#good_area\">good_area</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_GROWSDOWN\">VM_GROWSDOWN</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_area\">bad_area</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error_code\">error_code</a> &amp; <a class=\"id\" href=\"#PF_USER\">PF_USER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Accessing the stack below %sp is always a bug.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The large cushion allows instructions like enter</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and pusha to work. (\"enter $65535, $31\" pushes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 32 pointers and then decrements %sp by 65535.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#address\">address</a> + 65536 + 32 * sizeof(unsigned long) &lt; <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_area\">bad_area</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#expand_stack\">expand_stack</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_area\">bad_area</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ok, we have a good vm_area for this memory access, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can handle it..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#good_area\">good_area</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write\">write</a> = <a class=\"id\" href=\"#error_code\">error_code</a> &amp; <a class=\"id\" href=\"#PF_WRITE\">PF_WRITE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#access_error\">access_error</a>(<a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#vma\">vma</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_area_access_error\">bad_area_access_error</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If for any reason at all we couldn't handle the fault,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make sure we exit gracefully rather than endlessly redo</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the fault:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fault\">fault</a> = <a class=\"id\" href=\"#handle_mm_fault\">handle_mm_fault</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#write\">write</a> ? <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a> : 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#fault\">fault</a> &amp; <a class=\"id\" href=\"#VM_FAULT_ERROR\">VM_FAULT_ERROR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm_fault_error\">mm_fault_error</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#fault\">fault</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fault\">fault</a> &amp; <a class=\"id\" href=\"#VM_FAULT_MAJOR\">VM_FAULT_MAJOR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#maj_flt\">maj_flt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_sw_event\">perf_sw_event</a>(<a class=\"id\" href=\"#PERF_COUNT_SW_PAGE_FAULTS_MAJ\">PERF_COUNT_SW_PAGE_FAULTS_MAJ</a>, 1, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#min_flt\">min_flt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_sw_event\">perf_sw_event</a>(<a class=\"id\" href=\"#PERF_COUNT_SW_PAGE_FAULTS_MIN\">PERF_COUNT_SW_PAGE_FAULTS_MIN</a>, 1, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_v8086_mode\">check_v8086_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"}", 
];
xr_frag_insert('l/ff/ee7f71544dbd09608e5e7e9a3c2a802a2ac17a.xr', __xr_tmp);
